<HTML xmlns="http://www.w3.org/TR/REC-html40"><HEAD>
<TITLE>WindowFunctions</TITLE>
<LINK rel="stylesheet" href="rrafs.css" type="text/css"/>
</HEAD><BODY><DIV NAME="top" ID="top">
		  <H3>WindowFunctions</H3>
		  <SMALL>Last Updated:<script language="JavaScript">document.write(document.lastModified)</script></SMALL>
<BR/>
<BR/>
<DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
              Actions for working with Window objects
           </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"/>
</DIV>
<BR/>
		<DIV NAME="list" ID="list">
		  <A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<TABLE cellspacing="3" border="1" cellpadding="2">
<TR>
<TD nowrap="true" width="27%"><A ID="linkdeprecated" NAME='list_Click' HREF='#detail_Click' >Click</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD>Deprecated For:GenericObject Click</TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A NAME='list_CloseWindow' HREF='#detail_CloseWindow' >CloseWindow</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD> 
                Sends a Close command to the active window.
              </TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A ID="linkdeprecated" NAME='list_CompareStoredProperties' HREF='#detail_CompareStoredProperties' >CompareStoredProperties</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD>Deprecated For:GenericObject CompareStoredProperties</TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A ID="linkdeprecated" NAME='list_DoubleClick' HREF='#detail_DoubleClick' >DoubleClick</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD>Deprecated For:GenericObject DoubleClick</TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A NAME='list_GetWinInfo' HREF='#detail_GetWinInfo' >GetWinInfo</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD> 
                     Gets the value of any property in a window.
                   </TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A NAME='list_GoBack' HREF='#detail_GoBack' >GoBack</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD> 
                     Make the application\device "go back" to the previous state or window.
                   </TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A ID="linkdeprecated" NAME='list_InputCharacters' HREF='#detail_InputCharacters' >InputCharacters</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD>Deprecated For:GenericMaster InputCharacters</TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A ID="linkdeprecated" NAME='list_InputKeys' HREF='#detail_InputKeys' >InputKeys</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD>Deprecated For:GenericMaster InputKeys</TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A NAME='list_Maximize' HREF='#detail_Maximize' >Maximize</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD> 
                Sends a WMaximize command to the active window.
              </TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A NAME='list_Minimize' HREF='#detail_Minimize' >Minimize</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD> 
                Sends a WMinimize command to the active window.
              </TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A NAME='list_PinchClose' HREF='#detail_PinchClose' >PinchClose</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD> 
                     Perform a shrinking "zoom out" operation on a touchscreen device supporting the feature.
                   </TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A NAME='list_PinchOpen' HREF='#detail_PinchOpen' >PinchOpen</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD> 
                     Perform an expanding "zoom in" operation on a touchscreen device supporting the feature.
                   </TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A NAME='list_Restore' HREF='#detail_Restore' >Restore</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD> 
                Sends a RestorePos command to the active window.
              </TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A ID="linkdeprecated" NAME='list_RightClick' HREF='#detail_RightClick' >RightClick</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD>Deprecated For:GenericObject RightClick</TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A NAME='list_SelectMenuID' HREF='#detail_SelectMenuID' >SelectMenuID</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD> 
                Attempts to select a particular menuitem by menuID.
              </TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A NAME='list_SelectMenuItem' HREF='#detail_SelectMenuItem' >SelectMenuItem</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD> 
                Attempts to select a particular text string menuitem.
              </TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A NAME='list_SelectMenuItemContains' HREF='#detail_SelectMenuItemContains' >SelectMenuItemContains</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD> 
                Attempts to select a menuitem based on a partial text match.
              </TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A NAME='list_SetFocus' HREF='#detail_SetFocus' >SetFocus</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD> 
                Set focus on the window.
              </TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A NAME='list_SetPosition' HREF='#detail_SetPosition' >SetPosition</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD> 
                Sends a SetPosition command to the window to set the position, size, and status of the window.
              </TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A NAME='list_VerifyImage' HREF='#detail_VerifyImage' >VerifyImage</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD> 
                 Performs a WindowVP CompareImage OR a RegionImageVP on an object.
              </TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A NAME='list_VerifyMainMenu' HREF='#detail_VerifyMainMenu' >VerifyMainMenu</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD> 
                Compares the active windows menu system with a benchmark
              </TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A NAME='list_VerifyMenuID' HREF='#detail_VerifyMenuID' >VerifyMenuID</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD> 
                Attempts to verify the state information of a particular menuitem
                identified by MenuID.
              </TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A NAME='list_VerifyMenuItem' HREF='#detail_VerifyMenuItem' >VerifyMenuItem</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD> 
               Attempts to verify the state information of a particular text string menuitem.
              </TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A NAME='list_VerifyMenuItemContains' HREF='#detail_VerifyMenuItemContains' >VerifyMenuItemContains</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD> 
               Attempts to verify the state information of a menuitem found by partial text match.
              </TD>
</TR>
<TR>
<TD nowrap="true" width="27%"><A NAME='list_VerifyOCRValue' HREF='#detail_VerifyOCRValue' >VerifyOCRValue</A></TD><TD width="12%" align="CENTER">
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</TD>
		  <TD> 
                 Performs an UNLOGGED WindowVP CompareImage OR a RegionImageVP on an 
                 object then attempts to retrieve and compare OCR text to the expected 
                 value provided.
              </TD>
</TR>
</TABLE>
<HR/>
</DIV>
		<DIV NAME="detail" ID="detail">
		  <H3><A NAME='detail_Click'></A>WindowFunctions::<SPAN ID="deprecated">Click</SPAN>  (deprecated for: <B>GenericObject Click</B>)   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Performs a click on any part of a Window based on a stored x,y coordinate.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><p>For components that are unrecognized, like ActiveToolbar menuitems, 
                we can click on these or any part of a Window based on a stored x,y 
                coordinate.  The window containing the coordinate is first given 
                context and then a click is generated at the coordinate.  Thus, an item 
                or object can be referenced by name even though it is only recognized
                via coordinates.</p>
<p>
                The coordinate lookup is done with the component name of the record AND 
                Field #5.</p>
<p>
                Typical Data Table records:</p>
<p> 
                (1) t MainWindow MainWindow Click AnObject<br>
                (2) t MainWindow FileMenu  Click Exit</p>
<p>
                #1 above will contain an AnObject="3,10" entry in the MainWindow section 
                of the Application Map to click at x=3, y=10 in the MainWindow.</p>
<p>
                #2 above will contain a FileMenu entry in the MainWindow section with 
                normal recognition information for it (the type, however, should still 
                be "Window" even if unspecified).  FileMenu will also have it's
                own section in the Application Map in which there will be an entry like 
                Exit="15,30".  This will tell Robot to locate the FileMenu Window 
                object and click at the coordinates specified by the reference.</p></detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ><LI>
<B>AppMapSubkey</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Name of the AppMap subkey to lookup and use for the click.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><p>Name of the AppMap subkey to lookup and use for the click.
                We expect the AppMap to contain the item in the format "x,y":</p>
<p>
                [FileMenu]
                Exit=33,120   OR
                Exit=Coords=33,120 </p>
<p>
                The results from the lookup are appended to the "Coords=" string 
                used by the Window Click command in Robot (if necessary).  So any 
                valid content used with the Window Click command can be part of 
                this AppMap entry.</p>
<p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p></detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, WINDOW, WINDOW, CLICK, AnObject</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                A single-click is performed on the WINDOW at the location referenced in the App Map for AnObject.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                A reference identified in the Application Map identifying coordinates on which to click.
                AnObject which will be found in the Application Map as a referenced item in the
                MainWindow section.
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/><LI>
<B><usage xmlns="">T, WINDOW, AnObject, CLICK, ASubObject</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                A single-click is performed on the WINDOW at the location referenced in the App Map.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                A reference identified in the Application Map identifying coordinates on which to click.
                AnObject as a viable object in the MainWindow but that it also has its own section in the
                Application Map which contains one or more named references like ASubObject which are used
                for test.
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_CloseWindow'></A>WindowFunctions::<BIG>CloseWindow</BIG>   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Sends a Close command to the active window.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><note><engines><engine vendor="Rational" tool="Robot" name="Robot" since="20030827" expectFailSupport="NO" expectWarnSupport="NO"><domains><domain name="WIN" expectFailSupport="NO" expectWarnSupport="NO"></domain></domains></engine></engines><value><p>This Window command has a problem in that it does not want to
                use the same recognition methods used by the other Window commands (like
                SetContext).  Particularly, it does not accept the Type=Window portion
                of these recognition methods.  In addition, if the window is a child
                window of a parent then it expects the ";ChildWindow" add-on in the 
                recognition method.  The child may also need the parent as part of its
                full recognition string like:</p>
<p>
                ChildWindow=Type=Window;&lt;parent rec&gt;;\;Caption=&lt;caption&gt;;ChildWindow</p>
<p>
                To handle these child windows, we parse the typical recognition method for 
                our window and attempt to handle these issues.  Once SetContext has 
                successfully set our window, we then remove any "Type=Window" substring 
                if present and add the ";ChildWindow" substring if not present.</p>
<p>
                To take advantage of this, this routine must be called with the child
                window as a component of the parent window like below:</p>
<p>
                t, ParentWindow, ChildWindow, CloseWindow</p>
<p>
                If the routine is called like either of the examples below then default
                processing will occur.  This will merely SetContext on the provided 
                Window and use "CurrentWindow" as the parameter to the command.</p>
<p>
                t, ParentWindow, ParentWindow, CloseWindow<br>
                t, ChildWindow , ChildWindow , CloseWindow  (normally won't work)</p></value></note><note><engines><engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140506" expectFailSupport="NO" expectWarnSupport="NO"><domains><domain name="HTML" expectFailSupport="NO" expectWarnSupport="NO"></domain></domains></engine></engines><value>Closes the "current" or "lastUsed" WebDriver associated with the found Window component.</value></note></detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, WINDOW, WINDOW, CLOSEWINDOW</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
               Sends a CloseWindow command to the specified Window
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                Sends a CloseWindow command to the specified Window
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_CompareStoredProperties'></A>WindowFunctions::<SPAN ID="deprecated">CompareStoredProperties</SPAN>  (deprecated for: <B>GenericObject CompareStoredProperties</B>)   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Performs a WindowVP CompareProperties on an object.  
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><p>Performs a WindowVP CompareProperties on an object.  
                The benchmark VP must already exist and be an asset of the currently 
                running script.</p>
<p>
                To make an existing VP an asset of the current script,
                the existing script, e.g.,</p>
<p>
                MADHATTERScript.MyObjectVP.base.OBP</p>
<p>
                can be copied and renamed to</p>
<p>
                MyDDScript.MyObjectVP.base.OBP</p>
<p>
                where MyDDScript is the name of the current script.</p>
<p>
                The name of the actual VP, MyObjectVP, cannot be altered.</p>
<p>
                Example 1: Perform a WindowVP on a given window</p>
<p>
                t, MainWindow, MainWindow, CompareStoredProperties, MainSetupVP1</p></detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ><LI>
<B>VPAsset</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                 Name of the pre-existing VP asset stored in the currently running script.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"/>
		  </LI>
<BR/></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, WINDOW, WINDOW, COMPARESTOREDPROPERTIES, "AStoredVP"</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                This action performs a WindowVP CompareProperties on the WINDOW object against "AStoredVP".
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                This action performs a WindowVP CompareProperties on the WINDOW object against "AStoredVP".
                The name of the stored CompareProperties VP which must exist as an asset of the currently running script.
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_DoubleClick'></A>WindowFunctions::<SPAN ID="deprecated">DoubleClick</SPAN>  (deprecated for: <B>GenericObject DoubleClick</B>)   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Performs a double-click on any part of a Window based on a stored x,y coordinate.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><p>For components that are unrecognized, like ActiveToolbar menuitems, 
                we can double click on these or any part of a Window based on a stored 
                x,y coordinate.  The window containing the coordinate is first given 
                context and then a double click is generated at the coordinate.  Thus, 
                an item or object can be referenced by name even though it is only 
                recognized via coordinates.</p>
<p>
                The coordinate lookup is done with the component name of the record AND 
                Field #5.</p>
<p> 
                Typical Data Table records:</p>
<p>
                (1) t MainWindow MainWindow DoubleClick AnObject<br>
                (2) t MainWindow FolderTree DoubleClick Node1</p>
<p>
                #1 above will contain an AnObject="3,10" entry in the MainWindow section 
                of the Application Map to double click at x=3, y=10 in the MainWindow.</p>
<p>
                #2 above will contain a FolderTree entry in the MainWindow section with 
                normal recognition information for it .  FolderTree will also have it's
                own section in the Application Map in which there will be an entry like 
                Node1="15,30".  This will tell Robot to locate the FolderTree 
                object and double click at the coordinates specified by the reference.</p></detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ><LI>
<B>AppMapSubkey</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Name of the AppMap subkey to lookup and use for the double-click.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><p>Name of the AppMap subkey to lookup and use for the double-click.
                We expect the AppMap to contain the item in the format "x,y":</p>
<p>
                [FileMenu]
                Exit=33,120   OR
                Exit=Coords=33,120 </p>
<p>
                The results from the lookup are appended to the "Coords=" string 
                used by the Window DBLClick command in Robot (if necessary).  So any 
                valid content used with the Window DBLClick command can be part of 
                this AppMap entry.</p>
<p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p></detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, WINDOW, WINDOW, DOUBLECLICK, AnObject</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                A double-click is performed on the WINDOW at the location referenced in the App Map for AnObject.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                A reference identified in the Application Map identifying coordinates on which to double-click.
                AnObject which will be found in the Application Map as a referenced item in the
                MainWindow section.
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/><LI>
<B><usage xmlns="">T, WINDOW, AnObject, DOUBLECLICK, ASubObject</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                A double-click is performed on the WINDOW at the location referenced in the App Map.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                A reference identified in the Application Map identifying coordinates on which to double-click.
                AnObject as a viable object in the MainWindow but that it also has its own section in the
                Application Map which contains one or more named references like ASubObject which are used
                for test.
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_GetWinInfo'></A>WindowFunctions::<BIG>GetWinInfo</BIG>   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                     Gets the value of any property in a window.
                   </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><p>Gets the value of any property in a window and assigns that property
                     to a variable for later use.
                     </p></detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ><LI>
<B>PropertyName</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                     The name of the property to retrieve.
                   </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"/>
		  </LI>
<BR/><LI>
<B>VariableName</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
			  The name of the variable that the property value should be stored in.
			</short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"/>
		  </LI>
<BR/></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, WINDOWNAME, WINDOWNAME, GETWININFO, Caption, ^TitleValue</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                     The caption of the window is stored in the variable ^TitleValue
                   </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"/>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_GoBack'></A>WindowFunctions::<BIG>GoBack</BIG>   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                     Make the application\device "go back" to the previous state or window.
                   </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                     This is largely for apps or devices--like mobile devices--that have the ability to 
                     "go back" that might be activated by a control that is NOT always part of 
                     the application GUI.  Example: a hardware "back" button or menu button that is not 
                     part of the application itself.
                     <p>
                     Depending upon the technology implementation, The WINDOWNAME may not have to be 
                     valid or exist at the time of invocation.  That is, the WINDOWNAME and COMPNAME 
                     fields might not be used and can contain anything.                     
                     </p></detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, WINDOWNAME, WINDOWNAME, GoBack</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                       The application or device should go back to a previous state or activity.
                   </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"/>
</LI>
<BR/><LI>
<B><usage xmlns="">T, Anything, AtAll, GoBack</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                       The application or device should go back to a previous state or activity.
                   </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                       This example might work if the implementation does not require any real 
                       GUI reference because the command does not act on an actual GUI component.
                   </detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_InputCharacters'></A>WindowFunctions::<SPAN ID="deprecated">InputCharacters</SPAN>  (deprecated for: <B>GenericMaster InputCharacters</B>)   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Sends literal text to the active window via an InputChars command.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                Sends literal text to the active window via an InputChars command.
                The InputChars command does not convert or interpret any special 
                characters like InputKeys (InputKeystrokes) does.
              </detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ><LI>
<B>TextValue</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                String of keystrokes to send.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                String of keystrokes to send.
                Consult the documentation on the SQA InputKeys command for 
                syntax information for special characters and keys.  This 
                routine sends the provided string unmodified to the InputKeys
                command.
              </detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, WINDOW, WINDOW, INPUTCHARACTERS, "Some Text to Input"</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
               This action sends "Some Text to Input" as keystrokes to the WINDOW object.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                Field  5 : TQ String. Case-sensitive text to send to the specified window.
                The text will be sent as literal text, unmodified by the command
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_InputKeys'></A>WindowFunctions::<SPAN ID="deprecated">InputKeys</SPAN>  (deprecated for: <B>GenericMaster InputKeys</B>)   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Sends keystrokes to the active window via an InputKeys command.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                Sends keystrokes to the active window via an InputKeys command.
              </detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ><LI>
<B>TextValue</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                String of keystrokes to send.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                String of keystrokes to send.
                Consult the documentation on the SQA InputKeys command for 
                syntax information for special characters and keys.  This 
                routine sends the provided string unmodified to the InputKeys
                command.
              </detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, WINDOW, WINDOW, INPUTKEYS, "Some Text to Input"</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
               This action sends "Some Text to Input" as keystrokes to the WINDOW object.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><p>Field  5 : TQ String. case-sensitive text to send to the specified window.</p>
<p>Some Special Characters:
                {Enter}= ENTER key
                {Tab} = TAB key
                ^ = CONTROL Key with another key ( "^S" = CONTROL + s)
                %= ALT  Key with another key ("%F" = ALT + F)
                + = SHIFT key with another key ("+{Enter}" = SHIFT + ENTER)
                Currently, we pass-thru to the underlying implementation (Rational SQABasic).
                Any future implementations will also use the same syntax.</p></detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_Maximize'></A>WindowFunctions::<BIG>Maximize</BIG>   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Sends a WMaximize command to the active window.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><p>Sends a WMaximize command to the active window.</p>
<p>
                This Window command has a problem in that it does not want to
                use the same recognition methods used by the other Window commands (like
                SetContext).  Particularly, it does not accept the Type=Window portion
                of these recognition methods.  In addition, if the window is a child
                window of a parent then it expects the ";ChildWindow" add-on in the 
                recognition method.  The child may also need the parent as part of its
                full recognition string like:</p>
<p>
                ChildWindow=Type=Window;&lt;parent rec&gt;;\;Caption=&lt;caption&gt;;ChildWindow</p>
<p> 
                To handle these child windows, we parse the typical recognition method for 
                our window and attempt to handle these issues.  Once SetContext has 
                successfully set our window, we then remove any "Type=Window" substring 
                if present and add the ";ChildWindow" substring if not present.</p>
<p>
                To take advantage of this, this routine must be called with the child
                window as a component of the parent window like below:</p>
<p>
                t, ParentWindow, ChildWindow, Maximize</p>
<p>
                If the routine is called like either of the examples below then default
                processing will occur.  This will merely SetContext on the provided 
                Window and use "CurrentWindow" as the parameter to the command.</p>
<p>
                t, ParentWindow, ParentWindow, Maximize<br>
                t, ChildWindow , ChildWindow , Maximize   (normally won't work)</p></detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, WINDOW, WINDOW, MAXIMIZE</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
               Sends a Maximize command to the specified Window.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                Sends a Maximize command to the specified Window.
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_Minimize'></A>WindowFunctions::<BIG>Minimize</BIG>   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Sends a WMinimize command to the active window.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><p>Sends a WMinimize command to the active window.</p>
<p>
                This Window command has a problem in that it does not want to
                use the same recognition methods used by the other Window commands (like
                SetContext).  Particularly, it does not accept the Type=Window portion
                of these recognition methods.  In addition, if the window is a child
                window of a parent then it expects the ";ChildWindow" add-on in the 
                recognition method.  The child may also need the parent as part of its
                full recognition string like:</p>
<p>
                ChildWindow=Type=Window;&lt;parent rec&gt;;\;Caption=&lt;caption&gt;;ChildWindow</p>
<p>
                To handle these child windows, we parse the typical recognition method for 
                our window and attempt to handle these issues.  Once SetContext has 
                successfully set our window, we then remove any "Type=Window" substring 
                if present and add the ";ChildWindow" substring if not present.</p>
<p>
                To take advantage of this, this routine must be called with the child
                window as a component of the parent window like below:</p>
<p>
                t, ParentWindow, ChildWindow, Minimize</p>
<p>
                If the routine is called like either of the examples below then default
                processing will occur.  This will merely SetContext on the provided 
                Window and use "CurrentWindow" as the parameter to the command.</p>
<p>
                t, ParentWindow, ParentWindow, Minimize<br>
                t, ChildWindow , ChildWindow , Minimize   (normally won't work)</p></detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, WINDOW, WINDOW, MINIMIZE</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
               Sends a Minimize command to the specified Window.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                Sends a Minimize command to the specified Window.
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_PinchClose'></A>WindowFunctions::<BIG>PinchClose</BIG>   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                     Perform a shrinking "zoom out" operation on a touchscreen device supporting the feature.
                   </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                     Perform a shrinking "zoom out" operation on a touchscreen device supporting the feature.
                     <p>
                     Effectively shrinks a user-defined rectangular area on the screen.
                     </p><p>
                     IOS expects the Window/Component to be the main active Window of the application.
                     </p></detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ><LI>
<B>OriginSubKey</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                     The AppMapSubkey that contains the onscreen rectangle for the pinch operation.
                   </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                     Name of the AppMap subkey to lookup and use for OriginRect or the actual 
                     literal text for the values.
                     <p>
                     We expect the rectangle stored in the App Map or the literal text to be specified 
                     as integer rectangle coordinates and size in pixels: X,Y,Width,Height.
                     </p><p><pre>
               [AppWindow]
               ...
               Origin1="50,200,25,25"      OR
               Origin2="Coords=100,75,125,125"
               ...
               </pre></p>
<p>
		             Engines should attempt to support coordinates separated by alternate separators.  
		             The most common separators that should be supported would be:
		             <ul>
<li>"," (comma) Example: "50,200,25,25"</li>
<li>";" (semi-colon) Example: "50;200;25;25"</li>
<li>" " (space) Example: "50 200 25 25"</li>
</ul>
</p><p>
		             If the App Map does not contain the subkey item then the engines should assume 
		             the value is the literal text of the rectangle coordinate and size values.
		             </p></detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/><LI>
<B>ResizeSubKey</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                     Name of the AppMap subkey to lookup for the resize value or the literal text of 
                     the resize values.
                   </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                     Name of the AppMap subkey to lookup for the resize value or the literal text of 
                     the resize values.
                     <p>
                     We expect the resize value stored in the App Map or the literal text to be specified 
                     as integer values (in pixels): +/-Width, +/-Height.
                     </p><p><pre>
               [AppWindow]
               ...
               Resize1="0,-50"   (no width change, but shrink the height by 50 pixels)  
               Resize2="Coords=-40,0" (shrink width by 40 pixels, with no change in height.)
               ...
               </pre></p>
<p>
                     These resize offsets can be positive or negative integer values and will be added to 
                     the existing width and/or height of OrigRect.
  		             </p><p>
		             Engines should attempt to support values separated by alternate separators.  
		             The most common separators that should be supported would be:
		             <ul>
<li>"," (comma) Example: "0,50"</li>
<li>";" (semi-colon) Example: "0;50"</li>
<li>" " (space) Example: "0 50"</li>
</ul>
</p><p>
		             If the App Map does not contain the subkey item then the engines should assume 
		             the value is the literal text of the resize values.
		             </p></detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/><LI>[ <B>Duration</B> = 1 ]<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns="">The number of seconds to take for the operation.</short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                     Where supported, the engine should attempt to make the operation take up to N seconds 
                     in duration.  The default is 1 second.
                   </detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, AppWindow, AppWindow, PinchClose, Origin1, Resize2</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                     Pinch close the window by shrinking the Origin1 rectangle by the amounts specified in Resize2.
                   </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                     Origin1 and Resize2 values are expected to be stored in the [AppWindow] section of the App Map 
                     since they are not proper literal text values.  The operation will take the default 1 second.
                   </detailed_desc><BR/>
		</DIV>
</LI>
<BR/><LI>
<B><usage xmlns="">T, AppWindow, AppWindow, PinchClose, Origin1, "-40;-40", 3</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                     Pinch close the window by shrinking the Origin1 rectangle 40 pixels in 
                     both width and height.
                   </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                     Origin1 is expected to be stored in the [AppWindow] section of the App Map 
                     since it is not a proper literal text value. The operation will occur over 3 seconds.
                   </detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_PinchOpen'></A>WindowFunctions::<BIG>PinchOpen</BIG>   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                     Perform an expanding "zoom in" operation on a touchscreen device supporting the feature.
                   </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                     Perform an expanding "zoom in" operation on a touchscreen device supporting the feature.
                     <p>
                     Effectively expands or stretches a user-defined rectangular area on the screen.
                     </p><p>
                     IOS expects the Window/Component to be the main active Window of the application.
                     </p></detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ><LI>
<B>OriginSubKey</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                     The AppMapSubkey that contains the onscreen rectangle for the pinch operation.
                   </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                     Name of the AppMap subkey to lookup and use for OriginRect or the actual 
                     literal text for the values.
                     <p>
                     We expect the rectangle stored in the App Map or the literal text to be specified 
                     as integer rectangle coordinates and size in pixels: X,Y,Width,Height.
                     </p><p><pre>
                [AppWindow]
                ...
                Origin1="50,200,25,25"      OR
                Origin2="Coords=100,75,125,125"
                ...
                </pre></p>
<p>
		             Engines should attempt to support coordinates separated by alternate separators.  
		             The most common separators that should be supported would be:
		             <ul>
<li>"," (comma) Example: "50,200,25,25"</li>
<li>";" (semi-colon) Example: "50;200;25;25"</li>
<li>" " (space) Example: "50 200 25 25"</li>
</ul>
</p><p>
		             If the App Map does not contain the subkey item then the engines should assume 
		             the value is the literal text of the rectangle coordinate and size values.
		             </p></detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/><LI>
<B>ResizeSubKey</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                     Name of the AppMap subkey to lookup for the resize value or the literal text of 
                     the resize values.
                   </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                     Name of the AppMap subkey to lookup for the resize value or the literal text of 
                     the resize values.
                     <p>
                     We expect the resize value stored in the App Map or the literal text to be specified 
                     as integer values (in pixels): +/-Width, +/-Height.
                     </p><p><pre>
                [AppWindow]
                ...
                Resize1="0,50"   (no width change, but grow in height by 50 pixels)  
                Resize2="Coords=50,0" (grow width by 50 pixels, with no change in height.)
                ...
                </pre></p>
<p>
                     These resize offsets can be positive or negative integer values and will be added to 
                     the existing width and/or height of OrigRect.
  		             </p><p>
		             Engines should attempt to support values separated by alternate separators.  
		             The most common separators that should be supported would be:
		             <ul>
<li>"," (comma) Example: "0,50"</li>
<li>";" (semi-colon) Example: "0;50"</li>
<li>" " (space) Example: "0 50"</li>
</ul>
</p><p>
		             If the App Map does not contain the subkey item then the engines should assume 
		             the value is the literal text of the resize values.
		             </p></detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/><LI>[ <B>Duration</B> = 1 ]<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns="">The number of seconds to take for the operation.</short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                     Where supported, the engine should attempt to make the operation take up to N seconds 
                     in duration.  The default is 1 second.
                   </detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, AppWindow, AppWindow, PinchOpen, Origin1, Resize1</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                     Pinch open (zoom) the window by stretching the Origin1 rectangle by the amounts specified in Resize1.
                   </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                     Origin1 and Resize1 values are expected to be stored in the [AppWindow] section of the App Map 
                     since they are not proper literal text values.  The operation will take the default 1 second.
                   </detailed_desc><BR/>
		</DIV>
</LI>
<BR/><LI>
<B><usage xmlns="">T, AppWindow, AppWindow, PinchOpen, Origin1, "40;40", 3</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                     Pinch open (zoom) the window by stretching the Origin1 rectangle 40 pixels in 
                     both width and height.
                   </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                     Origin1 is expected to be stored in the [AppWindow] section of the App Map 
                     since it is not a proper literal text value. The operation will occur over 3 seconds.
                   </detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_Restore'></A>WindowFunctions::<BIG>Restore</BIG>   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Sends a RestorePos command to the active window.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><p>Sends a RestorePos command to the active window.</p>
<p>
                This Window command has a problem in that it does not want to
                use the same recognition methods used by the other Window commands (like
                SetContext).  Particularly, it does not accept the Type=Window portion
                of these recognition methods.  In addition, if the window is a child
                window of a parent then it expects the ";ChildWindow" add-on in the 
                recognition method.  The child may also need the parent as part of its
                full recognition string like:</p>
<p>
                ChildWindow=Type=Window;&lt;parent rec&gt;;\;Caption=&lt;caption&gt;;ChildWindow</p>
<p>
                To handle these child windows, we parse the typical recognition method for 
                our window and attempt to handle these issues.  Once SetContext has 
                successfully set our window, we then remove any "Type=Window" substring 
                if present and add the ";ChildWindow" substring if not present.</p>
<p>
                To take advantage of this, this routine must be called with the child
                window as a component of the parent window like below:</p>
<p>
                t, ParentWindow, ChildWindow, Restore</p>
<p>
                If the routine is called like either of the examples below then default
                processing will occur.  This will merely SetContext on the provided 
                Window and use "CurrentWindow" as the parameter to the command.</p>
<p>
                t, ParentWindow, ParentWindow, Restore<br>
                t, ChildWindow , ChildWindow , Restore      (normally won't work)</p></detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, WINDOW, WINDOW, RESTORE</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
               Sends a Restore command to the specified Window.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                Sends a Restore command to the specified Window.
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_RightClick'></A>WindowFunctions::<SPAN ID="deprecated">RightClick</SPAN>  (deprecated for: <B>GenericObject RightClick</B>)   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Performs a right-click on any part of a Window based on a stored x,y coordinate.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><p>For components that are unrecognized, like ActiveToolbar menuitems, 
                we can right click on these or any part of a Window based on a stored x,y 
                coordinate.  The window containing the coordinate is first given 
                context and then a right click is generated at the coordinate.  Thus, an item 
                or object can be referenced by name even though it is only recognized
                via coordinates.</p>
<p>
                The coordinate lookup is done with the component name of the record AND 
                Field #5.</p>
<p>
                Typical Data Table records:</p>
<p>
                (1) t MainWindow MainWindow RightClick AnObject<br>
                (2) t MainWindow  ToolItem  RightClick PrintTool</p>
<p>
                #1 above will contain an AnObject="3,10" entry in the MainWindow section 
                of the Application Map to right click at x=3, y=10 in the MainWindow.</p>
<p>
                #2 above will contain a ToolItem entry in the MainWindow section with 
                normal recognition information for it .  ToolItem will also have it's
                own section in the Application Map in which there will be an entry like 
                PrintTool="15,30".  This will tell Robot to locate the PrintTool Window 
                object and right click at the coordinates specified by the reference.</p></detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ><LI>
<B>AppMapSubkey</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Name of the AppMap subkey to lookup and use for the right-click.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><p>Name of the AppMap subkey to lookup and use for the right-click.
                We expect the AppMap to contain the item in the format "x,y":</p>
<p>
                [FileMenu]
                Exit=33,120   OR
                Exit=Coords=33,120 </p>
<p>
                The results from the lookup are appended to the "Coords=" string 
                used by the Window Right_Click command in Robot (if necessary).  So any 
                valid content used with the Window Right_Click command can be part of 
                this AppMap entry.</p>
<p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p></detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, WINDOW, WINDOW, RIGHTCLICK, AnObject</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                A right-click is performed on the WINDOW at the location referenced in the App Map for AnObject.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                A reference identified in the Application Map identifying coordinates on which to right-click.
                AnObject which will be found in the Application Map as a referenced item in the
                MainWindow section.
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/><LI>
<B><usage xmlns="">T, WINDOW, AnObject, RIGHTCLICK, ASubObject</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                A right-click is performed on the WINDOW at the location referenced in the App Map.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                A reference identified in the Application Map identifying coordinates on which to right-click.
                AnObject as a viable object in the MainWindow but that it also has its own section in the
                Application Map which contains one or more named references like ASubObject which are used
                for test.
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_SelectMenuID'></A>WindowFunctions::<BIG>SelectMenuID</BIG>   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Attempts to select a particular menuitem by menuID.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                Attempts to select a particular menuitem by menuID.  This is generally 
                used when the menuitem is a bitmap or other item that does not have 
                text.  This value can be retrieved from the the menu by index or by 
                manual lookup from a menu structure output from MenuUtilities.
                The routine first verifies that the specified menuitem exists and exits 
                with error if it does not.  If it does exist then the selection proceeds.
              </detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ><LI>
<B>MenuID</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                MenuID to identify which menuitem to select.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                MenuID to identify which menuitem to select.
              </detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, WINDOW, WINDOW, SELECTMENUID, 37</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
               This actions selects menuid 37.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                Field  5 : TQ String. numeric menu ID of the menu item to select.  
                This is generally only used when the menu item has no displayed text.  
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_SelectMenuItem'></A>WindowFunctions::<BIG>SelectMenuItem</BIG>   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Attempts to select a particular text string menuitem.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><p>Attempts to select a particular text string menuitem.  The menuitem 
                should be specified in the form "Menu-&gt;Menu-&gt;MenuItem   CTRL+V" 
                with the full text, spaces(if any), and keyboard shortcut text (if
                any).</p>
<p>
                Ampersands preceding underlined characters are optional.
                The routine first verifies that the specified menuitem exists
                and exits with error if it does not.
                If it does exist then the selection proceeds using the MenuID retrieved
                from the found menuitem.</p></detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ><LI>
<B>TextValue</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to select.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to select.
                NOTE:RC (Robot) can only handle submenus up to 5 levels deep.
              </detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, WINDOW, WINDOW, SELECTMENUITEM, "&amp;File-&gt;&amp;Save  Ctrl+S"</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
               This actions selects the Save menuitem under the File menu pulldown.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                Field  5 : TQ String. the full case-sensitive menu item path to select.  
                Ampersands (&amp;) indicating/preceding underlined characters are optional.
                The text must include the full text including spaces and any visible shortcut
                key combinations displayed in the text of the menu item.  The menu does not
                have to be open to issue the command.  Just issue the command from a normal state.
                This command only works if the Window implements standard menus.  Use InputKeys
                or Window Click commands to use non-standard menus or to navigate individual menu panels. 
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/><LI>
<B><usage xmlns="">T, PopupMenu, PopupMenu, SELECTMENUITEM, "Exit"</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
               This actions selects the Exit menuitem from an exposed File popup menu.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                Field  5 : TQ String. the full case-sensitive menu item path to select.  
                Ampersands (&amp;) indicating/preceding underlined characters are optional.
                The text must include the full text including spaces and any visible shortcut
                key combinations displayed in the text of the menu item.  For a popup menu, the 
                menu does have to be exposed to be found.  This command only works if the Window 
                implements standard menus.  Use InputKeys
                or Window Click commands to use non-standard menus or to navigate individual menu panels. 
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_SelectMenuItemContains'></A>WindowFunctions::<BIG>SelectMenuItemContains</BIG>   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Attempts to select a menuitem based on a partial text match.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><p>Attempts to select a menuitem based on a partial text match.  
                The menuitem should be specified in the form "Menu-&gt;Menu-&gt;MenuItem".
                Each level in the hierarchy can be represented by partial text.</p>
<p>
                Ampersands preceding underlined characters are optional.
                The routine first verifies that the specified menuitem exists
                and exits with error if it does not.
                If it does exist then the selection proceeds using the MenuID retrieved
                from the found menuitem.</p></detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ><LI>
<B>TextValue</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to select.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to select.
                NOTE:RC (Robot) can only handle submenus up to 5 levels deep.
              </detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, WINDOW, WINDOW, SELECTMENUITEMCONTAINS, "&amp;File-&gt;&amp;Save"</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
               This actions selects the Save menuitem under the File menu pulldown.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                Field  5 : TQ String. the case-sensitive menu item path to select.  
                Ampersands (&amp;) indicating/preceding underlined characters are optional.
                The menu does not have to be open to issue the command.  Just issue the command 
                from a normal state.
                This command only works if the Window implements standard menus.  Use InputKeys
                or Window Click commands to use non-standard menus or to navigate individual menu panels. 
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/><LI>
<B><usage xmlns="">T, PopupMenu, PopupMenu, SELECTMENUITEMCONTAINS, "x"</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
               This actions selects the Exit menuitem from an exposed File popup menu.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                Field  5 : TQ String. the case-sensitive menu item path to select.  
                Ampersands (&amp;) indicating/preceding underlined characters are optional.
                For a popup menu the menu does have to be exposed to be able to select its menuitems.  
                This command only works if the Window implements standard menus.  Use InputKeys
                or Window Click commands to use non-standard menus or to navigate individual menu panels. 
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_SetFocus'></A>WindowFunctions::<BIG>SetFocus</BIG>   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Set focus on the window.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><p>Set focus and bring the window forward.</p>
<p>
                	Bring the window forward. If there are same name/caption/title windows then the first 
                	window will come forward. The window is find by title. 
                </p></detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, WINDOW, WINDOW, SETFOCUS</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
               Set focus on the specified Window.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                Set focus on the specified Window.
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_SetPosition'></A>WindowFunctions::<BIG>SetPosition</BIG>   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Sends a SetPosition command to the window to set the position, size, and status of the window.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><p>Sends a SetPosition command to the window to set the position, size, 
                and status of the window.  The position, size, and status information 
                is stored in the app map as a subitem in the section for the window.
                The information should be in the format of:</p>
<p>
                "0,0,640,480;Status=NORMAL"    OR
                "Coords=0,0,640,480;Status=NORMAL"</p>
<p>
                That example positions the window at 0,0; sizes it to 640 x 480, and
                sets it's status to NORMAL.  Valid values for STATUS are:</p>
<p>
                NORMAL, MINIMIZED, and MAXIMIZED</p>
<p>
                The Window SetPosition command has a problem in that it does not want to
                use the same recognition methods used by the other Window commands (like
                SetContext).  Particularly, it does not accept the Type=Window portion
                of these recognition methods.  In addition, if the window is a child
                window of a parent then it expects the ";ChildWindow" add-on in the 
                recognition method.  The child may also need the parent as part of its
                full recognition string like:</p>
<p>
                ChildWindow=Type=Window;&lt;parent rec&gt;;\;Caption=&lt;caption&gt;;ChildWindow</p>
<p>
                To handle these child windows, we parse the typical recognition method for 
                our window and attempt to handle these issues.  Once SetContext has 
                successfully set our window, we then remove any "Type=Window" substring 
                if present and add the ";ChildWindow" substring if not present.</p>
<p>
                To take advantage of this, this routine must be called with the child
                window as a component of the parent window like below:</p>
<p>
                t, ParentWindow, ChildWindow, SetPosition, ChildPositionReference</p>
<p>
                If the routine is called like either of the examples below then default
                processing will occur.  This will merely SetContext on the provided 
                Window and use "CurrentWindow" as the parameter to SetPosition.</p>
<p>
                t, ParentWindow, ParentWindow, SetPosition, ParentPosition<br>
                t, ChildWindow , ChildWindow , SetPosition, ChildPosition   (normally won't work)</p></detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ><LI>
<B>PresetReference</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                String specifying a preset reference in the Application for the position, size, and state of the Window.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                String specifying a preset reference in the Application for the position, size, and state of the Window.
                command.
              </detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, WINDOW, WINDOW, SETPOSITION, Preset1</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Preset1 specifies a preset reference in the Application for the position, size, and state of the Window.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                Field  5 : TQ String specifying a preset reference in the Application for the position,
                size, and state of the Window.
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_VerifyImage'></A>WindowFunctions::<BIG>VerifyImage</BIG>   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                 Performs a WindowVP CompareImage OR a RegionImageVP on an object.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><p>Performs a WindowVP CompareImage OR a RegionImageVP on an object.  
                The benchmark VP must already exist and be an asset of the currently 
                running script.</p>
<p>
                A RegionImageVP can be accomplished by having the name of the VP as an item 
                under the component in the application map.  The item's value must be 
                the coordinate values required by the RegionImageVP (i.e. "65,100,200,250").</p>
<p>
                Example 1: Perform a WindowVP CompareImage</p>
<p>
                MainWindow SomeWindowObject VerifyImage StoredVP</p>
<p>
                (no StoredVP item found in the app map under SomeWindowObject)</p>
<p>
                The named VP (StoredVP) must not exist in the application map.  The 
                entire panel/object of SomeWindowObject will be captured and compared 
                against the StoredVP baseline which must already exist as an asset of the
                currently running script.</p>
<p>
                Example 2: Perform a RegionImageVP on a particular area of the screen</p>
<p>
                MainWindow SomeWindowObject VerifyImage StoredVP</p>
<p>
                (StoredVP found as:</p>
<p> 
                "65,100,200,250"   OR
                "Coords=65,100,200,250"</p>
<p>  
                in the SomeWindowObject section of the app map)</p>
<p>
                The named VP (StoredVP) is found to exist in the application map as a
                subitem in the SomeWindowObject section of the map.  This causes 
                the routine to attempt a RegionImageVP using the map's value of the StoredVP 
                item as the coordinates for the region to capture.  StoredVP is ALSO the 
                name of the VP which must already exist as an asset of the currently 
                running script.</p></detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ><LI>
<B>VPAsset</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                TextValue is the name of the pre-existing VP asset stored in the currently running script.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                TextValue is the name of the pre-existing VP asset stored in the currently running script.
                If the name also exists in the app map under the component then 
                a RegionImageVP will be attempted.
              </detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, WINDOW, WINDOW, VERIFYIMAGE, "AStoredVP"</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                This action performs a WindowVP CompareImage OR a RegionImageVP on the WINDOW object 
                against "AStoredVP".
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                The name of a stored VP which must exist as an asset of the currently running script.  
                Normally, a straight Robot CompareImage of the entire Window would be performed.
                However, if the AStoredVP value given exists in the Application Map as a reference
                under the provided Window object then a RegionImage test will be attempted instead.
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_VerifyMainMenu'></A>WindowFunctions::<BIG>VerifyMainMenu</BIG>   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Compares the active windows menu system with a benchmark
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                Retrieves the active windows menu system and outputs the full structure 
                with status to a file.  It then compares that file with the specified 
                benchmark file and sets pass/fail conditions for the test.
              </detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ><LI>
<B>BenchmarkFile</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                name.ext of benchmark file on repositiory's Datapool\Bench directory
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"/>
		  </LI>
<BR/><LI>[ <B>DescriptiveText</B> =  ]<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Optional expected descriptive text at start of file (first line of bench).
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                Optional expected descriptive text at start of file (first line of bench).
                (If bench has this descriptive text this field is REQUIRED to pass.)
              </detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/><LI>[ <B>TestFile</B> =  ]<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                optional name.ext to give current structure in repository's 
                Datapool\Test directory for compare with benchmark.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                optional name.ext to give current structure in repository's 
                Datapool\Test directory for compare with benchmark.
                If no name is given then the bench name is used.
              </detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/><LI>[ <B>DiffFile</B> =  ]<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Optional name.ext to store difference information
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                Optional name.ext to store difference information in repository's Datapool\Dif.
                If no name is given then the bench name is used.
              </detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, WINDOW, WINDOW, VERIFYMAINMENU, "BenchFile.ext"</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
               The WINDOW menu system is verified against "BenchFile.ext"
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
               The filename of the benchmark file to use in the comparison.
               Currently, this is expected to be in the Project's Datapool\Bench directory.   
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/><LI>
<B><usage xmlns="">T, WINDOW, AnObject, VERIFYMAINMENU, "BenchFile.ext", "Descriptive Text"</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                The WINDOW menu system is verified against "BenchFile.ext"
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                The case-sensitive descriptive text in the benchmark file preceding the menu structure. 
                If there is none, then this field should be missing, blank, or "".
                (If bench has this descriptive text this field is REQUIRED to pass.)
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/><LI>
<B><usage xmlns="">T, WINDOW, AnObject, VERIFYMAINMENU, "BenchFile.ext", "Descriptive Text", "TestFile.ext"</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                The WINDOW menu system is verified against "BenchFile.ext"
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                TestFile.ext to give the current menu structure output that is to be evaluated against the
                benchmark.  If this field is missing, blank, or "" then the provided BenchFile.ext will be used.
                This file is stored in the Project's Datapool\Test directory. 
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/><LI>
<B><usage xmlns="">T, WINDOW, AnObject, VERIFYMAINMENU, "BenchFile.ext", , "TestFile.ext", "DiffFile.ext"</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                The WINDOW menu system is verified against "BenchFile.ext"
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                "DiffFile.ext" to give the diff file created after the comparison is complete.
                If this field is missing, blank, or "" then the provided BenchFile.ext will be used.
                This file is stored in the Project's Datapool\Dif directory.
              </detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_VerifyMenuID'></A>WindowFunctions::<BIG>VerifyMenuID</BIG>   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Attempts to verify the state information of a particular menuitem
                identified by MenuID.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                Attempts to verify the state information of a particular menuitem
                identified by MenuID.  This is generally used when the menuitem is a 
                bitmap or other item that does not have text.
                This value can be retrieved from the the menu by index or by manual
                lookup from a menu structure output from MenuUtilities.
              </detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ><LI>
<B>MenuID</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                MenuID to identify which menuitem to test.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                MenuID to identify which menuitem to test.  This is generally used 
                when the menuitem is a bitmap or other item that does not have text.
                This value can be retrieved from the the menu by index or by manual
                lookup from a menu structure output from MenuUtilities.
              </detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/><LI>
<B>ExpectedStatus</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Expected status string (or part thereof) to verify. 
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                Expected status string (or part thereof) to verify.  
                Ex: "Enabled Checked" OR  "Disabled Grayed" etc.
                Each item separated by a space will be evaluated separately so 
                the order of the status items does not matter.  
                These status items ARE case-sensitive. 
              </detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, WINDOW, WINDOW, VERIFYMENUID, 37,"Enabled Checked"</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
               This action verifies that the menuid 37 is enabled checked
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><p>Field  5 : TQ String. the full case-sensitive menu item path to select. 
               Ampersands (&amp;) indicating/preceding underlined characters are optional.
               The text must include the full text including spaces and any visible shortcut
               key combinations displayed in the text of the menu item. </p>
<p>Field  6 : QS String.  The case-sensitive, space-delimited, double-quote enclosed
               status information needing verification.  Only the state information of interest
               needs to be specified.</p></detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_VerifyMenuItem'></A>WindowFunctions::<BIG>VerifyMenuItem</BIG>   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
               Attempts to verify the state information of a particular text string menuitem.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                Attempts to verify the state information of a particular text string 
                menuitem.  The menuitem should be specified in the form 
                "Menu-&gt;Menu-&gt;MenuItem   CTRL+V" with the full text (ampersands optional), 
                spaces(if any), and keyboard shortcut text (if any).  
                (The ampersands precede any character in the menuitem that is underlined.)
                <p>
                Note 1: This command differs from JavaMenuFunctions.VerifyMenuItemContains as this 
                command seeks a Window object that contains a Window's menu.
                </p>
<p>
                Note 2: For RobotJ engine, this command only supports JavaSwing. It may support other clients in the future.
              	</p></detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ><LI>
<B>MenuItemText</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to test.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to test.
                This menu hierarchy IS case-sensitive
              </detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/><LI>
<B>ExpectedStatus</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Expected status string (or part thereof) to verify. 
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                Expected status string (or part thereof) to verify.  
                Ex: "Enabled Checked"         OR  "Disabled Grayed"    etc.
                Each item separated by a space will be evaluated separately so 
                the order of the status items does not matter.  
                These status items ARE case-sensitive. 
              </detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, WINDOW, WINDOW, VERIFYMENUITEM, "File","Enabled Menu With 7 MenuItems"</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
               This action verifies that "File" is enabled and contains 7 menuitems.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><p>Field  5 : TQ String. the full case-sensitive menu item path to select.  
               Ampersands (&amp;) indicating/preceding underlined characters are optional.  
               The text must include the full text including spaces and any visible shortcut key 
               combinations displayed in the text of the menu item. </p>
<p>Field  6 : QS String.  The case-sensitive, space-delimited, double-quote enclosed
               status information needing verification.  Only the state information of interest
               needs to be specified.</p></detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_VerifyMenuItemContains'></A>WindowFunctions::<BIG>VerifyMenuItemContains</BIG>   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
               Attempts to verify the state information of a menuitem found by partial text match.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""> 
                Attempts to verify the state information of a menuitem found by partial text match.
                The menuitem should be specified in the form "Menu-&gt;Menu-&gt;MenuItem".  
                (Optional ampersands precede any character in the menuitem that is underlined.)
                <p>
                Note 1: This command differs from JavaMenuFunctions.VerifyMenuItemContains as this 
                command seeks a Window object that contains a Window's menu.
                </p>
<p>
                Note 2: For RobotJ engine, this command only supports JavaSwing. It may support other clients in the future.
              	</p></detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ><LI>
<B>MenuItemText</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to test.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to test.
                This menu hierarchy IS case-sensitive
              </detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/><LI>
<B>ExpectedStatus</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Expected status string (or part thereof) to verify. 
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                Expected status string (or part thereof) to verify.  
                Ex: "Enabled Checked"         OR  "Disabled Grayed"    etc.
                Each item separated by a space will be evaluated separately so 
                the order of the status items does not matter.  
                These status items ARE case-sensitive. 
              </detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, WINDOW, WINDOW, VERIFYMENUITEMCONTAINS, "File-&gt;Save","Enabled"</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
               This action verifies that menuitem "File/Save" is enabled.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><p>Field  5 : TQ String. the case-sensitive menu item path to select.  
               Ampersands (&amp;) indicating/preceding underlined characters are optional.  
               The text can be any substring of the full text including spaces and any visible shortcut key 
               combinations displayed in the text of the menu item. </p>
<p>Field  6 : QS String.  The case-sensitive, space-delimited, double-quote enclosed
               status information needing verification.  Only the state information of interest
               needs to be specified.</p></detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
<H3><A NAME='detail_VerifyOCRValue'></A>WindowFunctions::<BIG>VerifyOCRValue</BIG>   <TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
</H3>
	  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                 Performs an UNLOGGED WindowVP CompareImage OR a RegionImageVP on an 
                 object then attempts to retrieve and compare OCR text to the expected 
                 value provided.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><p>Performs an UNLOGGED WindowVP CompareImage OR a RegionImageVP on an 
                object then attempts to retrieve and compare OCR text to the expected 
                value provided.  
                The benchmark VP must already exist and be an asset of the currently 
                running script.</p>
<p>
                A RegionImageVP can be accomplished by having the name of the VP as an item 
                under the component in the application map.  The item's value must be 
                the coordinate values required by the RegionImageVP 
                (i.e. "Coords=65,100,200,250").</p>
<p>
                EXAMPLE 1 : Perform a WindowVP CompareImage before OCR Test</p>
<p>
                t, MainWindow, SomeWindowObject, VerifyOCRValue, StoredVP, 1, "Expected Text"</p>
<p>
                (no StoredVP item found in the app map under SomeWindowObject)</p>
<p>
                The named VP (StoredVP) must not exist in the application map if you 
                intend to compare the entire window.  The entire panel/object of 
                SomeWindowObject will be captured and compared against the StoredVP 
                baseline.  This VP must already exist as an asset of the
                currently running script.</p>
<p>
                EXAMPLE 2 : Perform a RegionImageVP before the OCR test</p>
<p>
                t, MainWindow, SomeWindowObject, VerifyOCRValue, StoredVP, DataField, "Expected Text"</p>
<p>
                StoredVP found in Application Map like below:</p>
<p>
                [SomeWindowObject]
                SomeWindowObject="Type=Something...."
                StoredVP="Coords=65,100,200,250"        --- invokes a RegionImageVP
                ....</p>
<p>
                When the named VP (StoredVP) is found to exist in the application map as a
                subitem in the SomeWindowObject section of the map then a RegionImageVP 
                will be invoked using the value of the StoredVP item as the coordinates 
                for the region to capture.</p>
<p>
                StoredVP is ALSO the name of the VP which must already exist as an asset 
                of the currently running script.</p>
<p>
                Once the unlogged VP has been completed, we attempt to retrieve the text
                of a predefined OCR region mask that should exist in the VP.  </p>
<p>
                We can use the OCRRegion value provided from the inputrecord to identify 
                the OCR mask number as needed by the SQAGetOcrRegionText function in Robot.  
                Example 1 above shows we are looking for OCR region #1.</p>
<p>
                The OCRRegion value in the inputrecord can also be a reference in the 
                Application Map in a section with the same name as the VP as shown below.</p>
<p>
                [SomeWindowObject]
                SomeWindowObject="Type=Something...."
                StoredVP="Coords=65,100,200,250"
                ....</p>
<p>
                [StoredVP]
                DataField=1
                AnotherField=2
                ....</p>
<p>
                Example 2 above shows that we have given region #1 a name of DataField.</p>
<p>          
                Once retrieved, the OCR text (if any) is compared against the expected 
                results provided.</p></detailed_desc><BR/>
		</DIV>
<BR/>
<DIV NAME="list" ID="other">
<B>Fields: [ ]</B>=<SMALL>Optional with Default Value</SMALL><BR/>
	  <OL start="5" ><LI>
<B>VPAsset</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
               VPTextValue is the name of the pre-existing VP asset stored in the currently running script.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                TextValue is the name of the pre-existing VP asset stored in the currently running script.
                If the name also exists in the app map under the component then 
                a RegionImageVP will be invoked instead of a CompareImageVP.
              </detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/><LI>
<B>OCRIntegerValue</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                IntegerValue is the numeric OCR region mask to get the text from.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns="">
                IntegerValue is the numeric OCR region mask to get the text from.  These values are defined
                in the VP itself and can be viewed in Robot's ImageComparator/Editor.
                A number can be used directly or a named reference can be used if
                it is found to exist in the Application Map in a section with the 
                same name as the VP.
              </detailed_desc><BR/>
		</DIV>
		  </LI>
<BR/><LI>
<B>ExpectedTextValue</B>
<BR/>
		  <DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                Text baseline to compare against the retrieved OCR text.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"/>
		  </LI>
<BR/></OL ><B>Examples:</B><BR/><UL>
<LI>
<B><usage xmlns="">T, LoginWindow, SomeWindowObject, VERIFYOCRVALUE, "AStoredVP", 1, "&lt;Expected Value&gt;"</usage></B>
<BR/><DIV NAME="list" ID="short_desc"><short_desc xmlns=""> 
                This action performs a WindowVP CompareImage OR a RegionImageVP on the
                window object then attempts to retrieve and compare OCR text to the expected 
                value provided.
              </short_desc></DIV>
<BR/>
	<DIV NAME="list" ID="detail_desc"><detailed_desc xmlns=""><p>The name of a stored VP which must exist as an asset of the currently running script.  
                Normally, a straight Robot CompareImage of the entire Window would be performed.
                However, if the AStoredVP value given exists in the Application Map as a reference 
                under the provided Window object then a RegionImage test will be attempted instead.</p>
<p>The Numeric OCR region Number of the particular OCR text you are trying to compare. 
                Valid values can be found when viewing the CompareImage or RegionImageVP baseline.
                A number can be used directly or a named reference can be used if it is found to exist
                in the Application Map in a Section with the same name as the VP.</p>
<p>The expected value of the text we wish to compare against the retrieved OCR text.</p></detailed_desc><BR/>
		</DIV>
</LI>
<BR/></UL>
<A href="SAFSReferenceKey.htm" alt="Reference Legend or Key">
<SMALL><B>[How To Read This Reference]</B></SMALL>
</A>
<HR/></DIV>
</DIV>
		</BODY>
</HTML>
	
<HTML xmlns="http://www.w3.org/TR/REC-html40">
<HEAD><TITLE>SAFS Dynamic Engine Reference
    	</TITLE>
<SCRIPT src="outline.js"></SCRIPT>
<SCRIPT>
            document.onreadystatechange = initOutline;
	    </SCRIPT>
</HEAD>
<BODY BGCOLOR="#FFFFFF" onclick="dynOutline()">
<P align="left"><BIG><BIG><BIG>SAFS Dynamic Engine Reference</BIG></BIG></BIG></P>
<SMALL>(updated 
	<script>
          document.write(document.lastModified)
	</script>
        )</SMALL>
<P align="left">The following reference material is in a format similar to an
	outline.  When you click on an item it will expand (or collapse) to show or
	hide the information available within that section.  Here you will find
	links to sample files, available commands for the engine and GUI components, and
	the syntax for these commands.  In general, an empty circle will
	signify the item does not expand (but it may contain a link to another document), 
	while a solid disk or square indicates the item does expand (or collapse).</P>
<UL dynamicoutline="dynamicoutline" initcollapsed="initcollapsed">
<LI><U>Background and Examples:</U>
<UL type="circle">
<LI><P align="left"><A href="../FRAMESDataDrivenTestAutomationFrameworks.htm" target="_blank">
	        Test Automation Frameworks Whitepaper</A> for information on various forms of test automation
	        and, specifically, the data-driven or keyword-driven form of SAFS test automation.</P></LI>
<LI><A href="CreateAppMap.htm" target="_blank">Creating an Application Map</A> 
	        for your application.</LI>
<LI><A href="SAFSRecordFormats.html" target="_blank">Official SAFS Test Table Record Formats</A>.</LI>
<LI><A href="NotepadMap.txt" target="_blank">Sample Application Map</A>
	        developed with a version of a <A href="ProcessContainer.htm" target="_blank">ProcessContainer</A>
	        tool.</LI>
<LI><A href="NotepadStepFile.txt" target="_blank">Sample Test Table for StepDriver</A></LI>
<LI><A href="DDNotepad.txt" target="_blank">Sample Script to Launch StepDriver.</A><BR/>
	        (Normally we would also develop Cycle and Suite tables and invoke CycleDriver instead of
	        the low level StepDriver.  But here we are simply trying to illustrate the Application
	        Map and its use.  CycleDriver and SuiteDriver do not generally access the Application
	        Map.)</LI>
</UL>
</LI>
</UL>
<A HREF="DDEngineSetup.htm" target="_blank">DDE Setup</A>, 
	<A HREF="DDEngineReference.htm" target="_blank">DDEngineReference</A>, 
	<A HREF="UsingDDVariables.htm" target="_blank">Using DDVariables</A>, 
	<A HREF="UsingFlowControl.htm" target="_blank">Error Recovery and Flow Control</A>, 
	<A HREF="UsingCustomExtensions.htm" target="_blank">Custom Extensions</A>
<HR/>
<P align="left">Reference:</P>
<UL dynamicoutline="dynamicoutline" initcollapsed="initcollapsed">
<LI><U>A few of notes on the general format of the reference below:</U>
<UL>
<LI><FONT color="#0000FF">When an item has multiple syntax examples,
		            usually only the last one can be expanded to see the field explanations.</FONT></LI>
<LI><FONT color="#0000FF">Although some examples shown might be wrapped
		            onto two or more lines here, the full syntax for these commands is
		            expected to be all on one line in the actual data/step file.</FONT></LI>
<LI><FONT color="#0000FF">The syntax examples often show a comma (,)
		            as a record field separator.  Data/Step files can actually use
		            almost any field separator desired.  The separator will be
		            specified to the drivers during the initialization of the DDE or when
		            the test table is passed to the driver.</FONT></LI>
<LI><FONT color="#0000FF">When a command keyword accepts parameters, 
	                OPTIONAL fields are shown enclosed in brackets []. However, in general, 
	                OPTIONAL fields must be provided (or left blank\empty) if subsequent fields 
	                are provided.</FONT></LI>
<LI type="disc"><U><FONT color="#0000FF">Field Types definitions:</FONT></U>
<UL>
<LI><FONT color="#800080">TQ String: Trimmed Quoted String: </FONT>
<UL>
<LI type="circle"><FONT color="#008000">A field that will be
			            trimmed of all leading and trailing whitespace.<BR/>
			            OPTIONALLY: Use double-quotes to retain leading and trailing
			            whitespace.<BR/>
			            The quotes will be removed before use.<BR/>
			            99.999% of all fields are of this type.</FONT></LI>
</UL>
</LI>
<LI><FONT color="#800080">QS String: Quoted String: </FONT>
<UL>
<LI type="circle"><FONT color="#008000">A field defined by a
			            leading double-quote and a trailing double-quote irregardless of
			            any separator currently in force.  To include a
			            double-quote within this string two double-quote characters must
			            exist with no intervening characters and neither of these can be
			            the outermost leading or trailing double-quote.<BR/>
			            The outermost quotes will not be returned as part of the string.<BR/>
			            Due to the nature of field parsing, this type of field generally
			            must be the last useful field in the input record if the
			            separator character exists anywhere within the field.<BR/>
			            The use of this field type is EXTREMELY rare!</FONT></LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
<UL dynamicoutline="dynamicoutline" initcollapsed="initcollapsed">
<A name="core_drivers"/>
<LI><U><STRONG>CORE DRIVERS:</STRONG></U>
<UL>
<LI type="disc">Common Record Types and DriverCommands for Cycles, Suites, and Steps
	      	        <UL>
<LI><FONT color="#0000FF">Skip RecordType   (RecordType = "S")</FONT>
<UL>
<LI><FONT color="#800080">S, "Skipping Security Test due to Defect
			            #XYZ", T, RunSecurityTests, ...</FONT>
<UL>
<LI type="circle"><FONT color="#008000">Field  2 : TQ String.  
				            Skip this record (usually a test record) but
			                    log the fact and the comment of why the record is being
			                    skipped.  This is better than simply commenting out a
			                    test record which might then be forgotten.<BR/>
			                    Normally, these two fields are added to the front of an
			                    existing record to temporarily skip the record.  Later,
			                    these two fields are easily deleted leaving the original
			                    record intact and executable.</FONT></LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#0000FF">Block RecordType (RecordType = "B")</FONT>
<UL>
<LI><FONT color="#800080">B, SomeBlockName</FONT>
<UL>
<LI type="circle"><FONT color="#008000">Field  2 : TQ String. 
				            Declares or defines a named reference point
			                    in this file.  This is used for naming or
			                    referencing the start of a block or section in the
			                    file and is the target point for the <A href="UsingFlowControl.htm" target="_blank">Flow Control/Error Recovery Driver Commands</A>.
			                    </FONT></LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#0000FF">BreakPoint RecordType (RecordType = "BP")</FONT>
<UL>
<LI type="circle"><FONT color="#800080">BP</FONT><BR/>
<FONT color="#008000">
				    Sets a breakpoint in the test table for when running the table
				    in Debug Mode.  Breakpoints can be set, but not ENABLED.  To use
				    breakpoints, the specific Driver or Engine must be running in its Debug Mode AND breakpoints
				    must be turned "ON" with the BREAKPOINTS Driver Command.</FONT></LI>
</UL>
</LI>
<LI><STRONG><FONT color="#0000FF">Driver Commands  (RecordType = "C", "CW", "CF" )</FONT></STRONG><BR/>
<SMALL>(C=Command; W=Warning Expected\Allowed; F=Failure Expected\Allowed)</SMALL>
<UL>
<LI type="disc"><FONT color="#0000A0">
<B>DDDriverCommands</B>
</FONT>
<UL>
<LI type="circle"><A HREF="DDDriverCommands.htm" target="_blank">
<FONT color="#000000">DDDriverCommands Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>AppMapChaining</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, AppMapChaining, OFF</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Mode</B><BR/><short_desc xmlns=""> 
                 Enable("ON") or Disable("OFF") this feature.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>AppMapResolve</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, AppMapResolve, OFF</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Mode</B><BR/><short_desc xmlns=""> 
                 Enable("ON") or Disable("OFF") this feature.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>AssignClipboardVariable</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, AssignClipboardVariable, "Clipboard" </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, AssignClipboardVariable, "^Clipboard" </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>VarName</B><BR/><short_desc xmlns=""> 
                 The variable to copy the clipboard text into.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The routine will strip off any leading "^" if it is provided.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CallRemote</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C CallRemote STAF LOCAL PING PING</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C CallRemote STAF ext-1 HANDLE QUERY myResult ALL</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Protocol</B><BR/><short_desc xmlns="">
              The name of the protocol to use. Presently only 'STAF' is supported.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>SystemName</B><BR/><short_desc xmlns="">
			  The name of the system to send the command to.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>ServiceName</B><BR/><short_desc xmlns="">
              The service name to be called on the external system / application.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Command</B><BR/><short_desc xmlns="">
              The service command to be issued to the external system / application.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>VarName</B><BR/><short_desc xmlns="">
                 The DDVariable root name to receive the results.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">Variable root name defaults to 'result' if not provided. 
                 <p>The variables varName.RC and varName.RESULT are defined on completion of the command.</p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>Parameters</B><BR/><short_desc xmlns="">
              Additional parameters to be passed to the service command.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CaptureMousePositionOnScreen</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                , F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, CaptureMousePositionOnScreen, xVar, yVar </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, CaptureMousePositionOnScreen, ^xVar="x1", ^yVar="y1" </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>X_VariableName</B><BR/><short_desc xmlns=""> 
                 The name of the DDVariable to store the X component of the mouse position.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>Y_VariableName</B><BR/><short_desc xmlns=""> 
                 The name of the DDVariable to store the Y component of the mouse position.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Capture the current position of the mouse on the screen.
		 The X component of the returned coordinate is saved into
		 the DDVariable given as the first parameter.
		 The Y component of the returned coordinate is saved into
		 the DDVariable given as the second parameter.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClearAllVariables</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, ClearAllVariables </FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClearAppMapCache</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, ClearAppMapCache</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClearArrayVariables</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, ClearArrayVariables, "TCAFS.UID." </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>ArrayName</B><BR/><short_desc xmlns=""> 
                 The variable name prefix to use for the delete.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClearClipboard</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, ClearClipboard </FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CloseApplication</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='WFSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W, F
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, CloseApplication, NotePad </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>ApplicationID</B><BR/><short_desc xmlns=""> 
                 The Application ID or reference provided to LaunchApplication
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              For IOS: The ApplicationID can be anything because it is ignored. 
              The IOS engine simply shuts down all running IOS Instruments applications.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CloseApplicationMap</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, CloseApplicationMap, NotePad.Map </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, CloseApplicationMap, "C:\SomeDir\NewApp.Map" </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>ApplicationMap</B><BR/><short_desc xmlns=""> 
                 The path and/or filename (ID) of the Application Map to close.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The path and/or filename (ID) of the Application Map to close.  This must be the same 
                 path or filename used when the App Map was opened.  The short filename 
                 without the path can be used if the file can be found via internal search algorithms.  
                 Typically, the AppMap is located in the project's Datapool directory.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CopyVariableValueEx</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C,  CopyVariableValueEx,  srcvar, destvar </FONT></LI>
<LI type="circle"><FONT color="#800080">C,  CopyVariableValueEx,  ^srcvarname, ^destvarname </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C,  CopyVariableValueEx,  ^basename &amp; ^index, destvar </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>SourceVariable</B><BR/><short_desc xmlns=""> 
                 The name of the variable to copy.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>DestinationVariable</B><BR/><short_desc xmlns=""> 
                 The name of the variable to receive the copy
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Delay</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, Delay, 300</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Timeout</B><BR/><short_desc xmlns=""> 
                 The number of milliseconds to delay.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DisableDomain</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, DisableDomain, "Win"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Domain</B><BR/><short_desc xmlns=""> 
                 The generic name of the domain to disable.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 The name might be engine-specific, but the domain names should 
                 attempt to conform to:
                 <ul>
                 <li>Java</li>
                 <li>Html</li>
                 <li>Net</li>
                 <li>Win</li>
                 </ul>
                 <p>Domain names should not be case-sensitive.</p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>EnableDomain</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, EnableDomain, "Java"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Domain</B><BR/><short_desc xmlns=""> 
                 The generic name of the domain to enable.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 The name might be engine-specific, but the domain names should 
                 attempt to conform to:
                 <ul>
                 <li>Java</li>
                 <li>Html</li>
                 <li>Net</li>
                 <li>Win</li>
                 </ul>
                 <p>Domain names should not be case-sensitive.</p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Expressions</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, Expressions, ON</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Mode</B><BR/><short_desc xmlns=""> 
                 The status for enhanced expression handling.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetAppMapValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C,  GetAppMapValue,  Classics.MAP,  MainWindow,  FileMenu,  menuRec</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C,  GetAppMapValue, , , FileMenu,  menuRec</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [3]:<B>AppMapID</B><BR/><short_desc xmlns="">
              The ID provided for the AppMap when OPENed.</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              If this parameter is left empty then the default or "current" App Map is used.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Section</B><BR/><short_desc xmlns="">
              The Section within the App Map to locate the entry.</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              If this parameter is left empty then the default App Map section is used.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>Item</B><BR/><short_desc xmlns="">
              The Item within the App Map to retrieve.</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              This parameter cannot be left empty.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>varName</B><BR/><short_desc xmlns="">
              The name of the variable to receive the value.</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              This parameter cannot be left empty.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetCompScreenResolution</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, GetCompScreenResolution, xres, yres</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>XWidthVariable</B><BR/><short_desc xmlns="">
              SAFSVARS name to be used to store x screen resolution</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>YHeightVariable</B><BR/><short_desc xmlns="">
              SAFSVARS name to be used to store y screen resolution</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetDeltaDate</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, GetDeltaDate, "25-Dec-2005", 1, "newdateresult"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, GetDeltaDate, "25-Dec-2005", "-1", "newdateresult"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>SourceDateString</B><BR/><short_desc xmlns="">
              String containing the date from which to calculate the delta date</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>DeltaDays</B><BR/><short_desc xmlns="">
              Positive or Negative number of days to calculate date from source date</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>ResultString</B><BR/><short_desc xmlns="">
              <p>Variable name to receive the newly formatted date.</p>
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetMillisBetweenRecords</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, GetMillisBetweenRecords, "millisBetweenRecords"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>VariableName</B><BR/><short_desc xmlns=""> 
                 The name of the variable to receive the pause between two records.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The name of the variable to receive the pause between two records.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetRegistryKeyValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, GetRegistryKeyValue, "HKLM\Software\Adobe\CommonFiles", "AdobeHome", "AdobeHomeVar"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Key</B><BR/><short_desc xmlns=""> 
                 The Registry Key name to seek.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>KeyValue</B><BR/><short_desc xmlns=""> 
                 The value name under the parent key to seek.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>VarName</B><BR/><short_desc xmlns=""> 
                 The name of the variable to receive the value of the registry key.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetSecsAfterWindowActive</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, GetSecsAfterWindowActive, "secondsAfterWindowActive"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>VariableName</B><BR/><short_desc xmlns=""> 
                 The name of the variable to receive the delay after window is activated.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The name of the variable to receive the delay after window is activated.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetSecsBeforeMouseDown</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, GetSecsBeforeMouseDown, "secondsBeforeMouseDown"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>VariableName</B><BR/><short_desc xmlns=""> 
                 The name of the variable to receive the delay before mouse down.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The name of the variable to receive the delay before mouse down.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetSecsBeforeMouseUp</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, GetSecsBeforeMouseUp, "secondsBeforeMouseUp"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>VariableName</B><BR/><short_desc xmlns=""> 
                 The name of the variable to receive the delay before mouse up.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The name of the variable to receive the delay before mouse up.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetSecsDelayRetryComponent</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, GetSecsDelayRetryComponent, "secondsDelayRetryComponent"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>VariableName</B><BR/><short_desc xmlns=""> 
                 The name of the variable to receive the delay of re-finding object.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The name of the variable to receive the delay of re-finding object.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetSecsSeekComponent</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, GetSecsSeekComponent, "secondsSeekComponent"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>VariableName</B><BR/><short_desc xmlns=""> 
                 The name of the variable to receive the timeout of finding object.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The name of the variable to receive the timeout of finding object.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetSystemDate</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, GetSystemDate, SystemDate</FONT></LI>
<LI type="circle"><FONT color="#800080">C, GetSystemDate, "SystemDate"</FONT></LI>
<LI type="circle"><FONT color="#800080">C, GetSystemDate, "^SystemDate"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
                 C, SetVariableValues, ^SystemDate="TodaysDate" <BR>
                 C, GetSystemDate, ^SystemDate
              </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>VariableName</B><BR/><short_desc xmlns=""> 
                 The name of the variable to receive the System Date.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The name of the variable to receive the System Date.
                 Note, if you supply the name of the variable and include the leading 
                 caret (^) symbol then the variable must be enclosed in quotes.
                 Otherwise, that variable will be used like any other variable and the 
                 substituted value of that variable will be interpretted as the name 
                 of the variable you wish to use.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetSystemDateTime</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, GetSystemDateTime, SystemDate</FONT></LI>
<LI type="circle"><FONT color="#800080">C, GetSystemDateTime, "SystemDate"</FONT></LI>
<LI type="circle"><FONT color="#800080">C, GetSystemDateTime, "^SystemDate"</FONT></LI>
<LI type="circle"><FONT color="#800080">
                 C, SetVariableValues, ^SystemDate="TodaysDate" 
                 C, GetSystemDateTime, ^SystemDate
              </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, GetSystemDateTime, SystemMilitaryDate, True</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>VariableName</B><BR/><short_desc xmlns=""> 
                 The name of the variable to receive the System DateTime.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The name of the variable to receive the System DateTime.
                 Note, if you supply the name of the variable and include the leading 
                 caret (^) symbol then the variable must be enclosed in quotes.
                 Otherwise, that variable will be used like any other variable and the 
                 substituted value of that variable will be interpretted as the name 
                 of the variable you wish to use.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>GetMilitaryTime</B><BR/><short_desc xmlns=""> 
                 If true, the converted time is in 24-hours military time format
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 If this is true, the converted time will be in 24-hours military time
                 format (0-23). If this parameter is omitted, it is false be default,
                 the converted time will be in AM-PM 12-hours format (1-12).
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetSystemTime</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, GetSystemTime, SystemTime</FONT></LI>
<LI type="circle"><FONT color="#800080">C, GetSystemTime, "SystemTime"</FONT></LI>
<LI type="circle"><FONT color="#800080">C, GetSystemTime, "^SystemTime"</FONT></LI>
<LI type="circle"><FONT color="#800080">
                 C, SetVariableValues, ^SystemTime="CurrentTime" 
                 C, GetSystemTime, ^SystemTime
              </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, GetSystemTime, SystemMilitaryTime, True</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>VariableName</B><BR/><short_desc xmlns=""> 
                 The name of the variable to receive the System Time.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The name of the variable to receive the System Time.
                 Note, if you supply the name of the variable and include the leading 
                 caret (^) symbol then the variable must be enclosed in quotes.
                 Otherwise, that variable will be used like any other variable and the 
                 substituted value of that variable will be interpretted as the name 
                 of the variable you wish to use.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>GetMilitaryTime</B><BR/><short_desc xmlns=""> 
                 If true, the converted time is in 24-hours military time format
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 If this is true, the converted time will be in 24-hours military time
                 format (0-23). If this parameter is omitted, it is false be default,
                 the converted time will be in AM-PM 12-hours format (1-12).
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetURL</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, GetURL, "http://rest.api.url", "response", "60"</FONT></LI>
<LI type="circle"><FONT color="#800080">C, GetURL, "http://rest.api.url?var1=value&amp;var2=value", "response"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, GetURL, "http://rest.api.url", "response", "", "Accept", "text/*", "Accept-Charset", "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>URL</B><BR/><short_desc xmlns="">The URL to request.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>Variable</B><BR/><short_desc xmlns="">The name of the variable holding the response sent back from the server.</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
		     Some suffixes can be appended to the variable name to form new variable holding other values, suffixes list as below:<br>
			 <ul>
		     <li>.readyState contains 'AJAX Ready State Code', such as "0", "1", "2", "3" and "4".</li>
			 <li>.headers contains the response headers</li>
			 <li>.status contains the HTTP status code, such as "200", "404" etc.</li>
			 <li>.statusText contains the HTTP status text, such as "OK", "Not Found" etc.</li>
			 <li>.xml contains the XML response if it exists.</li>
			 </ul>
		   </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>Timeout</B><BR/><short_desc xmlns="">The timeout (in seconds) waiting for the response from HTTP server. The default value is 120 seconds.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>HeaderName</B><BR/><short_desc xmlns="">The HTTP request header name.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>HeaderValue</B><BR/><short_desc xmlns="">The value to set for the HTTP request header.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetVersion</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C  Version  var</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Variable</B><BR/><short_desc xmlns="">
              A variable to accept the VERSION</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>HideSoftKeyboard</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, HideSoftKeyboard</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>HighLight</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, HighLight, ON</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, HighLight, OFF</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [3]:<B>Mode</B><BR/><short_desc xmlns=""> 
                 The status for highlight functionality. It can be On or Off. The Default is OFF.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>LaunchApplication</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='WFSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W, F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, LaunchApplication, NotePad, "notepad.exe c:\sample.txt" </FONT></LI>
<LI type="circle"><FONT color="#800080">C, LaunchApplication, NotePad, SampleFile </FONT></LI>
<LI type="circle"><FONT color="#800080">C, LaunchApplication, MainAUT, "c:\MyApp.EXE", , , MainAppMap.MAP </FONT></LI>
<LI type="circle"><FONT color="#800080">C, LaunchApplication, MainAUT, "c:\AppDir\MyApp.EXE", "c:\AppDir\", "-s -e -automation", MainAppMap.MAP </FONT></LI>
<LI type="circle"><FONT color="#800080">C, LaunchApplication, MyIOSApp, MyAppTemplate, TheWorkDir</FONT></LI>
<LI type="circle"><FONT color="#800080">C,LaunchApplication,MyIOSApp, "/Library/safs/samples/UICatalog/UICatalogInstruments.tracetemplate", "/Library/safs/samples/UICatalog/"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, LaunchApplication, MyIOSApp, MyAppTemplate, TheWorkDir, "-d:iPad2 (v5.0) -app:UICatalog"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>ApplicationID</B><BR/><short_desc xmlns=""> 
                 A text ID or name to reference the application
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 A text ID or name to reference the application.  Something to call it 
                 during possible future references in DDE tables or scripts.  This is 
                 different than a window ID.  It is what we want to call the App itself.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ExecutablePath</B><BR/><short_desc xmlns=""> 
                 The path, filename, and parameters for the executable OR an ApplicationConstant.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The path and filename to the executable OR an ApplicationConstant.<br>
                 This can and should include the full command line syntax with application 
                 specific command line parameters unless the application is unable to 
                 successfully handle this invocation.
                 <p>
                 This ExecutablePath parameter may instead contain a reference to an
                 ApplicationConstant from the currently active Application Map.  The value 
                 of the retrieved constant will be used as the ExecutablePath.</p>
                 <p>For IOS: This should resolve to the full path to the Instruments 
                 trace template that will be used to launch the application.</p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>WorkDir</B><BR/><short_desc xmlns=""> 
                 A Working Directory for the application (if required)
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 A Working Directory for the application (if required).
                 Do not provide this if it is not required by the application.
                 If you DO provide this then the DDE cannot automatically terminate 
                 the application if things go really bad.
                 <p>For IOS: This should resolve to be the path to the directory that will 
                 contain the Instruments output log.</p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>CMDLineParam</B><BR/><short_desc xmlns=""> 
                 Separate command line parameters for the application (if required).
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Command line parameters for the application (if required).
                 Do not provide this if it is not required by the application.
                 <p>For RRAFS: Try to include all command line parameters within the ExecutablePath<br>
                 If you DO provide separate command line paratmeters then the RRAFS DDE 
                 cannot automatically terminate the application if things go really bad.
                 </p><p>For IOS Device testing: the device and application must be specified <b>exactly</b> 
                 as they will appear in the Instruments "Choose Target" configuration menus. The parameters 
                 should be specified inline as:
                 </p><p>
                 <ul>
                 <li>-d [DeviceMenuItem] -app [AppNameMenuItem]</li>
                 </ul>
                 </p><p>Example: "-d Carls iPad (v5.0) -app UICatalog"
                 </p><p>For IOS Simulator testing: 
                 this parameter is not needed and should not contain any -d or -app options.
                 </p><p>For compatibility with different inputrecord separators, the SAFS/IOS engine supports 
                 different delimiters to be used with -d and -app. Supported Delimiters are (:;, ).
                 </p><p>Examples:
                 </p><p><ul>
                 <li>"-d:Carls iPad (v5.0) -app:UICatalog"</li>
                 <li>"-d;Carls iPad (v5.0) -app;UICatalog"</li>
                 <li>"-d,Carls iPad (v5.0) -app,UICatalog"</li>
                 <li>"-d Carls iPad (v5.0) -app UICatalog"</li>
                 </ul>
                 </p><p>
                 (Of course, you cannot use a comma delimiter here if the inputrecord itself is comma delimited.)
                 </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>AppMap</B><BR/><short_desc xmlns=""> 
                 Filename to the Application Map for the application.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Filename to the Application Map for the application.
                 You can provide a short filename (no path) if the map file can be found by
                 the FindSQAFile function.  Typically, the AppMap is placed in the 
                 project's Datapool directory.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>NotifyAndWait</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, NotifyAndWait, "Fix the app state and then press OK."</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, NotifyAndWait, "Fix the app state and then press OK.", "Fix Application"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Message</B><BR/><short_desc xmlns=""> 
                 The text message to be displayed in the dialog.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The text message to be displayed in the dialog.  The message should not contain the 
                 inputrecord field separator character nor linefeeds or carriage returns.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Title</B><BR/><short_desc xmlns=""> 
                 A short user-defined title for the dialog.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 A short user-defined title for the dialog. The message should not contain the 
                 inputrecord field separator character nor linefeeds or carriage returns.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Pause</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, Pause, 30</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Timeout</B><BR/><short_desc xmlns=""> 
                 The number of seconds to Pause.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SaveClipboardToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, SaveClipboardToFile, C:\Temp\myclipboard.txt </FONT></LI>
<LI type="circle"><FONT color="#800080">C, SaveClipboardToFile, Datapool\myclipboard.txt </FONT></LI>
<LI type="circle"><FONT color="#800080">C, SaveClipboardToFile, myclipboard.txt </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SaveClipboardToFile, C:\Temp\myclipboard.txt, "ANSI" </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>File</B><BR/><short_desc xmlns=""> 
                 The file to save the clipboard contents to.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The file to save the clipboard contents to.
                 This can be a full path, a relative path, or a file name.
                 For relative path, it is appended to the project's path to
                 build the full path of the file. For file name, the file
                 is saved under the project's Datapool\Test directory. In
                 any case the parent folder of the file must exist.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Encoding</B><BR/><short_desc xmlns=""> 
                 The encoding used to write a file.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The encoding used to write a file. If user doesn't specify this
                 parameter, the "UTF-8" encoding will be used.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SaveURLToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, SaveURLToFile, "http://rest.api.url", "reponse.txt", "60"</FONT></LI>
<LI type="circle"><FONT color="#800080">C, SaveURLToFile, "http://rest.api.url?var1=value&amp;var2=value", "result\reponse.txt"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SaveURLToFile, "http://rest.api.url", "c:\test\result\reponse.txt", "", "Accept", "text/*", "Accept-Charset", "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>URL</B><BR/><short_desc xmlns="">The URL to request.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>File</B><BR/><short_desc xmlns="">The name of the file holding the response sent back from the server.</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
		     The file to save the response from the server. This can be a full path, a relative path, or a file name.
			 For relative path, it is appended to the project's path to build the full path of the file. 
			 For file name, the file is saved under the project's test directory (it is Datapool\Test in SAFS or Acturals in SE+).
			 In any case the parent folder of the file must exist.
		   </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>Timeout</B><BR/><short_desc xmlns="">The timeout (in seconds) waiting for the response from HTTP server. The default value is 120 seconds.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>HeaderName</B><BR/><short_desc xmlns="">The HTTP request header name.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>HeaderValue</B><BR/><short_desc xmlns="">The value to set for the HTTP request header.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ScrollWheel</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, ScrollWheel, "10"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>numClicks</B><BR/><short_desc xmlns=""> 
                 The number of mouse wheel clicks to move.
.              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The number of mouse wheel clicks to move.A postive value indicates the wheel was moved forward (up) and a negative value indicates the wheel was moved backward (down).
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SendEmail</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, SendEmail, "TestSuite@company.com", "TestMonitor@company.com", "TestSuite Results Report" ,"PASSED"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SendEmail, "TestSuite@company.com", "TestMonitor@company.com;bob.cares@company.com", "TestSuite Screenshot" , "Screenshot Feature 2", "fullpath/To/Test/ScreenShotF2.jpg"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>From</B><BR/><short_desc xmlns="">Email address sending the Email.</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">Email address of the user or system sending the email.</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>To</B><BR/><short_desc xmlns="">Email addresses to receive the email.</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">Email addresses to receive the email. Multiple addresses can be specified with semicolon or comma separators--whichever is NOT the field separator for the record.</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>Subject</B><BR/><short_desc xmlns="">The Subject of the email.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Message</B><BR/><short_desc xmlns="">Text or HTML message.</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">Text or HTML message can be specified. HTML message requires HTML tag to work properly.  The message cannot contain the field separator for the record.</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Attachment</B><BR/><short_desc xmlns="">Email attachment file path</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">Email attachment file path. Multiple filepaths (files) can be specified with semicolons or comma separators--whichever is NOT the field separator for the record.</detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetApplicationMap</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, SetApplicationMap, NotePad.Map </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SetApplicationMap, "C:\SomeDir\NewApp.Map" </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>ApplicationMap</B><BR/><short_desc xmlns=""> 
                 The path and/or filename of the Application Map to use
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The path and/or filename of the Application Map to use.  The short filename 
                 without the path can be used if the file can be found via FindSQAFile.
                 Typically, the AppMap is located in the project's Datapool directory.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetBenchDirectory</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, SetBenchDirectory, "C:\MyRepo\MyProject\AltPath\Bench"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SetBenchDirectory, "AltPath\Bench"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Path</B><BR/><short_desc xmlns=""> 
                 The full or project relative path to the new directory.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetClipboard</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, SetClipboard, "This should go into the clipboard" </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Str</B><BR/><short_desc xmlns=""> 
                 The string to set the clipboard contents to.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The string to set the clipboard contents to.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetContext</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, SetContext, AWindow, AWindow </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SetContext, AWindow, AComponent </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>WindowID</B><BR/><short_desc xmlns=""> 
                 A Window reference from the AppMap
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ComponentID</B><BR/><short_desc xmlns=""> 
                 A reference from the AppMap for the Component within the Window.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 A reference from the AppMap for the Component within the Window.
                 If the Window is the item of interest then both the WindowID and 
                 ComponentID will be the same.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetDifDirectory</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, SetDifDirectory, "C:\MyRepo\MyProject\AltPath\Dif"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SetDifDirectory, "AltPath\Dif"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Path</B><BR/><short_desc xmlns=""> 
                 The full or project relative path to the new directory.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetFocus</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WFSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W, F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, SetFocus, AWindow, AWindow </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SetFocus, AWindow, AComponent </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>WindowID</B><BR/><short_desc xmlns=""> 
                 A Window reference from the AppMap
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ComponentID</B><BR/><short_desc xmlns=""> 
                 A reference from the AppMap for the Component within the Window to get input focus.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 A reference from the AppMap for the Component within the Window to get input focus.
                 If the Window is the item of interest then both the WindowID and 
                 ComponentID will be the same.
                 <p>
                 This only works on Windows or Components that have a valid Windows HANDLE 
                 (HWND) and can legally receive the focus at the time of the call.</p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetImageDebug</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, SetImageDebug, ON</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SetImageDebug, Nope</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Mode</B><BR/><short_desc xmlns=""> 
                 The boolean status for enabling extended image debugging. 
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 Valid case-insensitive values to enable are "TRUE", "ON", "YES", "1", and "-1". 
                 All other values will disable this mode.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetImageFuzzyMatching</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, SetImageFuzzyMatching, ON</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SetImageFuzzyMatching, OFF</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Mode</B><BR/><short_desc xmlns=""> 
                 The boolean status for enabling extended image-based fuzzy matching. 
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 Valid case-insensitive values to enable are "TRUE", "ON", "YES", "1", and "-1". 
                 All other values will disable this mode.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetMillisBetweenRecords</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, SetMillisBetweenRecords, 1000</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Value</B><BR/><short_desc xmlns=""> 
                 The value of the pause between two records.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The value of the pause between two records.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetMultipleThreadSearch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, SetProjectDirectory, "On" </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>OnOrOff</B><BR/><short_desc xmlns=""> 
                 Turn on or turn off multi-thread-search. This parameter should be given as "On" or "Off".
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetProjectDirectory</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, SetProjectDirectory, "C:\MyRepo\MyProject\AltPath"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Path</B><BR/><short_desc xmlns=""> 
                 The full path to the new directory.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetRootVerifyDirectory</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, SetRootVerifyDirectory, "C:\MyRepo\MyProject\AltPath"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SetRootDirectory, "AltPath"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Path</B><BR/><short_desc xmlns=""> 
                 The full or project relative path to the root directory for
                 Bench, Test, and Dif.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetSecsAfterWindowActive</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, SetSecsAfterWindowActive, 1</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Value</B><BR/><short_desc xmlns=""> 
                 The value of the delay after window is activated.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The value of the delay after window is activated.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetSecsBeforeMouseDown</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, SetSecsBeforeMouseDown, 0.1</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Value</B><BR/><short_desc xmlns=""> 
                 The value of the delay before mouse down.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The value of the delay before mouse down.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetSecsBeforeMouseUp</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, SetSecsBeforeMouseUp, 0.1</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Value</B><BR/><short_desc xmlns=""> 
                 The value of the delay before mouse up.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The value of the delay before mouse up.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetSecsDelayRetryComponent</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, SetSecsDelayRetryComponent, 1</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Value</B><BR/><short_desc xmlns=""> 
                 The value of the delay of re-finding object.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The value of the delay of re-finding object.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetSecsSeekComponent</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, SetSecsSeekComponent, 1</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>VariableName</B><BR/><short_desc xmlns=""> 
                 The value of the timeout of finding object.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The value of the timeout of finding object.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetTestDirectory</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, SetTestDirectory, "C:\MyRepo\MyProject\AltPath\Test"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SetTestDirectory, "AltPath\Test"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Path</B><BR/><short_desc xmlns=""> 
                 The full or project relative path to the new directory.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetVariableValueEx</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C,  SetVariableValueEx,  var, value </FONT></LI>
<LI type="circle"><FONT color="#800080">C,  SetVariableValueEx,  ^varname, value </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C,  SetVariableValueEx,  ^basename &amp; ^index, value </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>VariableName</B><BR/><short_desc xmlns=""> 
                 The name of the variable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>VariableValue</B><BR/><short_desc xmlns=""> 
                 The value to assign to the variable
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetVariableValues</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C,  SetVariableValues,  ^var1=value </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C,  SetVariableValues,  ^var1=value, ^var2=value2, ^var3=^var1  </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>VariableName</B><BR/><short_desc xmlns=""> 
                 The name of the variable along with its value assignment
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ShowSoftKeyboard</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, ShowSoftKeyboard</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>StartWebBrowser</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, StartWebBrowser </FONT></LI>
<LI type="circle"><FONT color="#800080">C, StartWebBrowser, "", WebBrowser</FONT></LI>
<LI type="circle"><FONT color="#800080">C, StartWebBrowser, "http://aUrl.jsp", WebBrowser</FONT></LI>
<LI type="circle"><FONT color="#800080">C, StartWebBrowser, "http://aUrl.jsp"</FONT></LI>
<LI type="circle"><FONT color="#800080">C, StartWebBrowser, "http://aUrl.jsp", "", "FirstTestPage", "firefox", 20</FONT></LI>
<LI type="circle"><FONT color="#800080">C, StartWebBrowser, "http://aUrl.jsp", "", "FirstTestPage", "firefox", 20, "", "KEY_PROXY_SETTING", "proxy-server:80"</FONT></LI>
<LI type="circle"><FONT color="#800080">C, StartWebBrowser, "http://www.google.com", "", "GoogleMain", "firefox", 20, "", "FirefoxProfile", "myprofile"</FONT></LI>
<LI type="circle"><FONT color="#800080">C, StartWebBrowser, "http://www.google.com", "", "GoogleMain", "chrome", 20, "", "user-data-dir", "c:\chrome_custom_data"</FONT></LI>
<LI type="circle"><FONT color="#800080">C, StartWebBrowser, "http://www.google.com", "", "GoogleMain", "chrome", 20, "", "user-data-dir", "C:\Users\xxx\AppData\Local\Google\Chrome\User Data"</FONT></LI>
<LI type="circle"><FONT color="#800080">C, StartWebBrowser, "http://www.google.com", "", "GoogleMain", "chrome", 20, "", "user-data-dir", "C:\Users\xxx\AppData\Local\Google\Chrome\User Data", "profile-directory", "Profile 1"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, StartWebBrowser, "http://www.google.com", "", "GoogleMain", "chrome", 20, "", "excludeSwitches", "disable-component-update; ignore-certificate-errors"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [3]:<B>URL</B><BR/><short_desc xmlns=""> 
                 URL of a web resource to load in the new browser instance.
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 This field can be empty which may produce different results in different browsers.  
                 When using the system default browser on Windows, this empty field will typically 
                 generate a blank web page, or an "about:blank" page.
                 <p>
                 Some browsers, like Internet Explorer, support other URLs like "about:home"--
                 which will launch the browser and display whatever the Home page is set to.  However, 
                 not all browsers support this.
                 </p><p>
                 For consistency, it is usually necessary to include the full URL syntax--including 
                 the protocol portion of the URL (http://, https://, ftp://, etc..).
                 </p>
           </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>WindowTag</B><BR/><short_desc xmlns=""> 
                 A WindowTag or Browser ID to call the new browser instance. </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 This Tag might be used by some test tools to track specific browser instances, 
                 but not all test tools are able to support this type of browser Tagging.<br>
		<B>SE2</B>The indentifier used to store the webdriver for the opened browser. It can be used to
		switch between opened browsers or close one of them.
		</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>BrowserName</B><BR/><short_desc xmlns=""> 
				<B>SE2</B>The browser to open. It can be "explorer", "chrome" or "firefox". "firefox" is default.
             </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>timeout</B><BR/><short_desc xmlns=""> 
				<B>SE2</B>Specifies the amount of time the selenium web driver should wait 
				when searching for an element if it is not immediately present.
             </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>IsRemoteBrowser</B><BR/><short_desc xmlns=""> 
		<B>SE2</B>True = use Selenium RemoteDriver.</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">True = use Selenium RemoteDriver.  Otherwise, use the FirefoxDriver, 
		ChromeDriver or InternetExplorerDriver.<br>
		This parameter is ignored now for SE2 as it always uses a RemoteDriver.
             </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>ExtraParamKey</B><BR/><short_desc xmlns=""> 
				<B>SE2</B>The extra parameter key. You can use one of 
				<a href="http://safsdev.sourceforge.net/doc/org/safs/selenium/webdriver/lib/SelectBrowser.html#getExtraParameterKeys()" target="reference" alt="Extra parameter keys">Extra parameter keys</a>.
             </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>ExtraParamValue</B><BR/><short_desc xmlns=""> 
				<B>SE2</B>The value of the extra parameter indicated by ExtraParamKey above.
             </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>StopWebBrowser</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, StopWebBrowser </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, StopWebBrowser, "FirstTestPage"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [3]:<B>BrowserID</B><BR/><short_desc xmlns=""> 
				The indentifier used to get the webdriver for the opened browser. This ID is assigned by user
             	during calling keyword StartWebBrowser.
             </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>TakeScreenShot</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, TakeScreenShot, "screenshot.png", Yes </FONT></LI>
<LI type="circle"><FONT color="#800080">C, TakeScreenShot, "d:\temp\image\screenshot.png", No </FONT></LI>
<LI type="circle"><FONT color="#800080">C, TakeScreenShot, "image\screenshot.png" </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, TakeScreenShot, "screenshotPart.png", , "0;0;50%;50%" </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>FileName</B><BR/><short_desc xmlns=""> 
                 The file to store the screeshot. (For Android Engine, the screenshot is device/emulator's)
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The file to store the screeshot. (For Android Engine, the screenshot is device/emulator's)
                 It can be a full path name;
                 If it is only a filename, the image will be stored to sub directory "test" of your project; 
                 If it is a filename including path-separator, it will be concatanated to the "datapool" of
                 your project to create a fullpath file.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Rotatable</B><BR/><short_desc xmlns=""> 
                 For other Engine, this parameter will be ignored.
                 For Android Engine, if the android application is rotatable, you set this parameter to True. The default is True.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 For other Engine, this parameter will be ignored.
                 For Android Engine, if the android application is rotatable, that is to say the application will adjust its direction
                 and keep upstraight when you rotate your device. If the android application is rotatable and this
                 parameter is set to False, the screenshot maybe upside down.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>SubArea</B><BR/><short_desc xmlns="">
             Optional sbuarea indicating partial image of the screen to capture.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             	  Optional sbuarea indicating partial image of the screen to capture.
	              The value must be in the format of a
	              top-left and bottom-right pair, and can be either absolute
	              coordinates or percentages ("x1,y1,x2,y2" or "x1%,y1%,x2%,y2%").
	              Coordinates are relative to the screen, i.e. (0,0) and
	              (0%,0%) are the minimum, and (SCREEN_WIDTH, SCREEN_HEIGHT)
	              and (100%,100%) are the maximum. Values exceeding the minimun/
	              maximum are forced to the nearest limiting value. Absolute and
	              percent values can be mixed, so "0,0,50%,50%" is valid. If this
	              parameter is omitted, full image of the screen is captured
	              (equivalent to "0,0,100%,100%").
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>UseAbbotFunctions</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, UseAbbotFunctions, ON</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Mode</B><BR/><short_desc xmlns=""> 
                 The switch status for enabling the preference of the engine.
                 Valid values are "ON" and "OFF".
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>UseDroidFunctions</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, UseDroidFunctions, ON</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Mode</B><BR/><short_desc xmlns=""> 
                 The switch status for enabling the use of the Droid hook.
                 Valid values are "ON" and "OFF".
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>UseIOSFunctions</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, UseIOSFunctions, ON</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Mode</B><BR/><short_desc xmlns=""> 
                 The switch status for enabling the preference of the engine.
                 Valid values are "ON" and "OFF".
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>UseQTPFunctions</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, UseQTPFunctions, ON</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Mode</B><BR/><short_desc xmlns=""> 
                 The switch status for enabling the preference of the engine.
                 Valid values are "ON" and "OFF".
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>UseRobotJFunctions</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, UseRobotJFunctions, ON</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Mode</B><BR/><short_desc xmlns=""> 
                 The switch status for enabling the use of the RobotJ hook.
                 Valid values are "ON" and "OFF".
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>UseSAFSFunctions</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, UseSAFSFunctions, ON</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Mode</B><BR/><short_desc xmlns=""> 
                 The switch status for enabling the use of the SAFS hook.
                 Valid values are "ON" and "OFF".
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>UseSeleniumFunctions</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, UseSeleniumFunctions, ON</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Mode</B><BR/><short_desc xmlns=""> 
                 The switch status for enabling the use of the Selenium hook.
                 Valid values are "ON" and "OFF".
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>UseTestCompleteFunctions</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, UseTestCompleteFunctions, ON</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Mode</B><BR/><short_desc xmlns=""> 
                 The switch status for enabling the preference of the engine.
                 Valid values are "ON" and "OFF".
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>UseWebBrowser</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, UseWebBrowser </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, UseWebBrowser, "FirstTestPage"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [3]:<B>BrowserID</B><BR/><short_desc xmlns=""> 
				The indentifier used to get the webdriver for the opened browser. This ID is assigned by user
             	during calling keyword StartWebBrowser.
             </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyClipboardToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, VerifyClipboardToFile, myclipboard.txt </FONT></LI>
<LI type="circle"><FONT color="#800080">C, VerifyClipboardToFile, C:\Temp\myclipboard.txt </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, VerifyClipboardToFile, C:\Temp\myclipboard.txt, "Ansi" </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BenchmarkFile</B><BR/><short_desc xmlns="">
             The name of the file used as the comparison benchmark.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             The name of the file used as the comparison benchmark.<br>
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Encoding</B><BR/><short_desc xmlns=""> 
                 The encoding used to read a file.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The encoding used to read a file. If user doesn't specify this
                 parameter, the "UTF-8" encoding will be used.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyURLContent</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, VerifyURLContent, "http://rest.api.url", "some expected response content", "60"</FONT></LI>
<LI type="circle"><FONT color="#800080">C, VerifyURLContent, "http://rest.api.url?var1=value&amp;var2=value", "some expected response content"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, VerifyURLContent, "http://rest.api.url", "some expected response content", "60", "Accept", "text/*", "Accept-Charset", "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>URL</B><BR/><short_desc xmlns="">The URL to request.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>BenchContent</B><BR/><short_desc xmlns="">The bench content to be compared with the response sent back from the server.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>Timeout</B><BR/><short_desc xmlns="">The timeout (in seconds) waiting for the response from HTTP server. The default value is 120 seconds.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>HeaderName</B><BR/><short_desc xmlns="">The HTTP request header name.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>HeaderValue</B><BR/><short_desc xmlns="">The value to set for the HTTP request header.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyURLToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, VerifyURLToFile, "http://rest.api.url", "reponse.txt"</FONT></LI>
<LI type="circle"><FONT color="#800080">C, VerifyURLToFile, "http://rest.api.url?var1=value&amp;var2=value", "compare\reponse.txt"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, VerifyURLToFile, "http://rest.api.url", "c:\test\compare\reponse.txt", "60", "Accept", "text/*", "Accept-Charset", "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>URL</B><BR/><short_desc xmlns="">The URL to request.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>BenchFile</B><BR/><short_desc xmlns="">The name of the bench file holding the content to be compared with the response sent back from the server.</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
		     The bench file can be a full path, a relative path, or a file name.
			 For relative path, it is appended to the project's path to build the full path of the file. 
			 For file name, the file is supposed under the project's bench directory (it is Datapool\Bench in SAFS or Benchmarks in SE+).
			 In any case the parent folder of the file must exist.
		   </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>Timeout</B><BR/><short_desc xmlns="">The timeout (in seconds) waiting for the response from HTTP server. The default value is 120 seconds.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>HeaderName</B><BR/><short_desc xmlns="">The HTTP request header name.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>HeaderValue</B><BR/><short_desc xmlns="">The value to set for the HTTP request header.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Version</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C  Version  1.0</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Version</B><BR/><short_desc xmlns="">
              The VERSION of the table format. Initially "1.0"</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>WaitForGUI</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='WFSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W, F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, WaitForGUI, AWindow, AWindow </FONT></LI>
<LI type="circle"><FONT color="#800080">C, WaitForGUI, AWindow, AWindow, 10 </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, WaitForGUI, AWindow, AComponent, 10 </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>WindowID</B><BR/><short_desc xmlns=""> 
                 A Window reference from the AppMap
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ComponentID</B><BR/><short_desc xmlns=""> 
                 A reference from the AppMap for the Component within the Window to wait for.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 A reference from the AppMap for the Component within the Window to wait for.
                 If the Window is the item of interest then both the WindowID and 
                 ComponentID will be the same.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>Timeout</B><BR/><short_desc xmlns=""> 
                 Timeout value in seconds before exiting automatically.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>WaitForGUIGone</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='WFSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W, F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, WaitForGUIGone, AWindow, AWindow </FONT></LI>
<LI type="circle"><FONT color="#800080">C, WaitForGUIGone, AWindow, AWindow, 10 </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, WaitForGUIGone, AWindow, AComponent, 10 </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>WindowID</B><BR/><short_desc xmlns=""> 
                 A Window reference from the AppMap
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ComponentID</B><BR/><short_desc xmlns=""> 
                 A reference from the AppMap for the Component within the Window to watch.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 A reference from the AppMap for the Component within the Window to watch.
                 If the Window is the item of interest then both the WindowID and 
                 ComponentID will be the same.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>Timeout</B><BR/><short_desc xmlns=""> 
                 Timeout value in seconds before exiting automatically.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>WaitForPropertyValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WFSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W, F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, WaitForPropertyValue, AWindow, AWindow, "Visible", "True" </FONT></LI>
<LI type="circle"><FONT color="#800080">C, WaitForPropertyValue, WebBrowser, BrowserDoc, "readyState", "Complete", 45 </FONT></LI>
<LI type="circle"><FONT color="#800080">C, WaitForPropertyValue, AWindow, AWindow, visible, "True", 5, "CASEINSENSITIVE"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, WaitForPropertyValue, AWindow, AWindow, visible, True, , "FALSE"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>WindowID</B><BR/><short_desc xmlns=""> 
                 A Window reference from the AppMap
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ComponentID</B><BR/><short_desc xmlns=""> 
                 A reference from the AppMap for the Component within the Window.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 A reference from the AppMap for the Component within the Window.
                 If the Window is the item of interest then both the WindowID and 
                 ComponentID will be the same.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>PropertyName</B><BR/><short_desc xmlns=""> 
                 Case-sensitive name of the object property to watch.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ExpectedValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive value of the object property to match.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Timeout</B><BR/><short_desc xmlns=""> 
                 Timeout value in seconds before exiting automatically.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>CaseInsensitive</B><BR/><short_desc xmlns="">
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the property value and the expected value to ignore case.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              All engines may not support this parameter at this time.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>WaitForPropertyValueGone</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WFSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W, F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, WaitForPropertyValueGone, AWindow, AWindow, "Visible", "False" </FONT></LI>
<LI type="circle"><FONT color="#800080">C, WaitForPropertyValueGone, WebBrowser, BrowserDoc, "readyState", "Loading", 45 </FONT></LI>
<LI type="circle"><FONT color="#800080">C, WaitForPropertyValueGone, AWindow, AWindow, visible, "True", 5, "CASEINSENSITIVE"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, WaitForPropertyValueGone, AWindow, AWindow, visible, True, , "FALSE"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>WindowID</B><BR/><short_desc xmlns=""> 
                 A Window reference from the AppMap
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ComponentID</B><BR/><short_desc xmlns=""> 
                 A reference from the AppMap for the Component within the Window.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 A reference from the AppMap for the Component within the Window.
                 If the Window is the item of interest then both the WindowID and 
                 ComponentID will be the same.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>PropertyName</B><BR/><short_desc xmlns=""> 
                 Case-sensitive name of the object property to watch.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ExpectedValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive known value of the property to change to something else.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Timeout</B><BR/><short_desc xmlns=""> 
                 Timeout value in seconds before exiting automatically.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>CaseInsensitive</B><BR/><short_desc xmlns="">
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the property value and the expected value to ignore case.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              All engines may not support this parameter at this time.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>WaitForRegistryKeyExists</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, WaitForRegistryKeyExists, "HKLM\Software\Rational Software\Rational Test\8", "Install Directory", 5</FONT></LI>
<LI type="circle"><FONT color="#800080">C, WaitForRegistryKeyExists, "HKLM\Software\Rational Software\Rational Test\8", "", 0</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, WaitForRegistryKeyExists, "HKLM\Software\Rational Software\Rational Test\8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Key</B><BR/><short_desc xmlns=""> 
                 The Registry Key name to seek.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>KeyValue</B><BR/><short_desc xmlns=""> 
                 The value name under the parent key to seek.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 The value name under the parent key.  If not provided then we just 
                 check to see if the provided parent key exists.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>Timeout</B><BR/><short_desc xmlns=""> 
                 Timeout value in seconds before exiting automatically.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>WaitForRegistryKeyValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, WaitForRegistryKeyValue, "HKLM\Software\Adobe\CommonFiles", "UsageCount", "0x1"</FONT></LI>
<LI type="circle"><FONT color="#800080">C, WaitForRegistryKeyValue, "HKLM\Software\Adobe\CommonFiles", "UsageCount", "0x1", 45</FONT></LI>
<LI type="circle"><FONT color="#800080">C, WaitForRegistryKeyValue, "HKLM\Software\Adobe\CommonFiles", "UsageCount", "0X1", 5, CASEINSENSITIVE</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, WaitForRegistryKeyValue, "HKLM\Software\Adobe\CommonFiles", "UsageCount", "0X1", "", FALSE</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Key</B><BR/><short_desc xmlns=""> 
                 The Registry Key name to seek
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>KeyValue</B><BR/><short_desc xmlns=""> 
                 The value name under the parent key to seek.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 The value name under the parent key.  If not provided then we just 
                 check to see if the provided parent key exists.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>ExpectedValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive value to match with the key value.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Timeout</B><BR/><short_desc xmlns=""> 
                 Timeout value in seconds before exiting automatically.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>CaseInsensitive</B><BR/><short_desc xmlns="">
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the key value and the expected value to ignore case.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              All engines may not support this parameter at this time.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>WaitForWebPage</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WFSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W, F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, WaitForWebPage </FONT></LI>
<LI type="circle"><FONT color="#800080">C, WaitForWebPage, "", "", 60</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, WaitForWebPage, MainWebApp, TOCFrameDoc, 20</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [3]:<B>WindowID</B><BR/><short_desc xmlns=""> 
                 A Window reference from the AppMap
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 If ComponentID is provided then providing WindowID is REQUIRED.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>ComponentID</B><BR/><short_desc xmlns=""> 
                 A reference from the AppMap for the Frame/HTMLDocument within WindowID to wait for.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 If this parameter is provided then providing WindowID is REQUIRED.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>Timeout</B><BR/><short_desc xmlns=""> 
                 Timeout value in seconds before exiting automatically.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>DDDriverCounterCommands</B>
</FONT>
<UL>
<LI type="circle"><A HREF="DDDriverCounterCommands.htm" target="_blank">
<FONT color="#000000">DDDriverCounterCommands Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>DeleteCounter</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, DeleteCounter, "TestCase 124", "All done"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>counterID</B><BR/><short_desc xmlns=""> 
                 The unique name used to identify this private counter.  
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 These unique names are case-insensitive.  
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Description</B><BR/><short_desc xmlns="">
              Any additional information for deleting this counter.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>LogCounterInfo</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, LogCounterInfo, "TestCase 124"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>counterID</B><BR/><short_desc xmlns=""> 
                 The unique name used to identify this private counter.  
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 These unique names are case-insensitive.  
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>logName</B><BR/><short_desc xmlns=""> 
                 (Future) The name of a Log Facility other than the "current" one.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 When suppport for named Log Facilities is provided you will be able 
                 to specify which of these you wish to receive the Status Report.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ResetCounter</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, ResetCounter, "TestCase 124", "Zero all counts to retest"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>counterID</B><BR/><short_desc xmlns=""> 
                 The unique name used to identify this private counter.  
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 These unique names are case-insensitive.  
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Description</B><BR/><short_desc xmlns="">
              Any additional information for resetting this counter.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ResumeStatusCounts</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, ResumeStatusCounts, "Done resetting the application"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [3]:<B>Description</B><BR/><short_desc xmlns="">
              Any additional information for resuming status counts.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>logName</B><BR/><short_desc xmlns=""> 
                 (Future) The name of a Log Facility other than the "current" one.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 When suppport for named Log Facilities is provided you will be able 
                 to specify which of these you wish to receive the notice.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetCounterMode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, SetCounterMode, "TestCase 124", "StepTestsOnly"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SetCounterMode, "TestCase 124", "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>counterID</B><BR/><short_desc xmlns=""> 
                 The unique name used to identify this private counter.  
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 These unique names are case-insensitive.  
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>mode</B><BR/><short_desc xmlns=""> 
                 The counting mode to use for the specified counter.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 Currently supported modes are:
                 <ul>
                 <li>"AllStatusInfo" or "1"</li>
                 <li>"StepTestsOnly" or "2"</li>
                 </ul>
                 Consult <a href="ApplicationUtilities.htm#ausetstatuscountermode" target="_blank">AUSetStatusCounterMode</a> 
                 for more information on private counters.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>StartCounter</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, StartCounter, "TestCase 124", "Verify we can login."</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>counterID</B><BR/><short_desc xmlns=""> 
                 The unique name used to identify this private counter.  
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 These unique names are case-insensitive.  
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Description</B><BR/><short_desc xmlns="">
              Any additional information such as the purpose of the counter.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>StartCycle</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C  StartCycle  Option1</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C  StartCycle  Option1  "Integration Testing"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>CycleID</B><BR/><short_desc xmlns="">
              The user-defined ID of the item.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Description</B><BR/><short_desc xmlns="">
              A description of the item.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>StartProcedure</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C  StartProcedure  Option1</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C  StartProcedure  Option1  "Entering New Users"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>ProcedureID</B><BR/><short_desc xmlns="">
              The user-defined ID of the item.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Description</B><BR/><short_desc xmlns="">
              A description of the item.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>StartRequirement</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C  StartRequirement  Option1</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C  StartRequirement  Option1  "It Must Compile"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>RequirementID</B><BR/><short_desc xmlns="">
              The user-defined ID of the item.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Description</B><BR/><short_desc xmlns="">
              A description of the item.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>StartSuite</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C  StartSuite  Option1</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C  StartSuite  Option1  "Data Testing"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>SuiteID</B><BR/><short_desc xmlns="">
              The user-defined ID of the item.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Description</B><BR/><short_desc xmlns="">
              A description of the item.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>StartTestcase</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C  StartTestcase  Option1</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C  StartTestcase  Option1  "It Must Compile"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>TestCaseID</B><BR/><short_desc xmlns="">
              The user-defined ID of the Testcase.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Description</B><BR/><short_desc xmlns="">
              A description of the Testcase</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>StopCounter</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, StopCounter, "TestCase 124", "Done testing Login"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>counterID</B><BR/><short_desc xmlns=""> 
                 The unique name used to identify this private counter.  
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 These unique names are case-insensitive.  
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Description</B><BR/><short_desc xmlns="">
              Any additional information for stopping this counter.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>StopCycle</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C  StopCycle  Option1</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C  StopCycle  Option1  "Integration Testing"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>CycleID</B><BR/><short_desc xmlns="">
              The user-defined ID of the item.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Description</B><BR/><short_desc xmlns="">
              A description of the item.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>StopProcedure</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C  StopProcedure  Option1</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C  StopProcedure  Option1  "Entering New Users"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>ProcedureID</B><BR/><short_desc xmlns="">
              The user-defined ID of the item.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Description</B><BR/><short_desc xmlns="">
              A description of the item.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>StopRequirement</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C  StopRequirement  Option1</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C  StopRequirement  Option1  "It Must Compile"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>RequirementID</B><BR/><short_desc xmlns="">
              The user-defined ID of the item.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Description</B><BR/><short_desc xmlns="">
              A description of the item.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>StopSuite</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C  StopSuite  Option1</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C  StopSuite  Option1  "Data Tests"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>SuiteID</B><BR/><short_desc xmlns="">
              The user-defined ID of the item.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Description</B><BR/><short_desc xmlns="">
              A description of the item.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>StopTestcase</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C  StopTestcase  Option1</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C  StopTestcase  Option1  "It Must Compile"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>TestCaseID</B><BR/><short_desc xmlns="">
              The user-defined ID of the Testcase.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Description</B><BR/><short_desc xmlns="">
              A description of the Testcase</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>StoreCounterInfo</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, StoreCounterInfo, ^counter="TestCase 124", ^varPrefix="TestCase124"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>counterID</B><BR/><short_desc xmlns=""> 
                 The unique name used to identify the private counter.  
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 These unique names are case-insensitive.  
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>varPrefix</B><BR/><short_desc xmlns=""> 
                 The unique DDVariable prefix to use for storing counter values.  
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 The DDVariable prefix will be used to create several DDVariables 
                 that will hold the counter information.
                 <ul>The variables stored:<br>
                 <li>VARPREFIX.successes</li>
                 <li>VARPREFIX.warnings</li>
                 <li>VARPREFIX.general_failures</li>
                 <li>VARPREFIX.test_passes</li>
                 <li>VARPREFIX.test_warnings</li>
                 <li>VARPREFIX.test_failures</li>
                 <li>VARPREFIX.test_records</li>
                 <li>VARPREFIX.total_records</li>
                 <li>VARPREFIX.IO_failures</li>
                 <li>VARPREFIX.skipped_records</li>
                 <li>VARPREFIX.filename</li>
                 <li>VARPREFIX.id</li>
                 <li>VARPREFIX.mode</li>
                 <li>VARPREFIX.suspended</li>
                 </ul>
                 <p>Consult <a href="ApplicationUtilities.htm#auvariablestorestatusinfo" target="_blank">ApplicationUtilities</a> 
                 and <a href="UsingDDVariables.htm" target="_blank">Using DDVariables</a> 
                 for more information on referencing these DDVariables in your tests.</p>
                 You must adhere to DDVariable naming conventions when providing this 
                 DDVariable basename.  Note that no spaces are allowed in DDVariable names.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SuspendStatusCounts</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, SuspendStatusCounts, "Resetting the application"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [3]:<B>Description</B><BR/><short_desc xmlns="">
              Any additional information for suspending status counts.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>logName</B><BR/><short_desc xmlns=""> 
                 (Future) The name of a Log Facility other than the "current" one.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 When suppport for named Log Facilities is provided you will be able 
                 to specify which of these you wish to receive the notice.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>DDDriverDatabaseCommands</B>
</FONT>
<UL>
<LI type="circle"><A HREF="DDDriverDatabaseCommands.htm" target="_blank">
<FONT color="#000000">DDDriverDatabaseCommands Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>CopyDBTableColumnToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, CopyDBTableColumnToFile, ADBAlias, ATableAlias, DataSourceName, OutputFileName, SQLQuery, OutputDirectory, sqlStatus, "|"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>ADBAlias</B><BR/><short_desc xmlns=""> 
                 not used
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ATableAlias</B><BR/><short_desc xmlns=""> 
                 not used
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>FileOut</B><BR/><short_desc xmlns=""> 
                 Name of the output file. 
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>SQLQuery</B><BR/><short_desc xmlns=""> 
                 The file will contain the results of the executed Query. The query is NOT validated 
                 by this function.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>DirectoryOut</B><BR/><short_desc xmlns=""> 
                 OPTIONAL parameter. If not specified the file will be stored in the default 
                 test directory
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>SQLStatus</B><BR/><short_desc xmlns=""> 
                 A variable which holds the current SQL run status.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>Delimiter</B><BR/><short_desc xmlns=""> 
                 Optional Delimiter to be used between columns written to file.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [11]:<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [12]:<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CopyDBTableToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, CopyDBTableToFile, ADBAlias, ATableAlias, Data Source Name (dsn), OutputFileName, tableName, [ColumnCount],[rowCount], [SQLQuery], [Delimiter], [OutputDirectory], sqlStatus, "[UID]", "[PWD]"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>ADBAlias</B><BR/><short_desc xmlns=""> 
                 not used
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ATableAlias</B><BR/><short_desc xmlns=""> 
                 not used
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>FileOut</B><BR/><short_desc xmlns=""> 
                 Name of the output file. 
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>DBTableName</B><BR/><short_desc xmlns=""> 
                 Name of the TABLE to access within the DBSourceName
           </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>ColumnCount</B><BR/><short_desc xmlns=""> 
                 If specified the output file will contain only the number of columns specified.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> <p>
                 OPTIONAL parameter. If specified the output file will contain only the
                 number of columns specified. This number will become the first dimension
                 of the retreival array. If NOT specified then no maximum.
              </p></detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>RowCount</B><BR/><short_desc xmlns=""> 
                 If specified the output file will contain only the number of rows specified. 
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> <p>
                 OPTIONAL parameter. If specified the output file will contain only the
                 number of columns specified. This number will become the first dimension
                 of the retreival array. If NOT specified then no maximum.
              </p></detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>SQLQuery</B><BR/><short_desc xmlns=""> 
                 OPTIONAL parameter. If specified, the file will contain the results of the
                 executed Query. The query is NOT validated by this
                 function. If this is provided, the the DBTableName
                 must be ""
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [11]:<B>delimiter</B><BR/><short_desc xmlns=""> 
                 OPTIONAL parameter. If not specified the default ',' seperator will be used.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [12]:<B>DirectoryOut</B><BR/><short_desc xmlns=""> 
                 OPTIONAL parameter. If not specified the file will be stored in the default 
                 test directory
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [13]:<B>SQLStatus</B><BR/><short_desc xmlns=""> 
                 A variable which holds the current SQL run status.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [14]:<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [15]:<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DeleteDBTableRecords</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, DeleteDBTableRecords, ADBAlias, ATableAlias, Clients, "CID = 25", ContactDatabase, "", "", sqlStatusVar</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>ADBAlias</B><BR/><short_desc xmlns=""> 
                 not used
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ATableAlias</B><BR/><short_desc xmlns=""> 
                 not used
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>DBTableName</B><BR/><short_desc xmlns=""> 
                 Name of the TABLE to access within the DBSourceName</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>DBQueryCond</B><BR/><short_desc xmlns=""> 
                 Expression allowed by the WHERE clause of the DELETE FROM sentence of the SQL driver
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 A query condition can be included, if not then "" is supplied. It can be any 
                 valid expression allowed by the WHERE clause of the DELETE FROM sentence of the SQL driver
                 you are using. For example: "CliBal &gt; 100000 and CliCat = 'C'".<br>
                 "where" will be added to any expression if it is not provided.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>SQLStatus</B><BR/><short_desc xmlns=""> 
                 SQL status code as a result of executing the query gets stored in this variable
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ExecSQLQuery</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, ExecSQLQuery, ADBAlias, ATableAlias, empODBC, "UPDATE Employee Set City = 'Pittsburgh' Where EmpID = '0023' ", sqlStatus</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>ADBAlias</B><BR/><short_desc xmlns=""> 
                 not used
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ATableAlias</B><BR/><short_desc xmlns=""> 
                 not used
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>queryStr</B><BR/><short_desc xmlns=""> 
                 Actual query stored in a queryStr.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>SQLStatusCode</B><BR/><short_desc xmlns=""> 
                 SQL status code as a result of executing the query.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetDBTableColumnCount</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, GetDBTableColumnCount, ADBAlias, ATableAlias, empODBC, Employee, columnCount, sqlStatus</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>ADBAlias</B><BR/><short_desc xmlns=""> 
                 not used
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ATableAlias</B><BR/><short_desc xmlns=""> 
                 not used
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>DBTableName</B><BR/><short_desc xmlns=""> 
                 Name of the TABLE to access within the DBSourceName
           </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ColumnCount</B><BR/><short_desc xmlns=""> 
                 SQL result get stored in this return variable.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>SQLStatusCode</B><BR/><short_desc xmlns=""> 
                 SQL status code as a result of executing the query.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetDBTableRowCount</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, GetDBTableRowCount, ADBAlias, ATableAlias, empODBC, Employee, rowCount, sqlStatus</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>ADBAlias</B><BR/><short_desc xmlns=""> 
                 not used
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ATableAlias</B><BR/><short_desc xmlns=""> 
                 not used
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>DBTableName</B><BR/><short_desc xmlns=""> 
                 Name of the TABLE to access within the DBSourceName
           </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>RowCount</B><BR/><short_desc xmlns=""> 
                 SQL result get stored in this return variable.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>SQLStatusCode</B><BR/><short_desc xmlns=""> 
                 SQL status code as a result of executing the query.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetDBValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, GetDBValue, ADBAlias, ATableAlias, empODBC, "Select LastName From Employee Where EmpID = '0023'", queryResult, sqlStatus</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>ADBAlias</B><BR/><short_desc xmlns=""> 
                 not used
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ATableAlias</B><BR/><short_desc xmlns=""> 
                 not used
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>queryStr</B><BR/><short_desc xmlns="">
                 Actual query stored in a queryStr.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>QueryResult</B><BR/><short_desc xmlns=""> 
                 SQL result get stored in this return variable.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>SQLStatusCode</B><BR/><short_desc xmlns=""> 
                 SQL status code as a result of executing the query.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetJdbcDriver</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, SetJdbcDriver, "oracle.jdbc.driver.OracleDriver"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>DriverClassName</B><BR/><short_desc xmlns=""> 
                 Name of the driver class
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyDatabaseNullValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, VerifyDatabaseNullValue, ADBAlias, ATableAlias, LASTNAME, Clients, "CID = 25", ContactDatabase, "", "", sqlStatusVariable</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>ADBAlias</B><BR/><short_desc xmlns=""> 
                 not used
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ATableAlias</B><BR/><short_desc xmlns=""> 
                 not used
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>DBFieldName</B><BR/><short_desc xmlns=""> 
                 Name of the FIELD within DBTableName used in the verification
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>DBTableName</B><BR/><short_desc xmlns=""> 
                 Name of the TABLE to access within the DBSourceName</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>DBQueryCond</B><BR/><short_desc xmlns=""> 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 A query condition can be included, if not then ""
                 must be supplied. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal &gt; 100000 and CliCat = 'C'".<br>
                 "where" will be added to any expression if it is not provided.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [11]:<B>SQLStatus</B><BR/><short_desc xmlns=""> 
                 SQL status code as a result of executing the query gets stored in this variable
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyDatabaseValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, VerifyDBValue, ADBAlias, ATableAlias, LASTNAME, Clients, "CID = 25", ContactDatabase, "", "", "Smith", sqlStatusVariable</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>ADBAlias</B><BR/><short_desc xmlns=""> 
                 not used
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ATableAlias</B><BR/><short_desc xmlns=""> 
                 not used
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>DBFieldName</B><BR/><short_desc xmlns=""> 
                 Name of the FIELD within DBTableName used in the verification
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>DBTableName</B><BR/><short_desc xmlns=""> 
                 Name of the TABLE to access within the DBSourceName</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>DBQueryCond</B><BR/><short_desc xmlns=""> 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 A query condition can be included, if not then ""
                 must be supplied. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal &gt; 100000 and CliCat = 'C'".<br>
                 "where" will be added to any expression if it is not provided.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    9 :<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required, if
                 not then "" must be supplied).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    10 :<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required, if
                 not then "" must be supplied).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    11 :<B>ExpectedValue</B><BR/><short_desc xmlns=""> 
                 Benchmark value to compare against retrieved DBFieldName value
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [12]:<B>SQLStatus</B><BR/><short_desc xmlns=""> 
                 SQL status code as a result of executing the query gets stored in this variable
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyDBNullValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, VerifyDBNullValue, ADBAlias, ATableAlias, LASTNAME, Clients, "CID = 25", ContactDatabase, "", "", sqlStatusVariable</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>ADBAlias</B><BR/><short_desc xmlns=""> 
                 not used
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ATableAlias</B><BR/><short_desc xmlns=""> 
                 not used
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>DBFieldName</B><BR/><short_desc xmlns=""> 
                 Name of the FIELD within DBTableName used in the verification
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>DBTableName</B><BR/><short_desc xmlns=""> 
                 Name of the TABLE to access within the DBSourceName</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>DBQueryCond</B><BR/><short_desc xmlns=""> 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 A query condition can be included, if not then ""
                 must be supplied. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal &gt; 100000 and CliCat = 'C'".<br>
                 "where" will be added to any expression if it is not provided.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [11]:<B>SQLStatus</B><BR/><short_desc xmlns=""> 
                 SQL status code as a result of executing the query gets stored in this variable
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyDBValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, VerifyDBValue, ADBAlias, ATableAlias, LASTNAME, Clients, "CID = 25", ContactDatabase, "", "", "Smith", sqlStatusVariable</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>ADBAlias</B><BR/><short_desc xmlns=""> 
                 not used
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ATableAlias</B><BR/><short_desc xmlns=""> 
                 not used
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>DBFieldName</B><BR/><short_desc xmlns=""> 
                 Name of the FIELD within DBTableName used in the verification
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>DBTableName</B><BR/><short_desc xmlns=""> 
                 Name of the TABLE to access within the DBSourceName</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>DBQueryCond</B><BR/><short_desc xmlns=""> 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 A query condition can be included, if not then ""
                 must be supplied. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal &gt; 100000 and CliCat = 'C'".<br>
                 "where" will be added to any expression if it is not provided.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    9 :<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required, if
                 not then "" must be supplied).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    10 :<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required, if
                 not then "" must be supplied).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    11 :<B>ExpectedValue</B><BR/><short_desc xmlns=""> 
                 Benchmark value to compare against retrieved DBFieldName value
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [12]:<B>SQLStatus</B><BR/><short_desc xmlns=""> 
                 SQL status code as a result of executing the query gets stored in this variable
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>DDDriverDebugCommands</B>
</FONT>
<UL>
<LI type="circle"><A HREF="DDDriverDebugCommands.htm" target="_blank">
<FONT color="#000000">DDDriverDebugCommands Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>Breakpoints</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, Breakpoints, ON</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Mode</B><BR/><short_desc xmlns=""> 
                 The status for this debug mode.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CommandDebug</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, CommandDebug, ON</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Mode</B><BR/><short_desc xmlns=""> 
                 The status for this debug mode.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RecordsDebug</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, RecordsDebug, ON</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Mode</B><BR/><short_desc xmlns=""> 
                 The status for this debug mode.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>TestDebug</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, TestDebug, ON</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Mode</B><BR/><short_desc xmlns=""> 
                 The status for this debug mode.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>DDDriverFileCommands</B>
</FONT>
<UL>
<LI type="circle"><A HREF="DDDriverFileCommands.htm" target="_blank">
<FONT color="#000000">DDDriverFileCommands Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>CloseFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
            C, CloseFile, 8
          </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
            C, CloseFile, ^file_number
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>FileNumber</B><BR/><short_desc xmlns="">
              The file number for the file to be closed.
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CopyFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
            C, CopyFile, "C:/Test/Test1.txt" , "C:/Test/Test2.txt"
          </FONT></LI>
<LI type="circle"><FONT color="#800080">
            C, CopyFile, "C:/Test/Test1.txt" , "Test2.txt"
          </FONT></LI>
<LI type="circle"><FONT color="#800080">
            C, CopyFile, "Test1.txt" , "Test2.txt"
          </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
            C, CopyFile, "Test1.txt" , "/w32/Results/Test1.txt"
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>FromFileName</B><BR/><short_desc xmlns="">
              The file path and file name for the file to be copied.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ToFileName</B><BR/><short_desc xmlns="">
              The file path and file name to copy the file to.
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CopyMatchingFiles</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
                		C, CopyMatchingFiles, "C:\Test", "C\Test2", "file?.*"
              		</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
			      	C, CopyMatchingFiles, "Datapool\Test\MyTestOutput", "C:\MyTestOutput", "file.*\.java", REGEXP
			</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>FromDirectoryName</B><BR/><short_desc xmlns="">
                  			The directory name where the files are located.
                		</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
					The directory name where the files are located. The directory can be a fully-qualified 
					path or a path that is relative to the SAFS Automation Project Directory.
                		</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ToDirectoryName</B><BR/><short_desc xmlns="">
		                	The directory name where the files are copied.
		                </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
					The directory name where the files are copied. The directory can be a fully-qualified 
					path or a path that is relative to the SAFS Automation Project Directory. This 
					directory must already exist prior to execution.
                		</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>Pattern</B><BR/><short_desc xmlns="">
					The pattern used to distinguish the files/sub-directories to be copied.
				</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>FilterMode</B><BR/><short_desc xmlns=""> 
		                 	The filter mode used for matching the files/sub-directories to be copied.  
		                 	Default is WILDCARD.
		              	</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
		                 	Supported filter modes include:<br>
		                 	<table border="1" cellspacing="2">
						<tr bgcolor="#C0C0C0" align="center">
							<td>FilterMode</td>
							<td>Comments</td>
						</tr>
					        <tr>
					        	<td align="center">WILDCARD</td>
					                <td>Default.  Includes support for * and ? wildcard characters</td>
					        </tr>
					        <tr>
							<td align="center">REGEXP</td>
							<td>Includes support for Regular Expression pattern matching</td>
					        </tr>
					 </table>             
              			</detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CreateDirectory</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, CreateDirectory, "C:/Test/SubTest"
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>DirectoryName</B><BR/><short_desc xmlns="">
              The full directory path name for the directory to be created.
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CreateFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
            C, CreateFile, "C:\Test\FileTest.txt", "Output", "Write","^test_filenum"
          </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
            C, CreateFile, "C:\Test\FileTest.txt", "Output", "Write","^test_filenum", 8
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>FileName</B><BR/><short_desc xmlns="">
              The full path file name of the file to be opened.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>Mode</B><BR/><short_desc xmlns="">
              Mode to be used to create and open the file, Input, Output or Append.                    Random and Binary not supported
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>Access</B><BR/><short_desc xmlns="">
              Access to be used to create and open the file. Read, Write or Read Write.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>FileNumberVariable</B><BR/><short_desc xmlns="">
              DDE Variable name of the variable to store the file number.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>FileNumber</B><BR/><short_desc xmlns="">
              Optional File number to be used to open the file                       Otherwise next available file number is used
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DeleteDirectory</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, DeleteDirectory, "C:/Test/SubTest"
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>DirectoryName</B><BR/><short_desc xmlns="">
              The full directory path name for the directory to be deleted.
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DeleteDirectoryContents</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
                		C, DeleteDirectoryContents, "Datapool\Test"
              		</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
				C, DeleteDirectoryContents, "C:\Test\SubTest", true
			</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>DirectoryName</B><BR/><short_desc xmlns="">
                  			The directory name in which the contents will be deleted.
                		</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
				        The directory name in which the contents will be deleted. The directory can be a  
				        fully-qualified path or a path that is relative to the SAFS Automation Project Directory.
                		</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>DeleteDir</B><BR/><short_desc xmlns="">
		                	Indicate whether you want to also delete the directory with true or false.  Default is false.
		                </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DeleteFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
            C, DeleteFile, "Test1.txt"
          </FONT></LI>
<LI type="circle"><FONT color="#800080">
            C, DeleteFile, "C:/test/Test1.tst"
          </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
            C, DeleteFile, "C:/test/Test1.tst", "NoVerify"
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>FileName</B><BR/><short_desc xmlns="">
              The file name for the file to be deleted.  Normally, the full file path is specified. 
              If a relative path is specified, it is relative to the project directory. 
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>NoVerify</B><BR/><short_desc xmlns="">
              String Equal to "NOVERIFY" if file is not verified prior to deleting.
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>FilterImage</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
                C, FilterImage, "C:\in.jpg", "C:\out.jpg", COORD, 30;40;50;60 50%;30%;75%;50%
              </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
                C_ FilterImage_ "C:\in.jpg"_ "C:\out.jpg"_ COORD_ 30,40,50,60
              </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>InputFilename</B><BR/><short_desc xmlns="">
                  The input image file (FULL PATH)
                </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>OutputFilename</B><BR/><short_desc xmlns="">
                  The output image file after filtering (FULL PATH)
                </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  The output image file after filtering (FULL PATH).  The output image may overwrite the 
                  input image.
                </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>FilterMode</B><BR/><short_desc xmlns="">
                  Mode by which the image is filtered
                </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  Mode by which the image is filtered. Currently, the only supported FilterMode is COORD.
                </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Coords</B><BR/><short_desc xmlns="">
	      		Required parameter for the COORD FilterMode that defines the rectangle(s) of the input image that are to be filtered out.
	        </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
	                Required parameter for the COORD FilterMode that defines the rectangles of the input image that are to be filtered out.
	                Value of this app map reference must be in the format of a
	                top-left and bottom-right pair, and can be either absolute
	                coordinates or percentages ("x1,y1,x2,y2" or "x1%,y1%,x2%,y2%").
	                Coordinates are relative to the image, i.e. (0,0) and
	                (0%,0%) are the minimum, and (image width, image height)
	                and (100%,100%) are the maximum. Values exceeding the minimum/
	                maximum are forced to the nearest limiting value. Absolute and
	                percent values can be mixed, so "0,0,50%,50%" is valid.
	                <p>
	                Note: Java-based engines like RFT should support using either 
	                a comma (,) or a semi-colon (;) as the Coords item separator.  
	                Also, there should be a space char separating each set of
	                rectangle coordinates.
	                </p>
              	</detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>FilterTextFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, FilterTextFile, C:\Temp\myfile.txt </FONT></LI>
<LI type="circle"><FONT color="#800080">C, FilterTextFile, C:\Temp\myfile.txt, RegExp, "19\d\d BC", "Last Centry" </FONT></LI>
<LI type="circle"><FONT color="#800080">C, FilterTextFile, myfile.txt, RegExp, "19\d\d BC", "Last Centry", CaseInsensitive </FONT></LI>
<LI type="circle"><FONT color="#800080">C, FilterTextFile, Datapool\myfile.txt, RegExp, "19\d\d BC" </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, FilterTextFile, Datapool\myfile.txt, RegExp, "19\d\d BC", , , "UTF-8" </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>File</B><BR/><short_desc xmlns=""> 
                 The file to be filtered.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The file to be filtered.
                 This can be a full path, a relative path, or a file name.
                 For relative path, it is appended to the project's path to
                 build the full path of the file. For file name, the file
                 is saved under the project's Datapool\Test directory. In
                 any case the parent folder of the file must exist.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>FilterMode</B><BR/><short_desc xmlns=""> 
                 The filter mode.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The filter mode.<br>
                 "REGEXP" (Regular Expressions) is currently the only supported FILTERMODE that 
                 actually filters anything.                   
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>FilterOptions</B><BR/><short_desc xmlns=""> 
                 Additional filter options.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Additional filter options.
                 Depending on the filter mode, some filter options are required.
                 <table border="1" cellspacing="1">
                 <tr bgcolor="#C0C0C0" align="center"><td>FILTERMODE</td><td>FIELDS</td><td>COMMENTS</td></tr>
                 <tr><td align="center">Default(empty)</td>
                     <td align="center">(None)</td>
                     <td>Default filtering. File is unchanged.</td></tr>
                 <tr><td rowspan="3" align="center">"RegExp"</td>
                     <td>5 - PATTERN (Required)</td>
                     <td valign="top">REGEXP pattern to match for filtering. All occurrences of 
                      text in a file that match regular expression PATTERN will be removed and 
                      replaced with the REPLACE string (if any).</td></tr>
                 <tr><td>6 - REPLACE (Optional)</td>
                     <td>Default value for REPLACE is "" (empty string). This tells REGEXP to 
                      remove matching PATTERN text from the file.  Specifying a REPLACE string 
                      will remove matching PATTERN text from the file and insert the REPLACE string 
                      in its place.</td></tr>
                 <tr><td>7 - CASE (Optional)</td>
                     <td>CASE specifies the case-sensitivity used when searching for matching 
                      text in the file.  Use "CaseInsensitive" to ignore case when searching.<br>
                      If not specified the default implementation is a CaseSensitive compare.</td></tr></table>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Encoding</B><BR/><short_desc xmlns=""> 
                 The encoding to use to read and write file.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
				  If user doesn't provide this parameter, program will detect the encoding automatically.
				  If no encoding is provided and detected, program will use system default encoding.<br>
				  If user provide this paramter, FilterOptions must be present (can be blank).
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>FindSqaFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
            C, FindSqaFile, "Test1.txt" , "^filepath"
          </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
            C, FindSqaFile, "C:Test1.txt" , "^filepath"
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>FileName</B><BR/><short_desc xmlns="">
              The file path and file name of the file to be found.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>FilePathVariable</B><BR/><short_desc xmlns="">
              Name of the DDV variable to be used to store the full file path of the                 found file. If file not found blank string is assigned to variable
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetFileDateTime</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
            C, GetFileDateTime, "Test1.txt" , "^filedate"
          </FONT></LI>
<LI type="circle"><FONT color="#800080">
            C, GetFileDateTime, "C:\Test1.txt" , "^filedate"
          </FONT></LI>
<LI type="circle"><FONT color="#800080">
            C, GetFileDateTime, "C:\Test1.txt" , "^filedate", true, "Created"
          </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
            C, GetFileDateTime, "C:\Test1.txt" , "^filedate", , "LastAccessed"
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>FileName</B><BR/><short_desc xmlns="">
              The file path and file name of the file to get the file date and time.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>FileDateVariable</B><BR/><short_desc xmlns="">
              Name of the DDV variable to be used to store the file date and time
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>GetMilitaryTime</B><BR/><short_desc xmlns=""> 
                 If true, the converted time is in 24-hours military time format
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 If this is true, the converted time will be in 24-hours military time
                 format (0-23). If this parameter is omitted, it is false be default,
                 the converted time will be in AM-PM 12-hours format (1-12).
                 If not provided, by default it is false.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>DateTimeType</B><BR/><short_desc xmlns=""> 
                 You can get different date and time by providing a different value.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 You have 3 options:
                 <ol>
                   <li><b>Created</b>:			get the created date and time for the file</li>
                   <li><b>LastModified</b>:	get the last modified date and time for the file</li>
                   <li><b>LastAccessed</b>:	get the last accessed date and time for the file</li>
                 </ol>
                 If not provided, by default it is "LastModified".
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetFileProtections</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, GetFileProtections, "C:\afile.txt" , varName
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>FileName</B><BR/><short_desc xmlns="">
              The file path and file name of the file to get the file attribute.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>VarName</B><BR/><short_desc xmlns="">
              variable name to place the attributes in
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetFiles</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
            C, GetFiles, "C:/Test", "D:/Test/filelist.txt", "16"
          </FONT></LI>
<LI type="circle"><FONT color="#800080">
            C, GetFiles, "C:/Test", "D:/Test/filelist.txt"
          </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
            C, GetFiles,"^directory", "^file_list"
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Directory</B><BR/><short_desc xmlns="">
              The full name of the directory to be searched for files.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>FileName</B><BR/><short_desc xmlns="">
              Full file path and name of the file to store list of                  files found in the directory
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>FileAttributes</B><BR/><short_desc xmlns="">
              Optional File Attributes parameter specifying file attributes to select with Dir directory 
              search command. Default if unspecified is normal files. It may be any combination of them.
            </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 <p>Search directory using following file attributes. Default value is 0 - normal file.</p>
                 <p>0  - Normal file, returns only files without other attributes set</p>
                 <p>1  - Read Only file</p>
                 <p>2  - Hidden file</p>
                 <p>4  - System file (Window OS Only)</p>
                 <p>8  - Volume Label (Exclusive, if set, no other attribute counts.)</p>
                 <p>16 - Directory</p>
          		 <p>32 - Archive file (Windows OS: attrib with 'A'; Other OS: file suffix is .jar, .tar, .rar, .gz etc.)</p>
                 <p>The values in the table can be added together to select multiple attributes.</p>
                 <p>For example, to list hidden and system files in addition to normal files set FileAttributes to 6 (6=2+4).</p>
                 <p></p>
                 <p>If FileAttributes is set to 8 (Volume Label), then returns the volume label of the drive specified in the pathname$,
                 or of the current drive if drive is not explicitly specified.</p>
                 <p>If volume label attribute is set, all other attributes are ignored.</p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetFileSize</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
            C, GetFileSize, "Test1.txt" , "^filesize"
          </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
            C, GetFileSize, "C:Test1.txt" , "^filepath"
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>FileName</B><BR/><short_desc xmlns="">
              The file path and file name of the file to get file size.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>FileSizeVariable</B><BR/><short_desc xmlns="">
              Name of the DDV variable to be used to store the file size of the file.
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetINIFileValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
            C, GetINIFileValue, "test.INI", Section, Item, Variable
          </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
            C, GetINIFileValue, "C:\test.INI", Section, Item, Variable         
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>FileName</B><BR/><short_desc xmlns="">
              The name of the file.
            </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              Note: For Java-based tools like RJ, TID, and SDC this can be a relative path filename.  
              If the value is a simple filename with no path information then the file will be sought 
              in the Project\Datapool\Runtime directory.  If there is some relative path information provided then the file will be sought relative to the Project directory.
              then the file will be sought
            </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>Section</B><BR/><short_desc xmlns="">
              The Section of the file to look in.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>Item</B><BR/><short_desc xmlns="">
              The item to look for.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Variable</B><BR/><short_desc xmlns="">
              Name of the DDV variable to be used to store the file date and time
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetStringCountInFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, GetStringCountInFile, "\tidtest.ini", "SAFS_TEST"</FONT></LI>
<LI type="circle"><FONT color="#800080">C, GetStringCountInFile, "somefile.txt", "sample text", MyCounter</FONT></LI>
<LI type="circle"><FONT color="#800080">C, GetStringCountInFile, "somefile.txt", "SamPLe TexT", MyCounter, "CaseInsensitive"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, GetStringCountInFile, "somefile.txt", "SamPLe TexT", MyCounter, "CaseInsensitive", "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>File</B><BR/><short_desc xmlns=""> 
                  The File to be searched.
               </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
               	  This can be a full filepath, a relative path, or a simple filename. A relative path is appended to 
               	  the Project's path to deduce the full filename. For a simple filename, the filename is appended to the Project's Datapool\Test 
               	  directory path to deduce the full filename. An error will be logged if the file does not exist, or cannot be read.
               </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>String</B><BR/><short_desc xmlns=""> 
                  The string to match and count in the file.
               </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>VarName</B><BR/><short_desc xmlns=""> 
                  The name of the variable to receive the count.
               </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
               	  Optional. This command should automatically clear the variable value to "0" before counting. If no variable name is provided, then 
               	  a default variable name of 'GetStringCountInFile' will be used.
               </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>CaseSensitive</B><BR/><short_desc xmlns=""> 
                  Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.  
               </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
               	  Optional. Comparisons are case-sensitive by default.
               </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Encoding</B><BR/><short_desc xmlns=""> 
                  Charset encoding string like "UTF-8", etc...
               </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
               	  Optional. If not specified the default system encoding is assumed.
               </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetSubstringsInFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C GetSubstringsInFile ^file=^fullfilename ^regexstart="img id=""idChart" ^regexstop="""" ^rootname="Chart"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>file</B><BR/><short_desc xmlns=""> 
                  Fully-qualified filename
               </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>regexstart</B><BR/><short_desc xmlns=""> 
                  The starting regular expression.  Should not be empty.
               </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>regexstop</B><BR/><short_desc xmlns=""> 
                  The stopping regular expression.  Should not be empty.
               </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>rootname</B><BR/><short_desc xmlns=""> 
                  The root name of the returned variable(s).  
               </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  The rootname is used as a base to build the DDVariable names which contain the located substring(s).  For example, if rootname is "Chart" and two substring matches are found, then 2 DDVariables are created to store those substrings and another is created to store the count of matches: 
                  <ol>
                     <li>DDVariable Chart1 contains the first substring, and</li>
                     <li>DDVariable Chart2 contains the second substring. </li>
                     <li>DDVariable ChartCount contains the number of matches found. </li>
                  </ol>
               </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetTextFromImage</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, GetTextFromImage, image.gif, Var1, TOCR, en, 2.0</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>ImageFile</B><BR/><short_desc xmlns="">
               The name of the image file used to detect text in it.
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             The name of the image file used to detect text in it. The name of the text file used to store 
             detected text. By default, the files will be stored in the active "Test" directory. If you specify 
             a relative path, the path will be relative to the project directory. The directory for a full or 
             relative path must already exist.
             <p>
             The extension of the image file can be .bmp, .jpg, .gif, .tif, .png or .pnm.
             </p>
             </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>VariableName</B><BR/><short_desc xmlns="">
             The name of the variable to receive detected text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              The name of the variable to receive detected text. Note, if you supply the name of the variable 
              and include the leading caret (^) symbol then the variable must be enclosed in quotes. Otherwise, 
              that variable will be used like any other variable and the substituted value of that variable will 
              be interpreted as the name of the variable you wish to use.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>OCRId</B><BR/><short_desc xmlns="">
             OCRId indicating the OCR used to recognize text.
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             Two OCR engines are supported. "TOCR" will be taken as default if the parameter is blank.
             "TOCR" stands for Tesseract OCR; "GOCR" stands for GOCR.
             <p>
             Note: Seems TOCR performs a bit better than GOCR (personal experience). 
             </p>
             </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>LangId</B><BR/><short_desc xmlns="">
             Optional LangId representing the language in use for selected OCR to recognize text. 
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             For both TOCR and GOCR, only English is supported so far. Language Id takes standard language code, 
             which can be gotten by calling Locale.ENGLISH.getLanguage(). 
             <p><pre>
				LangId      Language
				"en"   ---  English
				"cn"   ---  Chinese
			 </pre></p>
             <p>
             If LangId is not specified with blank or empty string, the language of System locale will be 
             used as default. 
             </p>
             </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>ScaleRatio</B><BR/><short_desc xmlns="">
             Optional ScaleRatio indicating the scale ratio for resizing the original image.
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             To fit in font size and DPI required by OCR, SAFS needs to resize images before sending them 
             to OCR engines. For screen-captured images with 96DPI, TOCR takes 1.9 as default; GOCR takes 1.5 
             as default. You may try different ScaleRatio to find an appropriate value if default setting is 
             unable to meet your requirement.
             </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>IfExistDir</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, IfExistDir, "C:\temp\9\7", DeleteDirectory, "C:\temp\9\7"
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>DirectoryName</B><BR/><short_desc xmlns="">
              The full path name of directory to test for
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ThenDriverCommand</B><BR/><short_desc xmlns="">
              Actually, the rest of the parameters include this,                     which is the driver command to execute if the                     directory exists, followed by the remaining driver                     parameters for that command
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>IfExistFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, IfExistFile, "C:\temp\9\7\6.txt", DeleteFile, "C:\temp\9\7\6.txt"
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>FileName</B><BR/><short_desc xmlns="">
              The full path name of file to test for
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ThenDriverCommand</B><BR/><short_desc xmlns="">
              Actually, the rest of the parameters include this,                     which is the driver command to execute if the                     file exists, followed by the remaining driver                     parameters for that command
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>IsEndOfFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, IsEndOfFile, 8, variable
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>FileNumber</B><BR/><short_desc xmlns="">
              The file number for the file to be closed.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>Variable</B><BR/><short_desc xmlns="">
              Variable to assign true or false
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OpenFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
            C, OpenFile, "C:\Test\FileTest.txt", "Input", "Read","test_filenum"
          </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
            C, OpenFile, "C:\Test\FileTest.txt", "Output", "Write","test_filenum",8
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>FileName</B><BR/><short_desc xmlns="">
              The full path file name of the file to be opened.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>Mode</B><BR/><short_desc xmlns="">Mode to be used to open the file, Input, Output, Append, and AppendRaw.</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
            Text Files only.  Random Access and Binary files are not supported.
            <p>Append Mode generally rewrites existing file contents with a NEWLINE between textual lines--stripping out OS-specific newline characters and making the file the same regardless of the platform.
            </p><p>
            AppendRaw Mode rewrites existing file contents without modification before appending any new data to the file.
            </p>
            </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>Access</B><BR/><short_desc xmlns="">
              Access to be used to open the file. Read, Write or Read Write.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>FileNumberVariable</B><BR/><short_desc xmlns="">
              DDE Variable name of the variable to store the file number.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>FileNumber</B><BR/><short_desc xmlns="">
              Optional File number to be used to open the file                       Otherwise next available file number is used
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OpenUTF8File</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
            C, OpenUTF8File, "C:\Test\FileTestUTF8.txt", "Input", "Read","test_filenum"
          </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
            C, OpenUTF8File, "C:\Test\FileTestUTF8.txt", "Output", "Write","test_filenum",8
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>FileName</B><BR/><short_desc xmlns="">
              The full path file name of the UTF-8 file to be opened.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>Mode</B><BR/><short_desc xmlns="">Mode to be used to open the file, Input, Output, Append, and AppendRaw.</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
            Text Files only.  Random Access and Binary files are not supported.
            <p>Append Mode generally rewrites existing file contents with a NEWLINE between textual lines--stripping out OS-specific newline characters and making the file the same regardless of the platform.
            </p><p>
            AppendRaw Mode rewrites existing file contents without modification before appending any new data to the file.
            </p>
            </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>Access</B><BR/><short_desc xmlns="">
              Access to be used to open the UTF-8 file. Read, Write or Read Write.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>FileNumberVariable</B><BR/><short_desc xmlns="">
              DDE Variable name of the variable to store the file number.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>FileNumber</B><BR/><short_desc xmlns="">
              Optional File number to be used to open the UTF-8 file, 
              otherwise, next available file number is used.
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>PrintToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
            C, PrinttoFile, 3, ^printexp="This text printed to file",";"
          </FONT></LI>
<LI type="circle"><FONT color="#800080">
            C, PrinttoFile, ^filenumb, ^tempstring,","
          </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
            C, PrinttoFile, ^filenumb, ^tempstring
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>FileNumber</B><BR/><short_desc xmlns="">
              The file number of the file to be written to.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>ExpressionListVariable</B><BR/><short_desc xmlns="">
              DDV variable name of the variable that contains the "Expression List";                 NOTE: for RobotJ it is the Expression List, if it                 begins with ^ then it is treated as a variable.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>PrintOutputPlacement</B><BR/><short_desc xmlns="">
              Print Output Placement Parameter determines where the next output to the same file should begin
              <ol>
			  <li>; will place the output immediately following this print output</li>
              <li>, will start output at the next print zone on the same line</li>
              <li>Absence of this parameter (Default) will place the next output at the beginning of a new line following a carriage return line feed.</li>
              </ol>
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ReadFileChars</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
            C, ReadFileChars, ^filenum , 5,"^charread"
          </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
            C, ReadFileChars, 8, 5,"^charread"
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>FileNumber</B><BR/><short_desc xmlns="">
              The file number of the file to be read from.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>NumberOfChar</B><BR/><short_desc xmlns="">
              Number of characters to be read from the file
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>VariableName</B><BR/><short_desc xmlns="">
              Name of the DDV variable in which to store the characters                 read from the file
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ReadFileLine</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, ReadFileLine, ^filenum , "^line"
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>FileNumber</B><BR/><short_desc xmlns="">
              The file number of the file to be read from.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>VariableName</B><BR/><short_desc xmlns="">
              Name of the DDV variable in which to store the line                 read from the file
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ReadFileString</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, ReadFileString, ^filenum , "value"
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>FileNumber</B><BR/><short_desc xmlns="">
              The file number of the file to be read from.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>VariableName</B><BR/><short_desc xmlns="">
              Name of the DDVariable in which to store the value read from the file.
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RenameFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
            C, RenameFile, "C:/Test/Test1.txt" , "C:/Test/Test2.txt"
          </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
            C, RenameFile, "C:/Test/Test1.txt" , "C:/Test/Test2.txt","NOVERIFY"
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>OldFileName</B><BR/><short_desc xmlns="">
              The file path and file name of the file to be renamed.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>NewFileName</B><BR/><short_desc xmlns="">
              The new file path and file name of the file.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>NoVerify</B><BR/><short_desc xmlns="">
              String Equal to "NOVERIFY" if file is not verified prior to renaming.
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SaveTextFromImage</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, SaveTextFromImage, image.gif, ocr.txt, TOCR, en, </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>ImageFile</B><BR/><short_desc xmlns="">
             The name of the image file used to detect text in it.
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             The name of the image file used to detect text in it. The name of the text file used to store 
             detected text. By default, the files will be stored in the active "Test" directory. If you specify 
             a relative path, the path will be relative to the project directory. The directory for a full or 
             relative path must already exist.
             <p>
             The extension of the image file can be .bmp, .jpg, .gif, .tif, .png or .pnm.
             </p>
             </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>OutputFile</B><BR/><short_desc xmlns="">
             The name of the text file used to store detected text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              The name of the text file used to store detected text. By default, the files will be stored in 
              the active "Test" directory. If you specify a relative path, the path will be relative to the 
              project directory. The directory for a full or relative path must already exist.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>OCRId</B><BR/><short_desc xmlns="">
             OCRId indicating the OCR used to recognize text.
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             Two OCR engines are supported. "TOCR" will be taken as default if the parameter is blank.
             "TOCR" stands for Tesseract OCR; "GOCR" stands for GOCR.
             <p>
             Note: Seems TOCR performs a bit better than GOCR (personal experience). 
             </p>
             </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>LangId</B><BR/><short_desc xmlns="">
             Optional LangId representing the language in use for selected OCR to recognize text. 
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             For both TOCR and GOCR, only English is supported so far. Language Id takes standard language code, 
             which can be gotten by calling Locale.ENGLISH.getLanguage(). 
             <p><pre>
				LangId      Language
				"en"   ---  English
				"cn"   ---  Chinese
			 </pre></p>
             <p>
             If LangId is not specified with blank or empty string, the language of System locale will be 
             used as default. 
             </p>
             </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>ScaleRatio</B><BR/><short_desc xmlns="">
             Optional ScaleRatio indicating the scale ratio for resizing the original image.
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             To fit in font size and DPI required by OCR, SAFS needs to resize images before sending them 
             to OCR engines. For screen-captured images with 96DPI, TOCR takes 1.9 as default; GOCR takes 1.5 
             as default. You may try different ScaleRatio to find an appropriate value if default setting is 
             unable to meet your requirement.
             </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetFileProtections</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
            C, SetFileProtections, "Test1.txt" , 1
          </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
            C, SetFileProtections, "C:Test1.txt" , 0
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>FileName</B><BR/><short_desc xmlns="">
              The file path and file name of the file change the file attribute.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>FileProtection</B><BR/><short_desc xmlns="">
              New value of the attribute of the file to be changed
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>WriteFileChars</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
            C, WriteFileChars, 3, all, ^expression
          </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
            C, WriteFileChars, ^filenumb, 4, "Text Output"
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>FileNumber</B><BR/><short_desc xmlns="">
              The file number/identifier of the file to be written to.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>NumberOfChars</B><BR/><short_desc xmlns="">
              The number of characters to write to the file;                 however, if this parameter is equal to 'all' then all                 of the characters from the expression list are written.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>ExpressionList</B><BR/><short_desc xmlns="">
              Expression List, if it begins with ^ then it is treated as a variable.
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>DDDriverFlowCommands</B>
</FONT>
<UL>
<LI type="circle"><A HREF="DDDriverFlowCommands.htm" target="_blank">
<FONT color="#000000">DDDriverFlowCommands Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>CallCycle</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, CallCycle, "MyCycle" </FONT></LI>
<LI type="circle"><FONT color="#800080">C, CallCycle, "MyCycle", ";" </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, CallCycle, "AnotherCycle", "", ^FName="John", ^LName="Smith"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>CycleName</B><BR/><short_desc xmlns=""> 
                 The name of the Cycle table to execute.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>CycleSeparator</B><BR/><short_desc xmlns=""> 
                 The field separator used by the table--if required.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Only necessary if the table uses a different field separator than 
                 that already set for CycleDriver.  Use an empty string or an empty 
                 field to keep the field separator already in use.<br>
                 Typically, all the tables use the same separator so this can usually 
                 be left empty.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>ParameterName</B><BR/><short_desc xmlns=""> 
                 One or more parameter values to send to the Cycle--each in their own field.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CallJUnit</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, CallJUnit, "com.sas.spock.tests.SpockExperiment" </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, CallJUnit, "myapp.tests.APITest myapp.tests.RESTTest"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>ClassName</B><BR/><short_desc xmlns=""> 
                 The name of one or more Classes to execute.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 Class names are in the normal full package.Class format.  
                 Multiple classes can be separated by SEMI-COLONs, COLONs, COMMAs, or SPACES--
                 whichever is NOT being used as the test record separator.  
                 The same separator should be used between all Classes.
                 <p>The Classes to execute must be findable within the JVM ClassPath.</p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CallScript</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, CallScript, "MyScript" </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, CallScript, "AnotherScript", ^FName="John", ^LName="Smith"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>ScriptName</B><BR/><short_desc xmlns=""> 
                 The name of the Script to execute.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>ParameterName</B><BR/><short_desc xmlns=""> 
                 One or more parameter values to send to the script--each in their own field.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CallStep</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, CallStep, "AnotherStepTable" </FONT></LI>
<LI type="circle"><FONT color="#800080">C, CallStep, "MyStep", ";" </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, CallStep, "AnotherStep", "", ^FName="John", ^LName="Smith"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>StepName</B><BR/><short_desc xmlns=""> 
                 The name of the StepTable to execute.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>StepSeparator</B><BR/><short_desc xmlns=""> 
                 The field separator used by the Step table--if required.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Only necessary if the table uses a different field separator than 
                 that already set for StepDriver.  Use an empty string or an empty 
                 field to keep the field separator already in use.<br>
                 Typically, all the tables use the same separator so this can usually 
                 be left empty.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>ParameterName</B><BR/><short_desc xmlns=""> 
                 One or more parameter values to send to the table--each in their own field.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CallSuite</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, CallSuite, "MySuite" </FONT></LI>
<LI type="circle"><FONT color="#800080">C, CallSuite, "MySuite", ";" </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, CallSuite, "AnotherSuite", "", ^FName="John", ^LName="Smith"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>SuiteName</B><BR/><short_desc xmlns=""> 
                 The name of the Suite to execute.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>SuiteSeparator</B><BR/><short_desc xmlns=""> 
                 The field separator used by the Suite--if required.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The field separator used by the Suite--if required.<br>
                 Only necessary if the Suite uses a different field separator than 
                 that already set for SuiteDriver.  Use an empty string or an empty 
                 field to keep the field separator already in use.<br>
                 Typically, all the tables use the same separator so this can usually 
                 be left empty.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>ParameterName</B><BR/><short_desc xmlns=""> 
                 One or more parameter values to send to the suite--each in their own field.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ExitCycle</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, ExitCycle</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ExitSuite</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, ExitSuite</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ExitTable</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, ExitTable</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GotoBlockID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, GotoBlockID, "ErrorHandler"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BlockID</B><BR/><short_desc xmlns=""> 
                 The name of the block to Goto.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OnContainsGotoBlockID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, OnContainsGotoBlockID, "NoError", Value1, Value2 </FONT></LI>
<LI type="circle"><FONT color="#800080">C, OnContainsGotoBlockID, "NoError", Value1, VALUE1, CaseInsensitive </FONT></LI>
<LI type="circle"><FONT color="#800080">C, OnContainsGotoBlockID, "NoError", ^Value1, Value2 </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, OnContainsGotoBlockID, "NoError", ^Value1, ^Value2 </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BlockID</B><BR/><short_desc xmlns=""> 
                 The name of the block to Goto.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>Value1</B><BR/><short_desc xmlns=""> 
                 The value to be searched for the Value2 substring
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>Value2</B><BR/><short_desc xmlns=""> 
                 A string to search Value1 for an occurance of
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>CaseSensitive</B><BR/><short_desc xmlns=""> 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OnDirectoryExistGotoBlockID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, OnDirectoryExistGoToBlockId, DirectoryExist, "DirectoryName" </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, OnDirectoryExistGoToBlockId, DirectoryExist, DirectoryName, CaseInsensitive </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BlockID</B><BR/><short_desc xmlns=""> 
                 The name of the block to Goto.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>DirectoryName</B><BR/><short_desc xmlns=""> 
                 The directory name of the directory relative to Datapool/Test to be verified for existance.  Case sensitivity is handled by the underlying operating system (i.e. a case sensitive platform makes this keyword case sensitive).
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OnDirectoryNotExistGotoBlockID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, OnDirectoryNotExistGoToBlockId, DirectoryNotExist, DirectoryName </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, OnDirectoryNotExistGoToBlockId, DirectoryNotExist, DirectoryName, CaseInsensitive </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BlockID</B><BR/><short_desc xmlns=""> 
                 The name of the block to Goto.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>DirectoryName</B><BR/><short_desc xmlns=""> 
                 The directory name relatvie to Datapool/Text of the directory to be verified for non existance.  Case sensitivity is handled by the underlying operating system (i.e. a case sensitive platform makes this keyword case sensitive).
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OnEqualGotoBlockID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, OnEqualGotoBlockID, "NoError", Value1, Value2 </FONT></LI>
<LI type="circle"><FONT color="#800080">C, OnEqualGotoBlockID, "NoError", Value1, VALUE1, CaseInsensitive </FONT></LI>
<LI type="circle"><FONT color="#800080">C, OnEqualGotoBlockID, "NoError", ^Value1, Value2 </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, OnEqualGotoBlockID, "NoError", ^Value1, ^Value2 </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BlockID</B><BR/><short_desc xmlns=""> 
                 The name of the block to Goto.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>Value1</B><BR/><short_desc xmlns=""> 
                 The first value for the comparison.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>Value2</B><BR/><short_desc xmlns=""> 
                 The second value for the comparison.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>CaseSensitive</B><BR/><short_desc xmlns=""> 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OnFileEOFGotoBlockID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, OnFileEOFGoToBlockId, "FileEOF", "FileNumber"
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BlockID</B><BR/><short_desc xmlns="">
              The name of the block to Goto.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>FileNumber</B><BR/><short_desc xmlns="">
              The file number of the file to be verified for EOF.
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OnFileExistGotoBlockID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, OnFileExistGoToBlockId, FileExist, "FileName" </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, OnFileExistGoToBlockId, FileExist, FileName, CaseInsensitive </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BlockID</B><BR/><short_desc xmlns=""> 
                 The name of the block to Goto.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>FileName</B><BR/><short_desc xmlns=""> 
                 The file name of the file relative to Datapool/Test to be verified for existance.  Case sensitivity is handled by the underlying operating system (i.e. a case sensitive platform makes this keyword case sensitive).
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OnFileNotExistGotoBlockID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, OnFileNotExistGoToBlockId, FileNotExist, FileName </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, OnFileNotExistGoToBlockId, FileNotExist, FileName, CaseInsensitive </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BlockID</B><BR/><short_desc xmlns=""> 
                 The name of the block to Goto.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>FileName</B><BR/><short_desc xmlns=""> 
                 The file name of the file relative to Datapool/Test to be verified for existance.  Case sensitivity is handled by the underlying operating system (i.e. a case sensitive platform makes this keyword case sensitive).
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OnGreaterThanGotoBlockID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, OnGreaterThanGotoBlockID, "NoError", Val2, Val1 </FONT></LI>
<LI type="circle"><FONT color="#800080">C, OnGreaterThanGotoBlockID, "NoError", 500, 100 </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, OnGreaterThanGotoBlockID, "NoError", ^Val1, ^Val2 </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BlockID</B><BR/><short_desc xmlns=""> 
                 The name of the block to Goto.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>Value1</B><BR/><short_desc xmlns=""> 
                 The value to be compared.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>Value2</B><BR/><short_desc xmlns=""> 
                 The value to be compared against.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>CaseSensitive</B><BR/><short_desc xmlns=""> 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OnGUIExistsGotoBlockID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, OnGUIExistsGotoBlockID, "WindowExists", AWindow, AWindow </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, OnGUIExistsGotoBlockID, "ButtonExists", AWindow, AButton, 10 </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BlockID</B><BR/><short_desc xmlns="">
                 The name of the block to Goto.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>WindowID</B><BR/><short_desc xmlns="">
                 A Window reference from the app map.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>ComponentID</B><BR/><short_desc xmlns="">
                 A reference from the app map for the Component within the Window.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 A reference from the app map for the Component within the Window.
                 If the Window is the item of interest then both the WindowID and
                 ComponentID will be the same.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>TimeOut</B><BR/><short_desc xmlns="">
                 Timeout value in seconds before exiting automatically (no branch).
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OnGUINotExistGotoBlockID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, OnGUINotExistGotoBlockID, "WindowNotExist", AWindow, AWindow </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, OnGUINotExistGotoBlockID, "ButtonNotExist", AWindow, AButton, 10 </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BlockID</B><BR/><short_desc xmlns="">
                 The name of the block to Goto.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>WindowID</B><BR/><short_desc xmlns="">
                 A Window reference from the app map.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>ComponentID</B><BR/><short_desc xmlns="">
                 A reference from the app map for the Component within the Window.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 A reference from the app map for the Component within the Window.
                 If the Window is the item of interest then both the WindowID and
                 ComponentID will be the same.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>TimeOut</B><BR/><short_desc xmlns="">
                 Timeout value in seconds before exiting automatically (no branch).
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OnInRangeGotoBlockID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, OnInRangeGotoBlockID, "NoError", Val22, Val21, Val31 </FONT></LI>
<LI type="circle"><FONT color="#800080">C, OnInRangeGotoBlockID, "NoError", 200, 100, 500 </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, OnInRangeGotoBlockID, "NoError", ^Val1, ^Val2, ^Val3 </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BlockID</B><BR/><short_desc xmlns="">
                 The name of the block to Goto.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>Value1</B><BR/><short_desc xmlns="">
                 The value to be compared.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>Value2</B><BR/><short_desc xmlns="">
                 The low end of range to be compared against.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Value3</B><BR/><short_desc xmlns="">
                 The high end of range to be compared against.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>CaseSensitive</B><BR/><short_desc xmlns=""> 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OnLessThanGotoBlockID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, OnLessThanGotoBlockID, "NoError", Val1, Val2 </FONT></LI>
<LI type="circle"><FONT color="#800080">C, OnLessThanGotoBlockID, "NoError", 100, 200 </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, OnLessThanGotoBlockID, "NoError", ^Val1, ^Val2 </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BlockID</B><BR/><short_desc xmlns=""> 
                 The name of the block to Goto.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>Value1</B><BR/><short_desc xmlns=""> 
                 The value to be compared.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>Value2</B><BR/><short_desc xmlns=""> 
                 The value to be compared against.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>CaseSensitive</B><BR/><short_desc xmlns=""> 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OnMenuItemContainsStateGotoBlockID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, OnMenuItemContainsStateGotoBlockID, "NoError", MainWindow, MainWindow, "View-&gt;Error", "Disabled" </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BlockID</B><BR/><short_desc xmlns=""> 
                   The name of the block to transfer control to if state is 
                   part of the state information of the menuitem.
                </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>WindowName</B><BR/><short_desc xmlns=""> 
                   The window name.
                </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>ComponentName</B><BR/><short_desc xmlns=""> 
                   The component name.
                </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>MenuItem</B><BR/><short_desc xmlns=""> 
                   Menu-&gt;MenuItem hierarchy string to identify which menu item                              to test. This menu hierarchy is case-sensitive.
                   to test. This menu hierarchy is case-sensitive.
                </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>State</B><BR/><short_desc xmlns=""> 
                   Expected status string (or part thereof) to verify. 
		   Ex: "Enabled Checked" OR "Disabled Grayed" etc. Each item 
		   separated by a space will be evaluated separately so the order 
		   of the status items does not matter. These status items are 
		   case-sensitive.
                </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OnNotContainsGotoBlockID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, OnNotContainsGotoBlockID, "NoError", Value1, Value2 </FONT></LI>
<LI type="circle"><FONT color="#800080">C, OnNotContainsGotoBlockID, "NoError", Value1, VALUE1, CaseInsensitive </FONT></LI>
<LI type="circle"><FONT color="#800080">C, OnNotContainsGotoBlockID, "NoError", ^Value1, Value2 </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, OnNotContainsGotoBlockID, "NoError", ^Value1, ^Value2 </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BlockID</B><BR/><short_desc xmlns=""> 
                 The name of the block to Goto.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>Value1</B><BR/><short_desc xmlns=""> 
                 The value to be searched for the Value2 substring
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>Value2</B><BR/><short_desc xmlns=""> 
                 The substring to seek in VALUE1
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>CaseSensitive</B><BR/><short_desc xmlns=""> 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OnNotEqualGotoBlockID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, OnNotEqualGotoBlockID, "NoError", Value1, Value2 </FONT></LI>
<LI type="circle"><FONT color="#800080">C, OnNotEqualGotoBlockID, "NoError", Value1, VALUE1, CaseInsensitive </FONT></LI>
<LI type="circle"><FONT color="#800080">C, OnNotEqualGotoBlockID, "NoError", 100, 200 </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, OnNotEqualGotoBlockID, "NoError", ^Value1, ^Value2 </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BlockID</B><BR/><short_desc xmlns=""> 
                 The name of the block to Goto.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>Value1</B><BR/><short_desc xmlns=""> 
                 The first value for the comparison.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>Value2</B><BR/><short_desc xmlns=""> 
                 The second value for the comparison.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>CaseSensitive</B><BR/><short_desc xmlns=""> 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OnNotGreaterThanGotoBlockID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, OnNotGreaterThanGotoBlockID, "NoError", Val1, Val2 </FONT></LI>
<LI type="circle"><FONT color="#800080">C, OnNotGreaterThanGotoBlockID, "NoError", Val1, Val1 </FONT></LI>
<LI type="circle"><FONT color="#800080">C, OnNotGreaterThanGotoBlockID, "NoError", Val2, Val1 </FONT></LI>
<LI type="circle"><FONT color="#800080">C, OnNotGreaterThanGotoBlockID, "NoError", 100, 500 </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, OnNotGreaterThanGotoBlockID, "NoError", ^Val1, ^Val2 </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BlockID</B><BR/><short_desc xmlns=""> 
                 The name of the block to Goto.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>Value1</B><BR/><short_desc xmlns=""> 
                 The value expected to be NOT greater than VALUE2.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>Value2</B><BR/><short_desc xmlns=""> 
                 The value expected to be equal or greater than VALUE1.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>CaseSensitive</B><BR/><short_desc xmlns=""> 
                 Set to 'CaseInsensitive' so comparisons are NOT case-sensitive.
                 Comparisons are case-sensitive by default.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OnNotInRangeGotoBlockID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, OnNotInRangeGotoBlockID, "NoError", Val11, Val21, Val31 </FONT></LI>
<LI type="circle"><FONT color="#800080">C, OnNotInRangeGotoBlockID, "NoError", 100, 200, 500 </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, OnNotInRangeGotoBlockID, "NoError", ^Val1, ^Val2, ^Val3 </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BlockID</B><BR/><short_desc xmlns="">
                 The name of the block to Goto.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>Value1</B><BR/><short_desc xmlns="">
                 The value to be compared.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>Value2</B><BR/><short_desc xmlns="">
                 The low end of range to be compared against.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Value3</B><BR/><short_desc xmlns="">
                 The high end of range to be compared against.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>CaseSensitive</B><BR/><short_desc xmlns=""> 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OnNotLessThanGotoBlockID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, OnNotLessThanGotoBlockID, "NoError", Val2, Val1 </FONT></LI>
<LI type="circle"><FONT color="#800080">C, OnNotLessThanGotoBlockID, "NoError", Val1, Val1 </FONT></LI>
<LI type="circle"><FONT color="#800080">C, OnNotLessThanGotoBlockID, "NoError", Val1, Val2 </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, OnNotLessThanGotoBlockID, "NoError", 200, 100 </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BlockID</B><BR/><short_desc xmlns=""> 
                 The name of the block to Goto.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>Value1</B><BR/><short_desc xmlns=""> 
                 The value that should be NOT less than VALUE2.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>Value2</B><BR/><short_desc xmlns=""> 
                 The value that should be equal or less than VALUE1.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>CaseSensitive</B><BR/><short_desc xmlns=""> 
                 Set to 'CaseInsensitive' so string comparisons are NOT case-sensitive.
                 String Comparisons are case-sensitive by default.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OnPartialMenuItemContainsStateGotoBlockID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, OnMenuItemContainsStateGotoBlockID, "NoError", MainWindow, MainWindow, "View-&gt;Error", "Disabled" </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BlockID</B><BR/><short_desc xmlns=""> 
                   The name of the block to transfer control to if state is 
                   part of the state information of the menuitem.
                </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>WindowName</B><BR/><short_desc xmlns=""> 
                   The window name.
                </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>ComponentName</B><BR/><short_desc xmlns=""> 
                   The component name.
                </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>MenuItem</B><BR/><short_desc xmlns=""> 
                   Menu-&gt;MenuItem hierarchy string to identify which menu item                              to test. This menu hierarchy is case-sensitive.
                   to test. This menu hierarchy is case-sensitive.
                </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>State</B><BR/><short_desc xmlns=""> 
                   Expected status string (or part thereof) to verify. 
		   Ex: "Enabled Checked" OR "Disabled Grayed" etc. Each item 
		   separated by a space will be evaluated separately so the order 
		   of the status items does not matter. These status items are 
		   case-sensitive.
                </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OnRegistryKeyExistGotoBlockID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WSupport' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='WSupport' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, OnRegistryKeyExistGotoBlockID, IBM_BLOCK, "HKLM\Software\Rational Software\Rational Test\8", "Install Directory", 0</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, OnRegistryKeyExistGotoBlockID, RJ_INSTALLED, "HKLM\Software\Rational Software\Rational Test\8", "Rational FT Install Directory"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BlockID</B><BR/><short_desc xmlns="">
                 The name of the block to Goto.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>Key</B><BR/><short_desc xmlns="">
                 The Registry Key to seek.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>KeyValue</B><BR/><short_desc xmlns="">
                 The optional Registry subkey value to seek.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 The value name under the parent key.  If not provided then we just 
                 check to see if the provided parent key exists.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>TimeOut</B><BR/><short_desc xmlns="">
                 Timeout value in seconds before exiting automatically (no branch).
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OnRegistryKeyNotExistGotoBlockID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WSupport' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='WSupport' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, OnRegistryKeyNotExistGotoBlockID, NO_RATIONAL, "HKLM\Software\Rational Software\Rational Test\8", "Install Directory", 0</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, OnRegistryKeyNotExistGotoBlockID, NO_RFT, "HKLM\Software\Rational Software\Rational Test\8", "Rational FT Install Directory"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>BlockID</B><BR/><short_desc xmlns="">
                 The name of the block to Goto.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>Key</B><BR/><short_desc xmlns="">
                 The Registry Key to seek.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>KeyValue</B><BR/><short_desc xmlns="">
                 The optional Registry subkey value to seek.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 The value name under the parent key.  If not provided then we just 
                 check to see if the provided parent key exists.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>TimeOut</B><BR/><short_desc xmlns="">
                 Timeout value in seconds before exiting automatically (no branch).
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetExitTableBlock</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, SetExitTableBlock, "ProcessExit"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SetExitTableBlock, ""</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [3]:<B>BlockID</B><BR/><short_desc xmlns=""> 
                 The name of the block to Goto when ExitTable is encountered.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetGeneralScriptFailureBlock</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, SetGeneralScriptFailureBlock, "ErrorHandler"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SetGeneralScriptFailureBlock, ""</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [3]:<B>BlockID</B><BR/><short_desc xmlns=""> 
                 The name of the block to Goto on status GeneralScriptFailure.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetInvalidFileIOBlock</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, SetInvalidFileIOBlock, "IOHandler"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SetInvalidFileIOBlock, ""</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [3]:<B>BlockID</B><BR/><short_desc xmlns=""> 
                 The name of the block to Goto on status InvalidFileIO.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetNoScriptFailureBlock</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, SetNoScriptFailureBlock, "NoError"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SetNoScriptFailureBlock, ""</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [3]:<B>BlockID</B><BR/><short_desc xmlns=""> 
                 The name of the block to Goto on status NoScriptFailure.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetScriptNotExecutedBlock</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, SetScriptNotExecutedBlock, "AbortHandler"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SetScriptNotExecutedBlock, ""</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [3]:<B>BlockID</B><BR/><short_desc xmlns=""> 
                 The name of the block to Goto on status ScriptNotExecuted.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetScriptWarningBlock</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, SetScriptWarningBlock, "WarningHandler"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SetScriptWarningBlock, ""</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [3]:<B>BlockID</B><BR/><short_desc xmlns=""> 
                 The name of the block to Goto on status ScriptWarning.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>UseLocalFlowControl</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, UseLocalFlowControl</FONT></LI>
<LI type="circle"><FONT color="#800080">C, UseLocalFlowControl, TRUE</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, UseLocalFlowControl, FALSE</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [3]:<B>State</B><BR/><short_desc xmlns=""> 
                 The TRUE or FALSE value to use.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 If no value is provided then "TRUE" will be assumed.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>DDDriverLogCommands</B>
</FONT>
<UL>
<LI type="circle"><A HREF="DDDriverLogCommands.htm" target="_blank">
<FONT color="#000000">DDDriverLogCommands Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>LogFailureOK</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C  LogFailureOK  "Values should not match."</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C  LogFailureOK  "Throw exception."  "Data is out of bounds."</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Message</B><BR/><short_desc xmlns="">
              The message to log.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Details</B><BR/><short_desc xmlns="">
              Additional detail to add to the message.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>LogMessage</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C  LogMessage  "Starting Test 1"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C  LogMessage  "Starting Test 1"  "Start Login Tests"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Message</B><BR/><short_desc xmlns="">
              The message to log.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Details</B><BR/><short_desc xmlns="">
              Additional detail to add to the message.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>LogTestFailure</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C  LogTestFailure  "Failed Test 1"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C  LogTestFailure  "Failed Test 1"  "Failed Login Tests"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Message</B><BR/><short_desc xmlns="">
              The message to log.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Details</B><BR/><short_desc xmlns="">
              Additional detail to add to the message.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>LogTestSuccess</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C  LogTestSuccess  "Test 1 Passed"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C  LogTestSuccess  "Test 1 Passed"  "Test 1 is good"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Message</B><BR/><short_desc xmlns="">
              The message to log.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Details</B><BR/><short_desc xmlns="">
              Additional detail to add to the message.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>LogTestWarning</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C  LogTestWarning  "Test 1 may have problems"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C  LogTestWarning  "Test 1 may have problems"  "Test 1 did not complete"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Message</B><BR/><short_desc xmlns="">
              The message to log.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Details</B><BR/><short_desc xmlns="">
              Additional detail to add to the message.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>LogWarningOK</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C  LogWarningOK  "No value specified."</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C  LogWarningOK  "No value specified"  "Using default value."</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>Message</B><BR/><short_desc xmlns="">
              The message to log.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Details</B><BR/><short_desc xmlns="">
              Additional detail to add to the message.</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ResumeLogging</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, ResumeLogging</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, ResumeLogging, MainLog</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [3]:<B>logName</B><BR/><short_desc xmlns=""> 
                 The name of a Log Facility, other than the "current" one, to resume.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 Normally, this parameter would NOT be specified, and thus ALL logging would be resumed. 
                 However, there may be the case that a test is using multiple different logs and the tester 
                 is trying to resume a specific one.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SuspendLogging</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C, SuspendLogging</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SuspendLogging, MainLog</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [3]:<B>logName</B><BR/><short_desc xmlns=""> 
                 The name of a Log Facility if other than the "current" one.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 Normally, this parameter would NOT be specified, and thus ALL logging would be suspended. 
                 However, there may be the case that a test is using multiple different logs and the tester 
                 is trying to suspend a specific one.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>DDDriverStringCommands</B>
</FONT>
<UL>
<LI type="circle"><A HREF="DCDriverStringCommands.htm" target="_blank">
<FONT color="#000000">DDDriverStringCommands Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>CleanString</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, cleanString, "a^Abcd", var
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>sourceString</B><BR/><short_desc xmlns="">
              sourceString (could come from a ^variable)
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>resultVar</B><BR/><short_desc xmlns="">
              the resultVar to place the result of the
              operation into
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Compare</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, Compare, "abc", "abcd", var
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>sourceString</B><BR/><short_desc xmlns="">
              sourceString (could come from a ^variable)
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>dstString</B><BR/><short_desc xmlns="">
              dstString (could come from a ^variable)
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>resultVar</B><BR/><short_desc xmlns="">
              the resultVar to place the result of the
              operation into
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Concatenate</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, Concatenate, "abc", "def", var
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>string1</B><BR/><short_desc xmlns="">
              string1 (could come from a ^variable)
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>string2</B><BR/><short_desc xmlns="">
              string2 (could come from a ^variable)
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>resultVar</B><BR/><short_desc xmlns="">
              the resultVar to place the result of the
              operation into
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetField</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, getTrimmedField, "a|bc|d", 1, "|", var
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>InputString</B><BR/><short_desc xmlns="">
              The input string which contains the field to be returned
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>index</B><BR/><short_desc xmlns="">
              0-based index of which field to return
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>delimiter</B><BR/><short_desc xmlns="">
              delimiter(s) - one or more single characters used as delimiters
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>resultVar</B><BR/><short_desc xmlns="">
              the variable name to store the returned field in
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetFieldCount</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, GetFieldCount, "a|bc|d", 0, "|", var
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>String1</B><BR/><short_desc xmlns="">
              String1 to parse and count fields
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>startindex</B><BR/><short_desc xmlns="">
              0-based startindex for parsing the string.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>delimiters</B><BR/><short_desc xmlns="">
              delimiters -- each character is treated as a separate delimiter.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>resultVar</B><BR/><short_desc xmlns="">
              the resultVar to place the result of the
              operation into
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetFixedWidthField</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, getFixedWidthField, "abcdef", 1, 2, var
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>sourceString</B><BR/><short_desc xmlns="">
              sourceString (could come from a ^variable)
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>fieldID</B><BR/><short_desc xmlns="">
              0-based field to retrieve.
              from 0.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>fixedwidth</B><BR/><short_desc xmlns="">
              the fixedwidth alotted for each field in the record
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>resultVar</B><BR/><short_desc xmlns="">
              the resultVar to place the result of the
              operation into
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetMultiDelimitedField</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, GetMultiDelimitedField, "a-&gt;b-&gt;c-&gt;d-&gt;e-&gt;f&gt;", 2, 5, "-&gt;", "field"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>sourceString</B><BR/><short_desc xmlns="">
              Source string in which to search for first delimited character</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>FieldID</B><BR/><short_desc xmlns="">
              The one based index of the field to find and return.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>StartIndex</B><BR/><short_desc xmlns="">
              Integer (1-based) start position for search in sourceString</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Delimiters</B><BR/><short_desc xmlns="">
              String list of delimiters to find</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ResultVar</B><BR/><short_desc xmlns="">
              <p>Name of DDVariable that will receive the result.</p>
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetMultiDelimitedFieldCount</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C, GetMultiDelimitedFieldCount, string1, index, delimiter,  "result"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>String1</B><BR/><short_desc xmlns="">
              Source String in which to search for first delimited character</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>StartIndex</B><BR/><short_desc xmlns="">
              Integer (1-based) start position for search in inputRecord</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>Delimiters</B><BR/><short_desc xmlns="">
              String list of delimiters to find</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ResultVar</B><BR/><short_desc xmlns="">
              <p>Name of DDVariable to receive the result</p>
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetNextDelimiterIndex</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, GetNextDelimiterIndex, "a/|/", 0, "|/", var
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>String1</B><BR/><short_desc xmlns="">
              String1 to parse for field delimiters
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>startindex</B><BR/><short_desc xmlns="">
              0-based startindex to begin parsing the string.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>delimiters</B><BR/><short_desc xmlns="">
              delimiters -- each character is treated as a separate delimiter.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>resultVar</B><BR/><short_desc xmlns="">
              the resultVar to place the result of the
              operation into
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetREDelimitedField</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
            C, GetREDelimitedField, "All is    well in      the  world", 4, "\s+", var
          </FONT></LI>
<LI type="circle"><FONT color="#800080">
            C, GetREDelimitedField, "RedXXOrangeXXYellowXXGreenXXBlueXXIndigoXXViolet", 2, "XX", var
          </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
            C, GetREDelimitedField, "a|b&amp;cd-efghi", 3, "[\|&amp;\-g]", var
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>InputString</B><BR/><short_desc xmlns="">
              The input string to analyze.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>index</B><BR/><short_desc xmlns="">
		    1-based index of the field to return from the input string.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>RegExp</B><BR/><short_desc xmlns="">
              RegExp - This string contains a regular expression used as the delimiter(s). These should conform to the regular expressions defined in "java.util.regex.Pattern" documentation.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>resultVar</B><BR/><short_desc xmlns="">
              resultVar contains the requested field from the input string.
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetREDelimitedFieldCount</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
            C, GetREDelimitedFieldCount, "All is    well in      the  world", 4, "\s+", var
          </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
            C, GetREDelimitedFieldCount, "a|b&amp;cd-efghi", 0, "[\|&amp;\-g]", var
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>InputString</B><BR/><short_desc xmlns="">
              The input string to analyze.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>index</B><BR/><short_desc xmlns="">
	        0-based index of where to start the analysis from. 
	        The index should be less than or equal to the length of the input string.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>RegExp</B><BR/><short_desc xmlns="">
              RegExp - This string contains a regular expression used as the delimiter(s). These should conform to the regular expressions defined in "java.util.regex.Pattern" documentation.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>resultVar</B><BR/><short_desc xmlns="">
              resultVar contains the number of fields in the input string.
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetSubstringsInString</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">C GetSubstringsInString "XaaaB" ^regexstart="X" ^regexstop="B" ^VarName="MyVar"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>String</B><BR/><short_desc xmlns=""> 
                  String to search for substring.
               </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>RegexStart</B><BR/><short_desc xmlns=""> 
                  The starting regular expression.  Should not be empty.
               </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>RegexStop</B><BR/><short_desc xmlns=""> 
                  The stopping regular expression.  Should not be empty.
               </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>VarName</B><BR/><short_desc xmlns=""> 
                  The name of the variable to contain the substring.  
               </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetSystemEnviron</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, GetSystemEnviron, "OS", var
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>string1</B><BR/><short_desc xmlns="">
              String1
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>resultVar</B><BR/><short_desc xmlns="">
              the resultVar to place the result of the
              operation into
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetSystemUser</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, GetSystemUser, var
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>resultVar</B><BR/><short_desc xmlns="">
              the resultVar to place the USERID into
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetTrimmedField</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, getTrimmedField, "a|bc|d", 1, "|", var
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>string1</B><BR/><short_desc xmlns="">
              string1
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>index</B><BR/><short_desc xmlns="">
              0-based index of which field to grab
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>delimiter</B><BR/><short_desc xmlns="">
              delimiter
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>resultVar</B><BR/><short_desc xmlns="">
              the resultVar to place the result of the
              operation into
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Index</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, Index, 0, "abc", "bc", var
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>start</B><BR/><short_desc xmlns="">
              0-based starting offset of the sourceString to search
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>sourceString</B><BR/><short_desc xmlns="">
              sourceString (could come from a ^variable)
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>findString</B><BR/><short_desc xmlns="">
              findString (could come from a ^variable)
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>resultVar</B><BR/><short_desc xmlns="">
              the resultVar to place the result of the
              operation into
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Left</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, Left, abc, 1, ^resultString
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>sourceString</B><BR/><short_desc xmlns="">
              sourceString (could come from a ^variable)
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>length</B><BR/><short_desc xmlns="">
              number of chars to copy
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>resultVar</B><BR/><short_desc xmlns="">
              the resultVar to place the result of the
              operation into
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>LeftTrim</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, LeftTrim, " abc", var
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>sourceString</B><BR/><short_desc xmlns="">
              sourceString (could come from a ^variable)
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>resultVar</B><BR/><short_desc xmlns="">
              the resultVar to place the result of the
              operation into
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Length</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, Length, "abc", lengthVar
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>sourceString</B><BR/><short_desc xmlns="">
              sourceString (could come from a ^variable)
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>resultVar</B><BR/><short_desc xmlns="">
              the resultVar to place the result of the length
              operation into
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Replace</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, Replace, "abc", "bc", "234", var
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>sourceString</B><BR/><short_desc xmlns="">
              sourceString (could come from a ^variable)
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>findString</B><BR/><short_desc xmlns="">
              findString (could come from a ^variable)
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>replaceString</B><BR/><short_desc xmlns="">
              replaceString (could come from a ^variable)
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>resultVar</B><BR/><short_desc xmlns="">
              the resultVar to place the result of the
              operation into
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Right</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, Right, "abc", 2, var
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>sourceString</B><BR/><short_desc xmlns="">
              sourceString (could come from a ^variable)
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>length</B><BR/><short_desc xmlns="">
              length
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>resultVar</B><BR/><short_desc xmlns="">
              the resultVar to place the result of the
              operation into
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightTrim</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, RightTrim, "abc ", var
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>sourceString</B><BR/><short_desc xmlns="">
              sourceString (could come from a ^variable)
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>resultVar</B><BR/><short_desc xmlns="">
              the resultVar to place the result of the
              operation into
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SubString</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, SubString, "abc", 1, 1, var
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>sourceString</B><BR/><short_desc xmlns="">
              sourceString (could come from a ^variable)
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>start</B><BR/><short_desc xmlns="">
              starting 0-based offset character position
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [5]:<B>length</B><BR/><short_desc xmlns="">
              number of chars to copy.  If not provided or less than 1 then all characters after the start index will be retrieved.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>resultVar</B><BR/><short_desc xmlns="">
              the resultVar to place the result of the
              operation into
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ToLowerCase</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, ToLowerCase, "ABC", var
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>sourceString</B><BR/><short_desc xmlns="">
              sourceString (could come from a ^variable)
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>resultVar</B><BR/><short_desc xmlns="">
              the resultVar to place the result of the
              operation into
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ToUpperCase</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, ToUpperCase, "abc", var
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>sourceString</B><BR/><short_desc xmlns="">
              sourceString (could come from a ^variable)
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>resultVar</B><BR/><short_desc xmlns="">
              the resultVar to place the result of the
              operation into
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Trim</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
            C, Trim, " abc ", var
          </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>sourceString</B><BR/><short_desc xmlns="">
              sourceString (could come from a ^variable)
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>resultVar</B><BR/><short_desc xmlns="">
              the resultVar to place the result of the
              operation into
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>DDDriverTimerCommands</B>
</FONT>
<UL>
<LI type="circle"><A HREF="DCDriverTimerCommands.htm" target="_blank">
<FONT color="#000000">DDDriverTimerCommands Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>ResetTimer</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
                    C, ResetTimer, exampleTimer
                    </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>timerName</B><BR/><short_desc xmlns="">
                        timerName (should be unique)
                        </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>StartTimer</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
                    C, StartTimer, exampleTimer
                    </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
                    C, StartTimer, exampleTimer, 30
                    </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>timerName</B><BR/><short_desc xmlns="">
                        timerName (should be unique)
                        </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>verifyValue</B><BR/><short_desc xmlns="">
                        verifyValue will be used to verify the timer was less then then given value. If the parameter isn't given then no check will occur.
                        </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>StopTimer</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
                    C, StopTimer, exampleTimer
                    </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>timerName</B><BR/><short_desc xmlns="">
                        timerName (should be unique)
                        </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>StoreTimerInfo</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
                    C, StoreTimerInfo, exampleTimer, TimerVar
                    </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>timerName</B><BR/><short_desc xmlns="">
                        timerName (should be unique)
                        </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>variable</B><BR/><short_desc xmlns="">
                        variable to store time information in.
                        </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>StoreTimerInfoFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
                    C, StoreTimerInfoFile, exampleTimer, "c:\temp\temp.csv"
                    </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>timerName</B><BR/><short_desc xmlns="">
                        timerName (should be unique)
                        </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>fileLoc</B><BR/><short_desc xmlns="">
                        fileLoc is the location of the file to write (including filename). If an absolute path is given then it is used other wise the default path is SAFS Project Directory. If the file exists it is just appended to.
                        </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyElapsedTimeInRange</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
                    C, VerifyElapsedTimeInRange, exampleTimer, 10, 30
                    </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>timerName</B><BR/><short_desc xmlns="">
                        timerName (should be unique)
                        </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>verifyValue1</B><BR/><short_desc xmlns="">
                        verifyValue1 will be used as the lower bounds of the check.
                        </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    5 :<B>verifyValue2</B><BR/><short_desc xmlns="">
                        verifyValue2 will be used as the higher bounds of the check.
                        </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyElapsedTimeIsLess</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
                    C, VerifyElapsedTimeIsLess, exampleTimer, 10
                    </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>timerName</B><BR/><short_desc xmlns="">
                        timerName (should be unique)
                        </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>verifyValue</B><BR/><short_desc xmlns="">
                        verifyValue will be used to as the check value.
                        </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyElapsedTimeIsMore</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
                    C, VerifyElapsedTimeIsMore, exampleTimer, 10
                    </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>timerName</B><BR/><short_desc xmlns="">
                        timerName (should be unique)
                        </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>verifyValue</B><BR/><short_desc xmlns="">
                        verifyValue will be used to as the check value.
                        </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyTimer</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS Driver Commands'>SDC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">
                    C, VerifyTimer, exampleTimer 10
                    </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">
                    C, VerifyTimer, exampleTimer
                    </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>timerName</B><BR/><short_desc xmlns="">
                        timerName (should be unique)
                        </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>verifyValue</B><BR/><short_desc xmlns="">
                        verifyValue will be used to as the check value. If nothing is given then the value given during StartTimer will be use, if nothing was given then the value -1 is used.
                        </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>DDDriverDeprecatedCommands</B>
</FONT>
<UL>
<LI type="circle"><A HREF="DDDriverDeprecatedCommands.htm" target="_blank">
<FONT color="#000000">DDDriverDeprecatedCommands Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>EndRequirement</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C  EndRequirement  Requirement1</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C  EndRequirement</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [3]:<B>RequirementID</B><BR/><short_desc xmlns="">
              The user-defined ID of the Requirement</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              The user-defined ID of the Requirement. The last Requirement provided with the 
              SetRequirement command will be handled by default.</detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>EndTestcase</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C  EndTestcase  TestCase1</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C  EndTestcase</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [3]:<B>TestCaseID</B><BR/><short_desc xmlns="">
              The user-defined ID of the Testcase.</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              The user-defined ID of the Testcase. The last TestCase provided with the 
              SetTestcase command will be handled by default.</detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetVariableValueEx</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C,  GetVariableValueEx,  srcvar, destvar </FONT></LI>
<LI type="circle"><FONT color="#800080">C,  GetVariableValueEx,  ^srcvarname, ^destvarname </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C,  GetVariableValueEx,  ^basename &amp; ^index, destvar </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>SourceVariable</B><BR/><short_desc xmlns=""> 
                 The name of the variable to retrieve the value of
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    4 :<B>DestinationVariable</B><BR/><short_desc xmlns=""> 
                 The name of the variable to hold the retrieved value
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetRequirement</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C  SetRequirement  Requirement1</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C  SetRequirement  Requirement1  "It Must Compile"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>RequirementID</B><BR/><short_desc xmlns="">
              The user-defined ID of the Requirement</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Description</B><BR/><short_desc xmlns="">
              A description of the Requirement</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetTestcase</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">C  SetTestcase  TestCase1</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C  SetTestcase  TestCase1  "It Must Compile"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    3 :<B>TestCaseID</B><BR/><short_desc xmlns="">
              The user-defined ID of the Testcase.</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [4]:<B>Description</B><BR/><short_desc xmlns="">
              A description of the Testcase</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<BR/>
<A name="component_functions"/>
<LI><U><STRONG>COMPONENT FUNCTIONS:</STRONG></U>
<UL>
<LI type="square"><FONT color="#0000FF"><STRONG>Generally, Component Function
		        Data/Step tests (RecordTypes = "T", "TW", "TF")</STRONG></FONT><BR/>
<SMALL>(T=Test; W=Warning Expected\Allowed; F=Failure Expected\Allowed)</SMALL>
<FONT color="#0000FF"><STRONG> formatted as: </STRONG></FONT><SMALL> (expand to view)</SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WindowID, WindowID,
			        AWindowAction, Param1, ...</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WindowID, WindowID,
			        AWindowAction</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WindowID, ComponentID,
				AComponentAction, Param1, ...</FONT></LI>
<LI><FONT color="#800080">T, WindowID, ComponentID, AComponentAction</FONT>
<UL>
<LI type="circle"><FONT color="#008000">Field  2 : TQ Reference
				        for the Window to have context.<BR/>
					Field  3 : TQ Reference for the Component in Window to have
					context.<BR/>
					Field  4 : TQ Reference.  The Action to perform on the
					Window/Component.<BR/>
					Field [5-N]: TQ String  Zero or more parameters for the
					selected Action.<BR/>
					(If the Window itself receives the action then Fields 2 and 3 will
					be the same.)<BR/>
</FONT></LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>CheckBoxFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="CheckBoxFunctions.htm" target="_blank">
<FONT color="#000000">CheckBoxFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>Check</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, Checkbox, CHECK</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Click</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, Checkbox, CLICK</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>UnCheck</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, Checkbox, UNCHECK</FONT></LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>ComboBoxFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="ComboBoxFunctions.htm" target="_blank">
<FONT color="#000000">ComboBoxFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>CaptureItemsToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T, WINDOW, ComboBox, CaptureItemsToFile , afile.txt
					</FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ComboBox, CaptureItemsToFile , afile.txt, "UTF-8"
					</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>FileName</B><BR/><short_desc xmlns="">
							File name (if not absolute, then to test dir)
						</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
							File name (if not absolute, then to test dir)
						</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>FileEncoding</B><BR/><short_desc xmlns="">
							Specify a character encoding to be used when saving data to a file.
							If it is not specified, the system default file encoding will be used.
							The encoding should be a valid string supported by Java; if it is
							not valid, the system default file encoding will be used instead.
						</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Click</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ComboBox, CLICK</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>HideList</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ComboBox, HideList</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Select</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ComboBox, SELECT, "MySelection"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ComboBox, SELECT, "MySelection", "true"
					</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns="">
							The case-sensitive item in the drop down list to select.
						</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>ForceRefresh</B><BR/><short_desc xmlns="">
							Force refreshing to update stale element after selection.
						</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectIndex</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ComboBox, SELECTINDEX, "1"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ComboBox, SELECTINDEX, "1", "true"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>IndexValue</B><BR/><short_desc xmlns="">
							The item index in the drop down list to select.
						</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
							Some combo lists are 0-based (start with 0). Some are 1-based (start with 1).
							The user will have to determine the index base for their particular combo list.
							<br>
							It would appear that HTML Combo lists are 1-based.
						</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>ForceRefresh</B><BR/><short_desc xmlns="">
							Force refreshing to update stale element after selection.
						</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectPartialMatch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ComboBox, SelectPartialMatch,
						"ATextSubstring"
					</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ComboBox, SelectPartialMatch, "ATextSubstring", "true"
					</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns="">
							The case-sensitive substring of an item in the drop down list to select.
						</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>ForceRefresh</B><BR/><short_desc xmlns="">
							Force refreshing to update stale element after selection.
						</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectUnverified</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ComboBox, SELECTUNVERIFIED, "MySelection"
					</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ComboBox, SELECTUNVERIFIED, "MySelection",
						"true"
					</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns="">
							The case-sensitive item in the drop down list to select.
						</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>ForceRefresh</B><BR/><short_desc xmlns="">
							Force refreshing to update stale element after selection.
						</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectUnverifiedPartialMatch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ComboBox, SelectUnverifiedPartialMatch, "ATextSubstring"
					</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ComboBox, SelectUnverifiedPartialMatch, "ATextSubstring", "true"
					</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns="">
							The case-sensitive substring of an item in the drop down list to select.
						</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>ForceRefresh</B><BR/><short_desc xmlns="">
							Force refreshing to update stale element after selection.
						</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetTextValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ComboBox, SETTEXTVALUE, "MyPassword"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>TextValue</B><BR/><short_desc xmlns="">
							The text that will be typed into the ComboBox.
						</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
							TextValue will be the text that will be typed into the Combobox.
							Quoted text may be used to ensure proper expected value retrieval.
							There is also no check for a missing field because that would be
							the same as specifying no text ("")--which is valid.
						</detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetUnverifiedTextValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ComboBox, SETUNVERIFIEDTEXTVALUE, "MyPassword"
					</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>TextValue</B><BR/><short_desc xmlns="">
							The text that will be typed into the ComboBox.
						</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
							TextValue will be the text that will be typed into the Combobox.
							Quoted text may be used to ensure proper expected value retrieval.
							There is also no check for a missing field because that
							would be the same as specifying no text ("")--which is valid.
						</detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ShowList</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ComboBox, ShowList</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifySelected</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ComboBox, VerifySelected, "ATextSubstring"
					</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns="">
							The case-sensitive substring to compare.
						</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>ComboEditBoxFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="ComboEditBoxFunctions.htm" target="_blank">
<FONT color="#000000">ComboEditBoxFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>Click</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ComboEditBox, CLICK</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Select</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ComboEditBox, SELECT, "MySelection"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 The case-sensitive item in the drop down list to select.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectIndex</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ComboEditBox, SELECTINDEX, "1"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>IndexValue</B><BR/><short_desc xmlns=""> 
                 The item index in the drop down list to select.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectPartialMatch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ComboEditBox, SelectPartialMatch, "ATextSubstring"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 The case-sensitive substring of an item in the drop down list to select.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetTextValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ComboEditBox, SETTEXTVALUE,  "MyPassword"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>TextValue</B><BR/><short_desc xmlns=""> 
             The text that will be typed into the ComboEditBox.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
             TextValue will be the text that will be typed into the ComboEditBox.
                 Quoted text may be used to ensure proper expected value retrieval.
                 There is also no check for a missing field because that would be
                 the same as specifying no text ("")--which is valid.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetUnverifiedTextValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ComboEditBox, SETUNVERIFIEDTEXTVALUE,  "MyPassword"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>TextValue</B><BR/><short_desc xmlns=""> 
             The text that will be typed into the ComboEditBox.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
             TextValue will be the text that will be typed into the ComboEditBox.
                 Quoted text may be used to ensure proper expected value retrieval.
                 There is also no check for a missing field because that would be
                 the same as specifying no text ("")--which is valid.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>ComboListBoxFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="ComboListBoxFunctions.htm" target="_blank">
<FONT color="#000000">ComboListBoxFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>Select</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, Window, ComboListBox, SELECT, "my text"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 The case-sensitive text item to select
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
               TextValue should contain the case-sensitive text item to select.
               You can enclose this text in double-quotes to ensure proper retrieval.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectIndex</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ComboListBox, SELECTINDEX, "1"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>IndexValue</B><BR/><short_desc xmlns=""> 
                 The item index in the exposed list to select.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>DatabaseFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="DatabaseFunctions.htm" target="_blank">
<FONT color="#000000">DatabaseFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>CopyDBTableColumnToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, ADBAlias, ATableAlias, CopyDBTableColumnToFile, Data Source Name (dsn), ^OutputFileName, ^SQLQuery, [^OutputDirectory], ^sqlStatus, "[Delimiter]", "[UID]", "[PWD]", "[prompt]"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>FileOut</B><BR/><short_desc xmlns=""> 
                 Name of the output file. 
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>SQLQuery</B><BR/><short_desc xmlns=""> 
                 The file will contain the results of the executed Query. The query is NOT validated 
                 by this function.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>DirectoryOut</B><BR/><short_desc xmlns=""> 
                 OPTIONAL parameter. If not specified the file will be stored under the 
                 project "Datapool\Test\" directory.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    9 :<B>SQLStatus</B><BR/><short_desc xmlns=""> 
                 A variable which holds the current SQL run status.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>Delimiter</B><BR/><short_desc xmlns=""> 
                 Optional Delimiter to be used between columns written to file.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [11]:<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [12]:<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [13]:<B>Prompt</B><BR/><short_desc xmlns=""> 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CopyDBTableToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, ADBAlias, ATableAlias, CopyDBTableToFile, Data Source Name (dsn), ^OutputFileName, tableName, [^ColumnCount],[^rowCount], [^SQLQuery], [^Delimiter], [^OutputDirectory], ^sqlStatus, "[UID]", "[PWD]", "[prompt]"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>FileOut</B><BR/><short_desc xmlns=""> 
                 Name of the output file. 
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>DBTableName</B><BR/><short_desc xmlns=""> 
                 Name of the TABLE to access within the DBSourceName
           </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>ColumnCount</B><BR/><short_desc xmlns=""> 
                 If specified the output file will contain only the number of columns specified.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> <p>
                 OPTIONAL parameter. If specified the output file will contain only the
                 number of columns specified. This number will become the first dimension
                 of the retreival array. If NOT specified the function will copy a maximum
                 of 100 columns. (arbitrary limit for now)
              </p></detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>RowCount</B><BR/><short_desc xmlns=""> 
                 If specified the output file will contain only the number of rows specified. 
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> <p>
                 OPTIONAL parameter. If specified the output file will contain only the
                 number of columns specified. This number will become the first dimension
                 of the retreival array. If NOT specified the function will copy a maximum
                 of 100 columns. (arbitrary limit for now)
              </p></detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>SQLQuery</B><BR/><short_desc xmlns=""> 
                 OPTIONAL parameter. If specified, the file will contain the results of the
                 executed Query. The query is NOT validated by this function.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [11]:<B>delimiter</B><BR/><short_desc xmlns=""> 
                 OPTIONAL parameter. If not specified the default ',' seperator will be used.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [12]:<B>DirectoryOut</B><BR/><short_desc xmlns=""> 
                 OPTIONAL parameter. If not specified the file will be stored under the 
                 project "Datapool\Test\" directory.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    13 :<B>SQLStatus</B><BR/><short_desc xmlns=""> 
                 A variable which holds the current SQL run status.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [14]:<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [15]:<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [16]:<B>Prompt</B><BR/><short_desc xmlns=""> 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DeleteDBTableRecords</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, ADBAlias, ATableAlias, DeleteDBTableRecords, Clients, "CID = 25", ContactDatabase, "", "",""</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>DBTableName</B><BR/><short_desc xmlns=""> 
                 Name of the TABLE to access within the DBSourceName</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>DBQueryCond</B><BR/><short_desc xmlns=""> 
                 Expression allowed by the WHERE clause of the DELETE FROM sentence of the SQL driver
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the DELETE FROM sentence of the SQL driver
                 you are using. For example: "CliBal &gt; 100000 and CliCat = 'C'".<br>
                 "where" will be added to any expression if it is not provided.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>Prompt</B><BR/><short_desc xmlns=""> 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ExecSQLCommit</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, ADBAlias, ATableAlias, ExecSQLCommit, Data Source Name (dsn), ^sqlStatus, "[UID]", "[PWD]"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>SQLStatus</B><BR/><short_desc xmlns=""> 
                 A variable which holds the current SQL run status.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ExecSQLQuery</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, ADBAlias, ATableAlias, ExecSQLQuery, empODBC, "UPDATE Employee Set City = 'Pittsburgh' Where EmpID = '0023' ", ^sqlStatus, "", "", ""</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>queryStr</B><BR/><short_desc xmlns=""> 
                 Actual query stored in a ^queryStr.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>SQLStatusCode</B><BR/><short_desc xmlns=""> 
                 SQL status code as a result of executing the query.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>Prompt</B><BR/><short_desc xmlns=""> 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetDBTableColumnCount</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, ADBAlias, ATableAlias, GetDBTableColumnCount, empODBC, Employee, ^columnCount, ^sqlStatus, "", "", ""</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>DBTableName</B><BR/><short_desc xmlns=""> 
                 Name of the TABLE to access within the DBSourceName
           </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ColumnCount</B><BR/><short_desc xmlns=""> 
                 SQL result get stored in this return variable.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>SQLStatusCode</B><BR/><short_desc xmlns=""> 
                 SQL status code as a result of executing the query.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [11]:<B>Prompt</B><BR/><short_desc xmlns=""> 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetDBTableRowCount</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, ADBAlias, ATableAlias, GetDBTableRowCount, empODBC, Employee, ^rowCount, ^sqlStatus, "", "", ""</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>DBTableName</B><BR/><short_desc xmlns=""> 
                 Name of the TABLE to access within the DBSourceName
           </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>RowCount</B><BR/><short_desc xmlns=""> 
                 SQL result get stored in this return variable.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>SQLStatusCode</B><BR/><short_desc xmlns=""> 
                 SQL status code as a result of executing the query.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [11]:<B>Prompt</B><BR/><short_desc xmlns=""> 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetDBValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, ADBAlias, ATableAlias, GetDBValue, empODBC, "Select LastName From Employee Where EmpID = '0023'", ^queryResult, ^sqlStatus, "", "", ""</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>queryStr</B><BR/><short_desc xmlns="">
                 Actual query stored in a ^queryStr.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>QueryResult</B><BR/><short_desc xmlns=""> 
                 SQL result get stored in this return variable.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>SQLStatusCode</B><BR/><short_desc xmlns=""> 
                 SQL status code as a result of executing the query.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [11]:<B>Prompt</B><BR/><short_desc xmlns=""> 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyDatabaseNullValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, ADBAlias, ATableAlias, VerifyDatabaseNullValue, LASTNAME, Clients, "CID = 25", ContactDatabase, "", "",""</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>DBFieldName</B><BR/><short_desc xmlns=""> 
                 Name of the FIELD within DBTableName used in the verification
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>DBTableName</B><BR/><short_desc xmlns=""> 
                 Name of the TABLE to access within the DBSourceName</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>DBQueryCond</B><BR/><short_desc xmlns=""> 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal &gt; 100000 and CliCat = 'C'".<br>
                 "where" will be added to any expression if it is not provided.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [11]:<B>Prompt</B><BR/><short_desc xmlns=""> 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyDatabaseValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, ADBAlias, ATableAlias, VerifyDBValue, LASTNAME, Clients, "CID = 25", ContactDatabase, "", "", "Smith",""</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>DBFieldName</B><BR/><short_desc xmlns=""> 
                 Name of the FIELD within DBTableName used in the verification
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>DBTableName</B><BR/><short_desc xmlns=""> 
                 Name of the TABLE to access within the DBSourceName</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>DBQueryCond</B><BR/><short_desc xmlns=""> 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal &gt; 100000 and CliCat = 'C'".<br>
                 "where" will be added to any expression if it is not provided.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    11 :<B>ExpectedValue</B><BR/><short_desc xmlns=""> 
                 Benchmark value to compare against retrieved DBFieldName value
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [12]:<B>Prompt</B><BR/><short_desc xmlns=""> 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyDBNullValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, ADBAlias, ATableAlias, VerifyDBNullValue, LASTNAME, Clients, "CID = 25", ContactDatabase, "", "",""</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>DBFieldName</B><BR/><short_desc xmlns=""> 
                 Name of the FIELD within DBTableName used in the verification
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>DBTableName</B><BR/><short_desc xmlns=""> 
                 Name of the TABLE to access within the DBSourceName</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>DBQueryCond</B><BR/><short_desc xmlns=""> 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal &gt; 100000 and CliCat = 'C'".<br>
                 "where" will be added to any expression if it is not provided.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [11]:<B>Prompt</B><BR/><short_desc xmlns=""> 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyDBValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, ADBAlias, ATableAlias, VerifyDBValue, LASTNAME, Clients, "CID = 25", ContactDatabase, "", "", "Smith",""</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>DBFieldName</B><BR/><short_desc xmlns=""> 
                 Name of the FIELD within DBTableName used in the verification
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>DBTableName</B><BR/><short_desc xmlns=""> 
                 Name of the TABLE to access within the DBSourceName</short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>DBQueryCond</B><BR/><short_desc xmlns=""> 
                 Expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 A query condition can be included, usually it is. It can be any 
                 valid expression allowed by the WHERE clause of the SELECT sentence of the SQL driver
                 you are using. For example: "CliBal &gt; 100000 and CliCat = 'C'".<br>
                 "where" will be added to any expression if it is not provided.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>DBSourceName</B><BR/><short_desc xmlns=""> 
                 Name of the Datasource containing the DBTable
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>UserID</B><BR/><short_desc xmlns=""> 
                 UserID for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>Password</B><BR/><short_desc xmlns=""> 
                 Password for accessing the Datasource (if required).
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [11]:<B>Prompt</B><BR/><short_desc xmlns=""> 
                 Optional parameter valid values 1 - 4 [default is 4 no prompt] for ODBC driver login window.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    12 :<B>ExpectedValue</B><BR/><short_desc xmlns=""> 
                 Benchmark value to compare against retrieved DBFieldName value
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>DatePickerFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="DatePickerFunctions.htm" target="_blank">
<FONT color="#000000">DatePickerFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>GetDate</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, DatePicker, GetDate, currentDate</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VariableName</B><BR/><short_desc xmlns=""> 
                 The name of variable to contain the date string of DatePicker.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 The name of variable to contain the date string of DatePicker.
                 The date string will be in format "MM-dd-yyyy".
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetDate</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, DatePicker, SetDate, "Dec 24 2012"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, DatePicker, SetDate, "04/24/2012"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, DatePicker, SetDate, "04-24-2012"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>DateValue</B><BR/><short_desc xmlns=""> 
                 DateValue to set.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 DateValue to set. It can be in format of "MM-dd-yyyy", "MM/dd/yyyy" or "MMM dd yyyy".
                 When you give it as the first two formats, you MUST quote it; otherwise the character
                 '-' and '/' will be considered as arithmetic sign and the parameter will be calculated
                 as arithmetic expression.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>DotNetMenuFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="org/safs/rational/CFDotNetMenuBar.html" target="_blank">
<FONT color="#000000">DotNetMenuFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>SelectMenuItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, FileMenu, SelectMenuItem</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, FileMenu, SelectMenuItem, "Exit"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, Amenu, SelectMenuItem, "File"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AMenu, SelectMenuItem, "File-&gt;Exit"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, Amenu, SelectMenuItem, "FileOpen"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-insensitive text of menuItem to select OR an App Map reference.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the menuitem to select.
                 Parent-Child relationships are separated by "-&gt;".<br>
                 Alternatively, the TextValue can be an App Map reference item 
                 used in conjunction with the Component Name (field #3) that 
                 allows us to store explicit menu item text in the App Map.
                 <p>
                 In RRAFS, this command will work on both JavaMenu items and 
                 JavaPopupMenu items.</p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectMenuItemContains</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, FileMenu, SelectMenuItemContains, "exi"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AMenu, SelectMenuItemContains, "f-&gt;exit"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-insensitive substring of menuItem to select OR an App Map reference.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 Parent-Child relationships are separated by "-&gt;"<br>
                 Alternatively, the TextValue can be an App Map reference item 
                 used in conjunction with the Component Name (field #3) that 
                 allows us to store explicit menu item text in the App Map.<br>
				 Note: RJ implementation: this field is required.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyMenuItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Window, Menu, VerifyMenuItem, "File"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Window, Menu, VerifyMenuItem, "Weird-&gt;CheckBox", "Enabled Checked"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>MenuItemText</B><BR/><short_desc xmlns=""> 
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to find.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to find.
                This menu hierarchy IS case-sensitive<br>
				TQ String. the full case-sensitive menu item path to select.  
                Ampersands (&amp;) indicating/preceding underlined characters are optional.  
                The text must include the full text including spaces and any visible shortcut key 
                combinations displayed in the text of the menu item.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>ExpectedStatus</B><BR/><short_desc xmlns=""> 
                Expected status string (or part thereof) of the menuitem. 
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Expected status string (or part thereof) to verify.
				Only "Enabled" "Ungrayed" "Grayed" "Disabled" "Checked" "Unchecked" "Menu With N MenuItems" are supported now.  
                <br>Ex: "Enabled Checked"         OR  "Grayed UnChecked"    etc.
                <br>Each item separated by a space will be evaluated separately so 
                the order of the status items does not matter.
				Only the state information of interest needs to be specified.  
                These status items ARE case-insensitive,space-delimited.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyMenuItemContains</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Window, Menu, VerifyMenuItemContains, "Fil-&gt;Sav"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Window, Menu, VerifyMenuItemContains, "Fil-&gt;Sav","Enabled"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>MenuItemText</B><BR/><short_desc xmlns=""> 
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to find.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to find.
                This menu hierarchy IS case-sensitive<br>
				TQ String. the case-sensitive menu item path to select.  
                Ampersands (&amp;) indicating/preceding underlined characters are optional.
				The text can be any substring of the full text including spaces and any visible shortcut key 
                combinations displayed in the text of the menu item.  
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>ExpectedStatus</B><BR/><short_desc xmlns=""> 
                Expected status string (or part thereof) of the menuitem. 
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Expected status string (or part thereof) to verify.
				Only "Enabled" "Ungrayed" "Grayed" "Disabled" "Checked" "Unchecked" "Menu With N MenuItems" are supported now.  
                <br>Ex: "Enabled Checked"         OR  "Grayed UnChecked"    etc.
                <br>Each item separated by a space will be evaluated separately so 
                the order of the status items does not matter.
				Only the state information of interest needs to be specified.  
                These status items ARE case-insensitive,space-delimited.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>DotNetTableFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="DotNetTableFunctions.htm" target="_blank">
<FONT color="#000000">DotNetTableFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>ActivateCell</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, ActivateCell</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, ActivateCell, 3, 4</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ActivateColumnLabel</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, ActivateColumnLabel, "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ColNumber</B><BR/><short_desc xmlns="">
             The 1-based column label number to double click.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>YOffset</B><BR/><short_desc xmlns=""> 
	      (FUTURE) Number of pixels to adjust where the actual double click occurs.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>AssignCellContainsTextRow</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, AssignCellContainsTextRow, Variable, "Date","Time", "09:58 AM", "Change","Change #2","Revision", "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Var</B><BR/><short_desc xmlns=""> 
                The variable which gets assigned the row found.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The variable which gets assigned the row found. If not found then it will get a zero 
                length string.  This variable also is the rootname for the variable that will receive 
                the cell text value once the row # is identified.  The cell value variable will be the  
                user-defined variable +".Value".
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # or header value, identifying the column for extracting the 
                cell value into variable +".Value".
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.
                  <p>
                  The field header comparisons are not case-senstive, and provided values can be substrings 
                  of the actual header value in the table.
                  </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ColN</B><BR/><short_desc xmlns=""> 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.  
                This must be accompanied by the next parameter, 'ValueN', and as many of the
                ColN/ValueN parameter pairs can be supplied as desired in order to match for a row 
                based on cell contents.
                <p>
                The field header comparisons are not case-senstive, and provided values can be substrings 
                of the actual header value in the table.
                </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>ValueN</B><BR/><short_desc xmlns=""> 
                A Value to search for in the 'COLN' column.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                These values can be partial substrings and are not case-sensitive.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>AssignCellTextRow</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, AssignCellTextRow, Variable, "Date","Time", "09:58 AM", "Change","Change #2","Revision", "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Var</B><BR/><short_desc xmlns=""> 
                The variable which gets assigned the row found.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The variable which gets assigned the row found. If not found then it will get a zero 
                length string.  This variable also is the rootname for the variable that will receive 
                the cell text value once the row # is identified.  The cell value variable will be this 
                user-defined variable +".Value".
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # or header value, identifying the column for extracting the 
                cell value into variable +".Value".
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ColN</B><BR/><short_desc xmlns=""> 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.  
                This must be accompanied by the next parameter, 'ValueN', and as many of the
                ColN/ValueN parameter pairs can be supplied as desired in order to match for a row 
                based on cell contents.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>ValueN</B><BR/><short_desc xmlns=""> 
                A Value to search for in the 'COLN' column
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                These values are case-sensitive and must consititute an exact match.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>AssignVariableCellText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, AssignVariableCellText, AVariableName</FONT></LI>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, AssignVariableCellText, "AVariableName", 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, AssignVariableCellText, "^AVariableName", 4, "Field5"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SetVariableValues, ^AVariableName="NextVariableName" <br>
                  T, DotNetWin, DotNetTable, AssignVariableCellText, ^AVariableName, "ADatum", 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VariableName</B><BR/><short_desc xmlns="">
             The name of the variable to receive the property value.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
               The name of the variable to receive the property value.
               Note, if you supply the name of the variable and include the leading
               caret (^) symbol then the variable must be enclosed in quotes.
               Otherwise, that variable will be used like any other variable and the
               substituted value of that variable will be interpretted as the name
               of the variable you wish to use.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>AssignVariableFuzzyCellText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, AssignVariableFuzzyCellText, AVariableName</FONT></LI>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, AssignVariableFuzzyCellText, "AVariableName", 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, AssignVariableFuzzyCellText, "^AVariableName", 4, "field5"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SetVariableValues, ^AVariableName="NextVariableName" <br>
                  T, DotNetWin, DotNetTable, AssignVariableFuzzyCellText, ^AVariableName, "datum", 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VariableName</B><BR/><short_desc xmlns="">
             The name of the variable to receive the property value.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
               The name of the variable to receive the property value.
               Note, if you supply the name of the variable and include the leading
               caret (^) symbol then the variable must be enclosed in quotes.
               Otherwise, that variable will be used like any other variable and the
               substituted value of that variable will be interpretted as the name
               of the variable you wish to use.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.  This command allows for case-insensitive substring 
                matches for row text when used in place of an actual row index.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This command allows for case-insensitive substring 
                matches for header text when used in place of an actual column index.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CaptureFuzzyRangeToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, CaptureFuzzyRangeToFile, AFileName.txt</FONT></LI>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, CaptureFuzzyRangeToFile, AFileName.txt, 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, CaptureFuzzyRangeToFile, AFileName.txt, 4, "field5", 2, 5</FONT></LI>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, CaptureFuzzyRangeToFile, AFileName.txt, "datum", 5, , 2</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, CaptureFuzzyRangeToFile, AFileName.txt, , , , , "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>FileName</B><BR/><short_desc xmlns="">
             The name of the file to receive the data.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  The data will be output as TAB delimited values.
                  The filename is usually just the short filename.ext 
                  and as such will be stored in the project's Datapool\Test 
                  directory.  <br>
                  If you specify a relative path, the path 
                  is relative to the project's root directory.  "Datapool" 
                  is a subdirectory of that root directory.<br>
                  Any specified full or relative path must already exist.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row 
                value in column 1.  
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.  This command allows for case-insensitive 
                substring matches for row text when used in place of an actual row index.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This command allows for case-insensitive 
                substring matches for header text when used in place of an actual column index.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>Rows</B><BR/><short_desc xmlns=""> 
                The number of rows to capture.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                If there are not enough rows to satisfy the request then we 
                will obviously only capture up to the last available row.<br>
                If the parameter is not provided, all subsequent rows from 
                the specified starting row are captured.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>Columns</B><BR/><short_desc xmlns=""> 
                The number of columns to capture.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                If there are not enough columns to satisfy the request then we 
                will obviously only capture up to the last available column.<br>
                If the parameter is not provided, all subsequent columns from 
                the specified starting column are captured.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>FileEncoding</B><BR/><short_desc xmlns="">
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [11]:<B>FilterMode</B><BR/><short_desc xmlns=""> 
                (FUTURE) A file filter to use when processing the text values.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [12]:<B>FilterOptions</B><BR/><short_desc xmlns=""> 
                (FUTURE) Filter options to use with the file filter.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CaptureRangeToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, CaptureRangeToFile, AFileName.txt</FONT></LI>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, CaptureRangeToFile, AFileName.txt, 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, CaptureRangeToFile, AFileName.txt, 4, "Field5", 2, 5</FONT></LI>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, CaptureRangeToFile, AFileName.txt, "ADatum", 5, , 2</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, CaptureRangeToFile, AFileName.txt, , , , , "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>FileName</B><BR/><short_desc xmlns="">
             The name of the file to receive the data.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  The data will be output as TAB delimited values.
                  The filename is usually just the short filename.ext 
                  and as such will be stored in the project's Datapool\Test 
                  directory.  <br>
                  If you specify a relative path, the path 
                  is relative to the project's root directory.  "Datapool" 
                  is a subdirectory of that root directory.<br>
                  Any specified full or relative path must already exist.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>Rows</B><BR/><short_desc xmlns=""> 
                The number of rows to capture.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                If there are not enough rows to satisfy the request then we 
                will obviously only capture up to the last available row.<br>
                If the parameter is not provided, all subsequent rows from 
                the specified starting row are captured.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>Columns</B><BR/><short_desc xmlns=""> 
                The number of columns to capture.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                If there are not enough columns to satisfy the request then we 
                will obviously only capture up to the last available column.<br>
                If the parameter is not provided, all subsequent columns from 
                the specified starting column are captured.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>FileEncoding</B><BR/><short_desc xmlns="">
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [11]:<B>FilterMode</B><BR/><short_desc xmlns=""> 
                (FUTURE) A file filter to use when processing the text values.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [12]:<B>FilterOptions</B><BR/><short_desc xmlns=""> 
                (FUTURE) Filter options to use with the file filter.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickCell</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, CLICKCELL</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, CLICKCELL, 3, 4</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickColumnLabel</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, ClickColumnLabel, "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ColNumber</B><BR/><short_desc xmlns="">
             The 1-based column label number to click.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>YOffset</B><BR/><short_desc xmlns=""> 
	      (FUTURE) Number of pixels to adjust where the actual click occurs.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DoubleClickCell</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, DoubleClickCell</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, DoubleClickCell, 3, 4</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DoubleClickColumnLabel</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, DoubleClickColumnLabel, "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ColNumber</B><BR/><short_desc xmlns="">
             The 1-based column label number to double click.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>YOffset</B><BR/><short_desc xmlns=""> 
	      (FUTURE) Number of pixels to adjust where the actual double click occurs.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightClickCell</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, RightClickCell</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, RightClickCell, 3, 4</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectCell</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, SelectCell</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, SelectCell, 3, 4</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectCellContainsTextFind</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, SelectCellContainsTextFind, Variable, "Date","Time", "09:58 AM", "Change","Change #2","Revision", "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Var</B><BR/><short_desc xmlns=""> 
                The variable which gets assigned the row found.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The variable which gets assigned the row found. If not
                found then it will get a zero length string
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # or header value, identifying the column for the select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.
                <p>
                These comparisons are not case-sensitive and can be substrings of the actual table text.
                </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ColN</B><BR/><short_desc xmlns=""> 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.  
                This must be accompanied by the next parameter, 'ValueN', and as many of the
                ColN/ValueN parameter pairs can be supplied as desired in order to match for a row 
                based on cell contents.
                <p>
                These comparisons are not case-sensitive and can be substrings of the actual table text.
                </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>ValueN</B><BR/><short_desc xmlns=""> 
                A Value to search for in the 'COLN' column
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The values are not case-sensitive and can be substrings of the actual table text.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectCellText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, SelectCellText</FONT></LI>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, SelectCellText, 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, SelectCellText, 4, "Field5"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, SelectCellText, "ADatum", 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectCellTextFind</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, SelectCellTextFind, Variable, "Date","Time", "09:58 AM", "Change","Change #2","Revision", "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Var</B><BR/><short_desc xmlns=""> 
                The variable which gets assigned the row found.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The variable which gets assigned the row found. If not
                found then it will get a zero length string
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # or header value, identifying the column for the select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ColN</B><BR/><short_desc xmlns=""> 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.  
                This must be accompanied by the next parameter, 'ValueN', and as many of the
                ColN/ValueN parameter pairs can be supplied as desired in order to match for a row 
                based on cell contents.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>ValueN</B><BR/><short_desc xmlns=""> 
                A Value to search for in the 'COLN' column
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectCellTextSpecial</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Frame, custTableTable, SelectCellTextSpecial, Control, Left, 2, 3</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Frame, custTableTable, SelectCellTextSpecial, Shift, Left, 2, 3</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>SpecialKey</B><BR/><short_desc xmlns="">
             The special key command used in the row selection.
	     For now, ownly Control and Shift are supported.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>MouseClick</B><BR/><short_desc xmlns=""> 
	        The type of mouse click needed.
		For now, ownly Left and Right are supported.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>Row</B><BR/><short_desc xmlns=""> 
	        The 1-based cell row in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>Col</B><BR/><short_desc xmlns=""> 
	        The 1-based cell column in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectFuzzyCellText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, SelectFuzzyCellText</FONT></LI>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, SelectFuzzyCellText, 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, SelectFuzzyCellText, 4, "field5"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, SelectFuzzyCellText, "datum", 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.  This command allows for case-insensitive substring 
                matches for row text when used in place of an actual row index.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This command allows for case-insensitive substring 
                matches for header text when used in place of an actual column index.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectFuzzyCellTextFind</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, SelectFuzzyCellTextFind, Variable, "Da","Ti", "09:58 AM", "Cha","Change #2","Rev", "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Var</B><BR/><short_desc xmlns=""> 
                The variable which gets assigned the row found.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The variable which gets assigned the row found. If not
                found then it will get a zero length string
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or fuzzy column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to fuzzy-match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ColN</B><BR/><short_desc xmlns=""> 
                A 1-based cell column # in the row/col specification or fuzzy column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to fuzzy-match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This must be accompanied by
                the next parameter, 'ValueN', and as many of the
                ColN/ValueN parameter pairs can be supplied as desired
                in order to match for a row based on cell contents.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>ValueN</B><BR/><short_desc xmlns=""> 
                A Value to search for in a cell under the 'ColN' column
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                A Value to search for in a cell under the 'ColN' column
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyCellEditable</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, VerifyCellEditable, "2", "3", "true"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Row</B><BR/><short_desc xmlns="">
	    The 1-based cell row in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Col</B><BR/><short_desc xmlns="">
	       The 1-based cell column in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ExpectedValue</B><BR/><short_desc xmlns=""> 
	         The case-insensitive value we expect for the editable value.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyCellText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, VerifyCellText, FirstCellValue</FONT></LI>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, VerifyCellText, "FirstCellValue", 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, VerifyCellText, "BenchValue", 4, "Field5"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, VerifyCellText, "BenchData", "ADatum", 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchValue</B><BR/><short_desc xmlns="">
             The case-sensitive expected value for the specified cell.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyCellTextContains</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, VerifyCellTextContains, FirstCellValue</FONT></LI>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, VerifyCellTextContains, "firstcell", 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, VerifyCellTextContains, "bench", 4, "Field5"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, VerifyCellTextContains, "bench", "ADatum", 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchValue</B><BR/><short_desc xmlns="">
                  The expected value for the specified cell.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  The value can be a substring of the full expected 
                  value and is NOT case-sensitive.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyCellTextFind</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, VerifyCellTextFind, "10/09/2003", Variable, "Date","Time", "09:58 AM", "Change","Change #2","Revision", "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchValue</B><BR/><short_desc xmlns="">
             The case-sensitive expected value for the specified cell.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Var</B><BR/><short_desc xmlns=""> 
                The variable which gets assigned the row found.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The variable which gets assigned the row found. If not
                found then it will get a zero length string
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>ColN</B><BR/><short_desc xmlns=""> 
                A 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This must be accompanied by
                the next parameter, 'ValueN', and as many of the
                ColN/ValueN parameter pairs can be supplied as desired
                in order to match for a row based on cell contents.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    9 :<B>ValueN</B><BR/><short_desc xmlns=""> 
                A Value to search for in a cell under the 'ColN' column
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                A Value to search for in a cell under the 'ColN' column
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyColumnLabel</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, VerifyColumnLabel, "Foo", "4"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, VerifyColumnLabel, "Foo SecondFoo", "4"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ColLabel</B><BR/><short_desc xmlns="">
             The case-insensitive expected value for the specified column label.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ColNumber</B><BR/><short_desc xmlns=""> 
                The 1-based column number of the label that needs verified.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyFuzzyCellText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, VerifyFuzzyCellText, FirstCellValue</FONT></LI>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, VerifyFuzzyCellText, "FirstCellValue", 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, VerifyFuzzyCellText, ABenchValue, 4, "field5"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, VerifyFuzzyCellText, ^ABenchValue, "datum", 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchValue</B><BR/><short_desc xmlns="">
             The case-sensitive expected value for the specified cell.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.  This command allows for case-insensitive substring 
                matches for row text when used in place of an actual row index.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This command allows for case-insensitive substring 
                matches for header text when used in place of an actual column index.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyFuzzyCellTextContains</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, VerifyFuzzyCellTextContains, FirstCellValue</FONT></LI>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, VerifyFuzzyCellTextContains, "firstcell", 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, DotNetWin, DotNetTable, VerifyFuzzyCellTextContains, bench, 4, "field5"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, VerifyFuzzyCellText, bench, "datum", 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchValue</B><BR/><short_desc xmlns="">
                  The expected value for the specified cell.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  The value can be a substring of the full expected 
                  value and is NOT case-sensitive.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.  This command allows for case-insensitive substring 
                matches for row text when used in place of an actual row index.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This command allows for case-insensitive substring 
                matches for header text when used in place of an actual column index.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyFuzzyCellTextFind</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, DotNetWin, DotNetTable, VerifyFuzzyCellTextFind, "10/09/2003", Variable, "Da","Ti", "09:58 AM", "Cha","Change #2","Rev", "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchValue</B><BR/><short_desc xmlns="">
             The case-sensitive expected value for the specified cell.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Var</B><BR/><short_desc xmlns=""> 
                The variable which gets assigned the row found.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The variable which gets assigned the row found. If not
                found then it will get a zero length string
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or fuzzy column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to fuzzy-match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>ColN</B><BR/><short_desc xmlns=""> 
                A 1-based cell column # in the row/col specification or fuzzy column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to fuzzy-match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This must be accompanied by
                the next parameter, 'ValueN', and as many of the
                ColN/ValueN parameter pairs can be supplied as desired
                in order to match for a row based on cell contents.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    9 :<B>ValueN</B><BR/><short_desc xmlns=""> 
                A Value to search for in a cell under the 'ColN' column
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                A Value to search for in a cell under the 'ColN' column
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>DotNetTreeFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="org/safs/rational/CFDotNetTree.html" target="_blank">
<FONT color="#000000">DotNetTreeFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>CaptureTreeDataToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Browser, aTreeView, CaptureTreeDataToFile, aFilename.ext</FONT></LI>
<LI type="circle"><FONT color="#800080">T, Browser, aTree, CaptureTreeDataToFile, myDirectory\aFilename.ext, "Parent Bank-&gt;Branch Banking and Trust", "_"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, aTreeView, CaptureTreeDataToFile, aFilename.ext, , , "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>File</B><BR/><short_desc xmlns="">
             The name of the file used to store the tree data.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             The name of the file used to store the tree data.
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Branch</B><BR/><short_desc xmlns="">
	                	The full name of the tree branch to capture.
	                </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
	                	The full name of the tree branch to capture.  If omitted, all 
	                	branches/nodes are captured.
		        	<br><br>The search of the path to the node is expected to be a case-sensitive 
		        	exact match of each node.  Use 'PartialMatchTreeDataToFile' if you 
		        	wish to specify case-insensitive substring matches for tree nodes.             
                        </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>IndentMark</B><BR/><short_desc xmlns="">
		        	The character(s) to use in the output file to indent the tree nodes from the 
		        	parent tree branches.
		        </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
		         	The character(s) to use in the output file to indent the tree nodes from the 
		        	parent tree branches.  If omitted, a tab character is used.
              		</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>FileEncoding</B><BR/><short_desc xmlns="">
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>FilterMode</B><BR/><short_desc xmlns="">
             (Future) Specify a file filter to use to process the text before comparison.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>FilterOptions</B><BR/><short_desc xmlns="">
             (Future) Specify filter options to use with the file filter.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, ClickTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, ClickTextNode, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to click.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, ClickUnverifiedTextNode, "root-&gt;Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, ClickUnverifiedTextNode, "root-&gt;Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive full path text of node to click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to click.
                 Parent-Child relationships are separated by "-&gt;"  If the tree contains 
                 hidden root nodes then they must be provided.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Collapse</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, Collapse, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, Collapse, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to collapse
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to collapse.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CollapsePartialTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, CollapsePartialTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, CollapsePartialTextNode, "parent-&gt;child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-Insensitive text of node to collapse
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-insensitive text of the node to collapse.
                 Parent-Child relationships are separated by "-&gt;"
                 For each level, a text comparison is performed. If the node 
                 contains the requested substring anywhere in its text, then 
                 that node is considered a match.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CollapseTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, CollapseTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, CollapseTextNode, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to collapse
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to collapse.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CollapseUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, CollapseUnverifiedTextNode, "root-&gt;Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, CollapseUnverifiedTextNode, "root-&gt;Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive full path text of node to collapse
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to collapse.
                 Parent-Child relationships are separated by "-&gt;" 
                 If the tree contains hidden root nodes they must be provided.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CtrlClickUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, CtrlClickUnverifiedTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, CtrlClickUnverifiedTextNode, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to CTRL-click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to CTRL-click.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DoubleClickTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, DoubleClickTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, DoubleClickTextNode, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to double-click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to double-click.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DoubleClickUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, DoubleClickUnverifiedTextNode, "root-&gt;Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, DoubleClickUnverifiedTextNode, "root-&gt;Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive full path text of node to double-click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to double-click.
                 Parent-Child relationships are separated by "-&gt;"  If the tree contains 
                 hidden root nodes then they must be provided.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Expand</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, Expand, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, Expand, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to expand
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to expand.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ExpandPartialTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, ExpandPartialTextNode, "parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, ExpandPartialTextNode, "parent-&gt;child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-Insensitive text of node to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-insensitive text of the node.
                 Parent-Child relationships are separated by "-&gt;".
                 For each level, a text comparison is performed. If the node 
                 contains the requested substring anywhere in its text, then 
                 that node is considered a match.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ExpandTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, ExpandTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, ExpandTextNode, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to expand
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to expand.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ExpandUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, ExpandUnverifiedTextNode, "root-&gt;Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, ExpandUnverifiedTextNode, "root-&gt;Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive full path text of node to expand
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to expand.
                 Parent-Child relationships are separated by "-&gt;".  If the tree 
                 contains hidden root nodes the user must provide these.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>MakeSelection</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, MakeSelection, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, MakeSelection, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to select.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>PartialMatchTreeDataToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Browser, aTreeView, PartialMatchTreeDataToFile, aFilename.ext</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, aTree, PartialMatchTreeDataToFile, myDirectory\aFilename.ext, "parent-&gt;branch", "_"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>File</B><BR/><short_desc xmlns="">
             The name of the file used to store the tree data.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             The name of the file used to store the tree data.
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Branch</B><BR/><short_desc xmlns="">
	             The full name of the tree branch to capture.
	              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
	             The full name of the tree branch to capture.  If omitted, 
	             all branches/nodes are captured.
		     <br><br>The search of the path to the node is a case-insensitive 
		     substring match of each node.  Use 'CaptureTreeDataToFile' if you 
		     wish to specify case-sensitive exact matches for tree nodes.             
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>IndentMark</B><BR/><short_desc xmlns="">
			        	The character(s) to use in the output file to indent the tree nodes from the 
			        	parent tree branches.
			        </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
			         	The character(s) to use in the output file to indent the tree nodes from the 
			        	parent tree branches.  If omitted, a tab character is used.
	              		</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>FilterMode</B><BR/><short_desc xmlns="">
             (Future) Specify a file filter to use to process the text before comparison.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>FilterOptions</B><BR/><short_desc xmlns="">
             (Future) Specify filter options to use with the file filter.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightClickTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, RightClickTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, RightClickTextNode, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to right-click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to right-click.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightClickUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, RightClickUnverifiedTextNode, "root-&gt;Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, RightClickUnverifiedTextNode, "root-&gt;Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive full path text of node to right-click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to right-click.
                 Parent-Child relationships are separated by "-&gt;"  If the tree contains 
                 hidden root nodes then they must be provided.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectAnotherPartialTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, SelectAnotherPartialTextNode, "parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, SelectAnotherPartialTextNode, "parent-&gt;child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-Insensitive text of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-insensitive text of the node to select.
                 Parent-Child relationships are separated by "-&gt;"
                 For each level, a text comparison is performed. If the node 
                 contains the requested substring anywhere in its text, then 
                 that node is considered a match.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectAnotherTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, SelectAnotherTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, SelectAnotherTextNode, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to select.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectAnotherUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, SelectAnotherUnverifiedTextNode, "root-&gt;Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, SelectAnotherUnverifiedTextNode, "root-&gt;Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive full path text of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to select.
                 Parent-Child relationships are separated by "-&gt;"  If the tree contains 
                 hidden root nodes they must be provided.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectPartialTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, SelectPartialTextNode, "parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, SelectPartialTextNode, "parent-&gt;child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-Insensitive text of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-insensitive text of the node to select.
                 Parent-Child relationships are separated by "-&gt;"
                 For each level, a text comparison is performed. If the node 
                 contains the requested substring anywhere in its text, then 
                 that node is considered a match.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, SelectTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, SelectTextNode, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to select.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, SelectUnverifiedTextNode, "root-&gt;Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, SelectUnverifiedTextNode, "root-&gt;Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive full path text of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to select.
                 Parent-Child relationships are separated by "-&gt;" 
                 If the tree contains hidden root nodes they must be provided.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetTreeContainsNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, aTreeView, SetTreeContainsNode, "Parent Bank-&gt;Branch Banking and Trust", isFound</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Node</B><BR/><short_desc xmlns="">
             				The name of the node to verify.
              			</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             				The search of the path to the node is expected to be a case-sensitive 
	     				exact match of each node.  Use 'SetTreeContainsPartialMatch' if you 
	     				wish to specify case-insensitive substring matches for tree nodes.
              			</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ResultVar</B><BR/><short_desc xmlns="">
	             			The name of the variable which gets assigned the result.
	              		</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
	             			The value of 'TRUE' indicates the node was found in the tree, and 'FALSE'
	             			indicates that the node was not found in the tree.
	              		</detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetTreeContainsPartialMatch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, aTreeView, VerifyTreeContainsNode, "parent-&gt;branch", isFound</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Node</B><BR/><short_desc xmlns="">
             				The name of the node to verify.
              			</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             				The search of the path to the node is expected to be a case-insensitive 
					substring match of each node.  Use 'SetTreeContainsNode' if you 
             				wish to specify case-sensitive substring matches for tree nodes.
              			</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ResultVar</B><BR/><short_desc xmlns="">
	             			The name of the variable which gets assigned the result.
	              		</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
	             			The value of 'TRUE' indicates the node was found in the tree, and 'FALSE'
	             			indicates that the node was not found in the tree.
	              		</detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ShiftClickUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATree, ShiftClickUnverifiedTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATree, ShiftClickUnverifiedTextNode, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to SHIFT-click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to SHIFT-click.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyTreeContainsNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, aTreeView, VerifyTreeContainsNode, "Parent Bank-&gt;Branch Banking and Trust"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Node</B><BR/><short_desc xmlns="">
             		The name of the node to verify.
              	</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             		The search of the path to the node is expected to be a case-sensitive 
	     		exact match of each node.  Use 'VerifyTreeContainsPartialMatch' if you 
	     		wish to specify case-insensitive substring matches for tree nodes.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyTreeContainsPartialMatch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, aTreeView, VerifyTreeContainsNode, "parent-&gt;branch"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Node</B><BR/><short_desc xmlns="">
             		The name of the node to verify.
              	</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             		The search of the path to the node is expected to be a case-insensitive 
			substring match of each node.  Use 'VerifyTreeContainsNode' if you 
             		wish to specify case-sensitive substring matches for tree nodes.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>EditBoxFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="EditBoxFunctions.htm" target="_blank">
<FONT color="#000000">EditBoxFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>SetTextCharacters</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, EditBox, SETTEXTCHARACTERS,  "MyPassword"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>TextValue</B><BR/><short_desc xmlns=""> 
             The text that will be typed into the EditBox.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
             TextValue will be the text that will be typed into the Editbox.
                 Quoted text may be used to ensure proper expected value retrieval.
                 There is also no check for a missing field because that would be
                 the same as specifying no text ("")--which is valid.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetTextValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, EditBox, SetTextValue,  "MyPassword"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>TextValue</B><BR/><short_desc xmlns=""> 
                 The text that will be typed into the EditBox and verified.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue will be the text that will be typed into the Editbox.
                 Quoted text may be used to ensure proper expected value retrieval.
                 There is also no check for a missing field because that would be
                 the same as specifying no text ("")--which is valid.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetUnverifiedTextCharacters</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, EditBox, SetUnverifiedTextCharacters,  "My+(Password)"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>TextValue</B><BR/><short_desc xmlns=""> 
             The text that will be typed into the EditBox.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue will be the text that will be typed into the Editbox.
                 Quoted text may be used to ensure proper expected value retrieval.
                 There is also no check for a missing field because that would be
                 the same as specifying no text ("")--which is valid.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetUnverifiedTextValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, EditBox, SetUnverifiedTextValue,  "MyPassword"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>TextValue</B><BR/><short_desc xmlns=""> 
             The text that will be typed into the EditBox.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue will be the text that will be typed into the Editbox.
                 Quoted text may be used to ensure proper expected value retrieval.
                 There is also no check for a missing field because that would be
                 the same as specifying no text ("")--which is valid.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>FlexColorFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="FlexColorFunctions.htm" target="_blank">
<FONT color="#000000">FlexColorFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>SetColor</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, FlexWINDOW, FlexColorPicker, SetColor, "#FF0000"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, FlexWINDOW, FlexColorPicker, SetColor, "#0000FF"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ColorValue</B><BR/><short_desc xmlns=""> 
                 ColorValue to set.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 ColorValue is a hexdecimal string started with '#'. 
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>FlexDateFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="FlexDateFunctions.htm" target="_blank">
<FONT color="#000000">FlexDateFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>SetDate</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, FlexWINDOW, FlexDate, SetDate, "Jun 6 2009"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, FlexWINDOW, FlexDate, SetDate, "04/24/2009"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>DateValue</B><BR/><short_desc xmlns=""> 
                 DateValue to set.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 DateValue to set. 
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>FlexNumericStepperFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="FlexNumericStepperFunctions.htm" target="_blank">
<FONT color="#000000">FlexNumericStepperFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>SetValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, FLEXWINDOW, FlexNumericStepper, SetValue, 3</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>StepperValue</B><BR/><short_desc xmlns=""> 
                 The value of the stepper to set.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 The value of the stepper to set.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>FlexSliderFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="FlexSliderFunctions.htm" target="_blank">
<FONT color="#000000">FlexSliderFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>SetValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, FlexWINDOW, FlexSlider, SetValue, 3.2</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>SliderValue</B><BR/><short_desc xmlns=""> 
                 The value of the slider to set.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 The value of the slider to set. 
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>FPSpreadFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="FPSpreadFunctions.htm" target="_blank">
<FONT color="#000000">FPSpreadFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>CaptureRangeToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, Window, FPSpreadGrid, CaptureRangeToFile, "captResult.txt"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>CapturedFile</B><BR/><short_desc xmlns=""> 
             The name of the file used to save the captured data.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             Typically, the captured file is stored in the Datapool\Test directory.  
             Captured files will be TAB delimited files.
	     This action only captures the data, it does not verify it against
	     a benchmark file.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickCell</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, AWindow, AGrid, ClickCell</FONT></LI>
<LI type="circle"><FONT color="#800080">T, AWindow, AGrid, ClickCell, ^row=2, ^col=1</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, AWindow, AGrid, ClickCell, ^row=0, ^col=1</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>row</B><BR/><short_desc xmlns=""> 
             The 1-based logical row to click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
             If no row is provided then row=1 is assumed.  Row=0 is used
	     for column headers.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>col</B><BR/><short_desc xmlns=""> 
             The 1-based logical col to click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
             If no col is provided then col=1 is assumed.  Col=0 is used
	     for row headers.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CtrlClickCell</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, AWindow, AGrid, CtrlClickCell</FONT></LI>
<LI type="circle"><FONT color="#800080">T, AWindow, AGrid, CtrlClickCell, ^row=2, ^col=1</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, AWindow, AGrid, CtrlClickCell, ^row=0, ^col=1</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>row</B><BR/><short_desc xmlns=""> 
             The 1-based logical row to Ctrl+Click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
             If no row is provided then row=1 is assumed.  Row=0 is used
	     for column headers.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>col</B><BR/><short_desc xmlns=""> 
             The 1-based logical col to Ctrl+Click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
             If no col is provided then col=1 is assumed.  Col=0 is used
	     for row headers.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DoubleClickCell</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, AWindow, AGrid, DoubleClickCell</FONT></LI>
<LI type="circle"><FONT color="#800080">T, AWindow, AGrid, DoubleClickCell, ^row=2, ^col=1</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, AWindow, AGrid, DoubleClickCell, ^row=0, ^col=1</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>row</B><BR/><short_desc xmlns=""> 
             The 1-based logical row to double click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
             If no row is provided then row=1 is assumed.  Row=0 is used
	     for column headers.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>col</B><BR/><short_desc xmlns=""> 
             The 1-based logical col to double click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
             If no col is provided then col=1 is assumed.  Col=0 is used
	     for row headers.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>FindRowNumber</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, AWindow, AGrid, FindRowNumber, "foo", "", "Name", "Bar", "|"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, AWindow, AGrid, FindRowNumber, "foo", "10", "Name|City", "Bar|Pittsburgh", "|"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>rowVarName</B><BR/><short_desc xmlns=""> 
             The name of the variable to store the row number into.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>startingRow</B><BR/><short_desc xmlns=""> 
             The row to use to begin the search.  Defaults to row 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>searchColumns</B><BR/><short_desc xmlns=""> 
             The string of column names where you want to search.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
             You can have just a single column name, or multiple column
	     names separated by the specified delimiter.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>searchText</B><BR/><short_desc xmlns=""> 
             The string of search strings used to search in each specified
	     column names.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
             The number of search strings you have should be equal to the
	     number of search columns that you have.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    9 :<B>DELIMITER</B><BR/><short_desc xmlns=""> 
             Delimiter used by the search columns and search text to separate
	     the different columns/text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightClickCell</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, AWindow, AGrid, RightClickCell</FONT></LI>
<LI type="circle"><FONT color="#800080">T, AWindow, AGrid, RightClickCell, ^row=2, ^col=1</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, AWindow, AGrid, RightClickCell, ^row=0, ^col=1</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>row</B><BR/><short_desc xmlns=""> 
             The 1-based logical row to right click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
             If no row is provided then row=1 is assumed.  Row=0 is used
	     for column headers.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>col</B><BR/><short_desc xmlns=""> 
             The 1-based logical col to right click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
             If no col is provided then col=1 is assumed.  Col=0 is used
	     for row headers.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ShiftClickCell</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, AWindow, AGrid, ShiftClickCell</FONT></LI>
<LI type="circle"><FONT color="#800080">T, AWindow, AGrid, ShiftClickCell, ^row=2, ^col=1</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, AWindow, AGrid, ShiftClickCell, ^row=0, ^col=1</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>row</B><BR/><short_desc xmlns=""> 
             The 1-based logical row to SHIFT+Click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
             If no row is provided then row=1 is assumed.  Row=0 is used
	     for column headers.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>col</B><BR/><short_desc xmlns=""> 
             The 1-based logical col to SHIFT+Click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
             If no col is provided then col=1 is assumed.  Col=0 is used
	     for row headers.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyCellText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, AWindow, AGrid, VerifyCellText, "foo"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, AWindow, AGrid, VerifyCellText, "foo", ^row=2, ^col=1</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, AWindow, AGrid, VerifyCellText, "foo", ^row=0, ^col=1</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ExpectedCellText</B><BR/><short_desc xmlns=""> 
             The expected text value of the specified cell.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>row</B><BR/><short_desc xmlns=""> 
             The 1-based logical row to verify.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
             If no row is provided then row=1 is assumed.  Row=0 is used
	     for column headers.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>col</B><BR/><short_desc xmlns=""> 
             The 1-based logical col to verify.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
             If no col is provided then col=1 is assumed.  Col=0 is used
	     for row headers.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<STRONG><BIG>GenericMasterFunctions</BIG></STRONG>  
                (Available to nearly all components)
            </FONT>
<UL>
<LI type="circle"><A HREF="GenericMasterFunctions.htm" target="_blank">
<FONT color="#000000">GenericMasterFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>AssignPropertyVariable</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WindowID, WindowID, AssignPropertyVariable, Visible, AVariableName</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WindowID, WindowID, AssignPropertyVariable, Visible, AVariableName, SUPPRESSVALUE</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WindowID, WindowID, AssignPropertyVariable, Visible, "AVariableName"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WindowID, WindowID, AssignPropertyVariable, Visible, "^AVariableName"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SetVariableValues, ^AVariableName="NextVariableName" <br>
                  T, WindowID, WindowID, AssignPropertyVariable, Visible, ^AVariableName</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>PropertyName</B><BR/><short_desc xmlns="">
             The case-sensitive name of the object property.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>VariableName</B><BR/><short_desc xmlns="">
             The name of the variable to receive the property value.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
               The name of the variable to receive the property value.
               Note, if you supply the name of the variable and include the leading
               caret (^) symbol then the variable must be enclosed in quotes.
               Otherwise, that variable will be used like any other variable and the
               substituted value of that variable will be interpretted as the name
               of the variable you wish to use.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>SuppressValue</B><BR/><short_desc xmlns="">
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line property values.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
               The case-insensitive value "SUPPRESSVALUE" instructs the implementation to NOT 
               log the recovered value of the property when logging its success.  This is generally 
               useful when retrieving property values that are exceedingly long, or contain large volumes 
               of text that will break-up the format or readability of the output log.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CaptureObjectDataToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Browser, HTMLTable, CaptureObjectDataToFile, aFilename.ext, , "", ""</FONT></LI>
<LI type="circle"><FONT color="#800080">T, Browser, HTMLTable, CaptureObjectDataToFile, myDirectory\aFilename.ext, , "", ""</FONT></LI>
<LI type="circle"><FONT color="#800080">T, Browser, HTMLTable, CaptureObjectDataToFile, tableContent.ext</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, HTMLTable, CaptureObjectDataToFile, tableContent.ext, "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>File</B><BR/><short_desc xmlns="">
             The name of the file used to store the object data.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             The name of the file used to store the object data.
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>FileEncoding</B><BR/><short_desc xmlns="">
             Specify a character encoding to be used when saving data to a file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>FilterMode</B><BR/><short_desc xmlns="">
             (Future) Specify a file filter to use to process the text before comparison.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>FilterOptions</B><BR/><short_desc xmlns="">
             (Future) Specify filter options to use with the file filter.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CapturePropertiesToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Window, Comp, CapturePropertiesToFile, aFilename.ext</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Window, Comp, CapturePropertiesToFile, aFilename.properties, "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>File</B><BR/><short_desc xmlns="">
             The name of the file used to store the property list data.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             The name of the file used to store the property list data.
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>FileEncoding</B><BR/><short_desc xmlns="">
             Specify a character encoding to be used when saving data to a file.
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             Specify a character encoding to be used when saving data to a file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
             <p>This parameter was added to this command in Nov 2011 as implemented for 
             the Apple IOS engine and may not yet be supported in all engines otherwise 
             supporting this command.</p>
            </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CapturePropertyToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Window, Comp, CapturePropertyToFile, propertyName, aFilename.ext</FONT></LI>
<LI type="circle"><FONT color="#800080">T, Window, Comp, CapturePropertyToFile, propertyName, aFilename.ext</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Window, Comp, CapturePropertyToFile, propertyName, aFilename.ext, "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>PropertyName</B><BR/><short_desc xmlns="">
             The case-sensitive name of the object array property to verify.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>File</B><BR/><short_desc xmlns="">
             The name of the file used to store the property list data.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             The name of the file used to store the property list data.
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>FileEncoding</B><BR/><short_desc xmlns="">
             Specify a character encoding to be used when saving data to a file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClearAppMapCache</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, any, any, ClearAppMapCache</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClearCache</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, ClearCache</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ExecuteScript</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, COMPONENT, ExecuteScript, "arguments[0].innerHTML=arguments[1];", "The text to shown on page"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>script</B><BR/><short_desc xmlns="">
                The script to execute.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The script to execute.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>paramN</B><BR/><short_desc xmlns="">
                The paramters passed to script.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The paramters passed to script. You can specify more than one parameter or no parameter.<br>
			    If the script will return a value, you can get it from variable "__$_SAFS_JAVASCRIPT_RESULT_$__".<br>
			    Now, only the string result is supported.<br>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetComputedStyle</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, COMPONENT, GetComputedStyle, "ComponentStyle.txt"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TestFile</B><BR/><short_desc xmlns="">
                The test file to save 'computed style'.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The test file to save 'computed style'.<br>
                The full absolute path to the test file or a relative path.<br>
                Relative path's should be sought in this order:
                <p><ol>
                <li>The Project's Test directory;</li>
                <li>Relative to the Project's Datapool directory;</li>
                <li>Relative to the Project's root directory;</li>
                </ol></p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetGUIImage</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, GetGUIImage, "C:\comp.bmp"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, GetGUIImage, "Datapool\comp.jpg"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, GetGUIImage, "Datapool\Logs\comp.bmp", SUBAREA</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, GetGUIImage, "Datapool\comp.jpg", "", "Filter=0;0;10;10"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, COMPONENT, GetGUIImage, "comp.jpg", "", "FilterMapKey"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>OutputFile</B><BR/><short_desc xmlns="">
             Path (with filename) to the output image file.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              Path/file name of the output image file.
              This can be a full path, a relative path or just a file name. If
              relative, it is appended to the Datapool directory; if only a
              file name without path, the file will be saved in Datapool\Test
              directory. The extension of the file must be either .bmp or
              .jpg. If not, .bmp is appended to this parameter to force a
              BITMAP export.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>SubArea</B><BR/><short_desc xmlns="">
             Optional app map subkey indicating partial image of the component to capture.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              Optional app map subkey indicating partial image of the component to capture.
              Value of this app map reference must be in the format of a
              top-left and bottom-right pair, and can be either absolute
              coordinates or percentages ("x1,y1,x2,y2" or "x1%,y1%,x2%,y2%").
              Coordinates are relative to the component, i.e. (0,0) and
              (0%,0%) are the minimum, and (COMPONENT_WIDTH, COMPONENT_HEIGHT)
              and (100%,100%) are the maximum. Values exceeding the minimun/
              maximum are forced to the nearest limiting value. Absolute and
              percent values can be mixed, so "0,0,50%,50%" is valid. If this
              parameter is omitted, full image of the component is captured
              (equivalent to "0,0,100%,100%").
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>FilteredAreas</B><BR/><short_desc xmlns="">
              "<b>Filter=</b>one or multiple areas" to filter the GUI image (or sub image of GUI if the parameter "SubArea" is present)
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              "<b>Filter=</b>one or multiple areas" to filter the GUI image (or sub image of GUI if the parameter "SubArea" is present)<br>
              The area is in the same format described for the parameter "SubArea".<br>
              Multiple areas are separated by a space character, such as "subarea1 subarea2 subarea3"<br>
              The filtered-image will be covered by black color at filtered areas.<br>
              Do NOT forget the prefix "Filter=", without it this parameter will be ignored.
             </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetTextFromGUI</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, Window, Comp, GetTextFromGUI, Var1,  , GOCR, en, </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VariableName</B><BR/><short_desc xmlns="">
             The name of the variable to receive detected text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              The name of the variable to receive detected text. Note, if you supply the name of the variable 
              and include the leading caret (^) symbol then the variable must be enclosed in quotes. Otherwise, 
              that variable will be used like any other variable and the substituted value of that variable will 
              be interpreted as the name of the variable you wish to use.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>SubArea</B><BR/><short_desc xmlns="">
             Optional app map subkey indicating partial image of the component to capture.
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             Optional app map subkey indicating partial image of the component to capture. Value of this app 
             map reference must be in the format of a top-left and bottom-right pair, and can be either absolute 
             coordinates or percentages ("x1,y1,x2,y2" or "x1%,y1%,x2%,y2%"). Coordinates are relative to the 
             component, i.e. (0,0) and (0%,0%) are the minimum, and (COMPONENT_WIDTH, COMPONENT_HEIGHT) and 
             (100%,100%) are the maximum. Values exceeding the minimun/ maximum are forced to the nearest 
             limiting value. Absolute and percent values can be mixed, so "0,0,50%,50%" is valid. 
             <p>
             If this parameter is omitted with blank or empty string, full image of the component is captured 
             (equivalent to "0,0,100%,100%"). 
             </p>
             </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>OCRId</B><BR/><short_desc xmlns="">
             OCRId indicating the OCR used to recognize text.
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             Two OCR engines are supported. "TOCR" will be taken as default if the parameter is blank.
             "TOCR" stands for Tesseract OCR; "GOCR" stands for GOCR.
             <p>
             Note: Seems TOCR performs a bit better than GOCR (personal experience). 
             </p>
             </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>LangId</B><BR/><short_desc xmlns="">
             Optional LangId representing the language in use for selected OCR to recognize text. 
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             For both TOCR and GOCR, only English is supported so far. Language Id takes standard language code, 
             which can be gotten by calling Locale.ENGLISH.getLanguage(). 
             <p><pre>
				LangId      Language
				"en"   ---  English
				"cn"   ---  Chinese
			 </pre></p>
             <p>
             If LangId is not specified with blank or empty string, the language of System locale will be 
             used as default. 
             </p>
             </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>ScaleRatio</B><BR/><short_desc xmlns="">
             Optional ScaleRatio indicating the scale ratio for resizing the original image.
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             To fit in font size and DPI required by OCR, SAFS needs to resize images before sending them 
             to OCR engines. For screen-captured images with 96DPI, TOCR takes 1.9 as default; GOCR takes 1.5 
             as default. You may try different ScaleRatio to find an appropriate value if default setting is 
             unable to meet your requirement.
             </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GUIDoesExist</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                , F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, AWindow, AWindow, GUIDoesExist</FONT></LI>
<LI type="circle"><FONT color="#800080">T, AWindow, AChild, GUIDoesExist</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GUIDoesNotExist</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                , F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, AWindow, AWindow, GUIDoesNotExist</FONT></LI>
<LI type="circle"><FONT color="#800080">T, AWindow, AChild, GUIDoesNotExist</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>HoverMouse</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, HoverMouse</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, HoverMouse, "Coords=200,400"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, HoverMouse, ASubObject, 1000</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, HoverMouse, , 3000</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                (Optional)Name of the AppMap subkey to lookup and use for the hover.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Without this we should hover on the center of the object.
                <p>Name of the AppMap subkey to lookup and use for the hover.
                We expect the AppMap to contain the item in the format "x,y":</p>
                <p>
                [Component]<br>
                Node1="33,120"      OR<br>
                Node1="Coords=33,120"	OR<br>
                Node1="Icon" (or whatever is appropriate)</p>
                <p>  
                The results from the lookup are appended to the "Coords=" string 
                used by the hover command in Robot (if necessary).  So any 
                valid content used with the hover command can be part of 
                this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>HoverTime</B><BR/><short_desc xmlns=""> 
	                (Optional)Number of milliseconds to hover.
	              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
	                If not specified, the mouse will hover for 2000 milliseconds over the object,
	              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>HoverScreenLocation</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, HoverScreenLocation</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, HoverScreenLocation, "Coords=200,400"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, HoverScreenLocation, ASubObject, 1000</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, HoverScreenLocation, , 3000</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                (Sometimes Optional)Name of the AppMap subkey to lookup and use for the hover.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Without this there MUST be absolute screen coordinates stored in the AppMap 
                for the Window:Component specified.
                <p>
                Name of the AppMap subkey to lookup and use for the hover.  
                We expect the AppMap to contain the coordinates in the following supported formats:
                </p><p><pre>
                [Component]
                Node1="33,120"        (comma-delimited)      OR
                Node1="33;120"        (semi-colon delimited) OR
                Node1="33 120"        (space-delimited)      OR
                Node1="Coords=33,120" (comma-delimited)      OR
                Node1="Coords=33;120" (semi-colon delimited) OR
                Node1="Coords=33 120" (space-delimited)
                </pre></p><p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
                <p>
                This field can instead contain the literal text of any absolute or relative coordinates 
                in the same formats as shown above. </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>HoverTime</B><BR/><short_desc xmlns=""> 
	                (Optional)Number of milliseconds to hover.
	              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
	                If not specified, the mouse will hover at the specified coordinates for 2000 milliseconds.
	              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>InputCharacters</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Abbot Commands'>ABT</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, WINDOW, INPUTCHARACTERS, "Some Text to Input"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns="">
                String of keystrokes to send.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                String of keystrokes to send.
                For RRAFS(RC): consult the documentation on the SQA InputChars command  This
                routine sends the provided string unmodified to the InputChars
                command.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>InputKeys</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Abbot Commands'>ABT</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, COMPONENT, INPUTKEYS, "Some Text to Input"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns="">
                String of keystrokes to send.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                String of keystrokes to send.
                For RRAFS (RC): consult the documentation on the SQA InputKeys command for
                syntax information for special characters and keys.  This
                routine sends the provided string unmodified to the InputKeys
                command.
		<p>
		Note: the TID supports this command using 
		<a href="http://safsdev.sourceforge.net/doc/org/safs/tools/input/CreateUnicodeMap.html" target="reference" alt="SAFS InputKeys Support Doc">InputKeys Support</a>.
		</p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>IsPropertyExist</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                , F
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, Window, Component, IsPropertyExist, Visible, existVar</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>PropertyName</B><BR/><short_desc xmlns="">
             The case-sensitive name of the object property to verify.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>PropertyExistVariable</B><BR/><short_desc xmlns="">
             The variable to store 'true' or 'false' to indicate if the property exist or not.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>LocateScreenImage</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WindowID, WindowID, LocateScreenImage, AVariableName</FONT></LI>
<LI type="circle"><FONT color="#800080">C, SetVariableValues, ^AVariableName="NextVariableName" 
                  T, WindowID, WindowID, LocateScreenImage, ^AVariableName</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, ParentWindow, Component, LocateScreenImage, AVariableName, parent</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VariableName</B><BR/><short_desc xmlns="">
             The root name of the collection of variables to receive the location and dimensions.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>WhomRelativeTo</B><BR/><short_desc xmlns="">
             This parameter decides the coordinates stored in VariableName is relative to the screen or the parent window.
             'screen' means they are relative to the screen; 'parent' means they are relative to the parent window.
             The parameter is curently available in RJ only. 
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SaveTextFromGUI</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, Window, Comp, SaveTextFromGUI, ocr.txt,   , TOCR, en, 2.0</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>OutputFile</B><BR/><short_desc xmlns="">
             The name of the text file used to store detected text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              The name of the text file used to store detected text. By default, the files will be stored in 
              the active "Test" directory. If you specify a relative path, the path will be relative to the 
              project directory. The directory for a full or relative path must already exist.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>SubArea</B><BR/><short_desc xmlns="">
             Optional app map subkey indicating partial image of the component to capture.
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             Optional app map subkey indicating partial image of the component to capture. Value of this app 
             map reference must be in the format of a top-left and bottom-right pair, and can be either absolute 
             coordinates or percentages ("x1,y1,x2,y2" or "x1%,y1%,x2%,y2%"). Coordinates are relative to the 
             component, i.e. (0,0) and (0%,0%) are the minimum, and (COMPONENT_WIDTH, COMPONENT_HEIGHT) and 
             (100%,100%) are the maximum. Values exceeding the minimun/ maximum are forced to the nearest 
             limiting value. Absolute and percent values can be mixed, so "0,0,50%,50%" is valid. 
             <p>
             If this parameter is omitted with blank or empty string, full image of the component is captured 
             (equivalent to "0,0,100%,100%"). 
             </p>
             </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>OCRId</B><BR/><short_desc xmlns="">
             OCRId indicating the OCR used to recognize text.
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             Two OCR engines are supported. "TOCR" will be taken as default if the parameter is blank.
             "TOCR" stands for Tesseract OCR; "GOCR" stands for GOCR.
             <p>
             Note: Seems TOCR performs a bit better than GOCR (personal experience). 
             </p>
             </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>LangId</B><BR/><short_desc xmlns="">
             Optional LangId representing the language in use for selected OCR to recognize text. 
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             For both TOCR and GOCR, only English is supported so far. Language Id takes standard language code, 
             which can be gotten by calling Locale.ENGLISH.getLanguage(). 
             <p><pre>
				LangId      Language
				"en"   ---  English
				"cn"   ---  Chinese
			 </pre></p>
             <p>
             If LangId is not specified with blank or empty string, the language of System locale will be 
             used as default. 
             </p>
             </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>ScaleRatio</B><BR/><short_desc xmlns="">
             Optional ScaleRatio indicating the scale ratio for resizing the original image.
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             To fit in font size and DPI required by OCR, SAFS needs to resize images before sending them 
             to OCR engines. For screen-captured images with 96DPI, TOCR takes 1.9 as default; GOCR takes 1.5 
             as default. You may try different ScaleRatio to find an appropriate value if default setting is 
             unable to meet your requirement.
             </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SendEvent</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Window, Comp, SendEvent, Close</FONT></LI>
<LI type="circle"><FONT color="#800080">T, Window, Comp, SendEvent, Change, Browse</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Window, Comp, SendEvent, MyEvent, AnArg, 100, 200</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Event</B><BR/><short_desc xmlns="">
             The potentially case-sensitive name of the event to send or trigger.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              Some technologies may enforce case-sensitivity for event names while others will not.  
              The tester is responsible to ensure the event name is appropriate for the item(s) being tested.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>PARAM_N</B><BR/><short_desc xmlns="">
             The first of 0 or more parameters needed for the event.
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             This field will be blank or contain an empty string if no parameter value is to be sent.  
             Otherwise, the field will contain an appropriate value as might be required or optional for 
             the event being sent.
             <p>
             If the event accepts multiple parameters, then each parameter must be provided in a separate 
             field in the test record.  All fields will be evaluated until no more fields are found to exist. 
             All fields will be sent in the order they are provided.
             </p>
             </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetPropertyValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, RadioButton, SetPropertyValue, "checked", True, ""</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ObjectPropertyName</B><BR/><short_desc xmlns="">
             The name of the property of the object.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             The name of the property of the object.  This property will have the value set.<br>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>PropertyValue</B><BR/><short_desc xmlns="">
             The value to set the property to.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ShowOnPage</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Window, Comp</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Window, Comp, True</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>verify</B><BR/><short_desc xmlns="">"True" to verify that the component is shown on page.</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
               This parameter is boolean, default value is false. 
               Verify that the component is shown on page if this parameter is true.
             </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>TypeChars</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, Anything, At All, TYPECHARS, "Some Text to Input"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns="">
                String of keystrokes to send.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>TypeEncryption</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, Anything, At All, TypeEncryption, "C:\safs\passwords\application.pass", "D:\secretPath\private.key" </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>EncryptedDataFile</B><BR/><short_desc xmlns="">
                The full path of the file where the "encrypted data" is stored.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>PrivateKeyFile</B><BR/><short_desc xmlns="">
                The full path of the file where the "private key" is stored.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                <p>
                This file should be kept VERY SECRECT, only the authorized users can access it.
                </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>TypeKeys</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, Anything, At All, TYPEKEYS, "%F{ENTER}"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns="">
                String of keystrokes to send.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                String of keystrokes to send.
		Note: the TID supports this command using 
		<a href="http://safsdev.sourceforge.net/doc/org/safs/tools/input/CreateUnicodeMap.html" target="reference" alt="SAFS InputKeys Support Doc">InputKeys Support</a>.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyArrayPropertyToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WFSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W, F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Window, MyListBox, VerifyArrayPropertyToFile, "List", aFilename.ext, "", ""</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Window, MyListBox, VerifyArrayPropertyToFile, "List", c:\Dir\aFilename.ext</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>PropertyName</B><BR/><short_desc xmlns="">
             The case-sensitive name of the object array property to verify.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>BenchmarkFile</B><BR/><short_desc xmlns="">
             The name of the file used as the comparison benchmark.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>FilterMode</B><BR/><short_desc xmlns="">
             (Future) Specify a file filter to use to process the text before comparison.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>FilterOptions</B><BR/><short_desc xmlns="">
             (Future) Specify filter options to use with the file filter.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyBinaryFileToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WFSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W, F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Browser, HTMLTable, VerifyBinaryFileToFile, bFilename.ext, aFilename.ext, "", ""</FONT></LI>
<LI type="circle"><FONT color="#800080">T, Anything, AtAll, VerifyBinaryFileToFile, c:\Dir\bFilename.ext, c:\Dir\aFilename.ext</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Anything, AtAll, VerifyBinaryFileToFile, c:\Dir\bFilename.png, c:\Dir\aFilename.png, "Tolerance", "90"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchmarkFile</B><BR/><short_desc xmlns=""> 
             File used as the comparison benchmark.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             File used as the comparison benchmark.<br>
             This can be a full path, a relative path, or a file name. If
             it is a filename, it is expected to be in the project's 
             Datapool\Bench directory. If it is a relative path, 
             FindSQAFile is used to located the file.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ActualFile</B><BR/><short_desc xmlns=""> 
             File used as the comparison file under test.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             File used as the comparison file under test.<br>
             This can be a full path, a relative path, or a file name. If
             it is a relative path or a file name, the command will try to
             find the file in the project's Datapool\Test directory.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>FilterMode</B><BR/><short_desc xmlns=""> 
                Specify a filter to use to process the file content before comparison.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Specify a filter to use to process the file content before comparison.<br>
                "TOLERANCE", valid if the 2 binary files are images, this represents BitTolerance.<br>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>FilterOptions</B><BR/><short_desc xmlns=""> 
                Specify filter options to use with the filter.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Specify filter options to use with the filter.<br>
                If the filter is "TOLERANCE", this value should be an integer between 0 and 100.
                100 means only 100% match, 2 images will be considered matched;
                0 means even no bits match, 2 images will be considered matched.<br> 
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyClipboardToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WFSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W, F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Browser, HTMLTable, VerifyClipboardToFile, aFilename.ext, "", ""</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Anything, AtAll, VerifyClipboardToFile, c:\Dir\aFilename.ext</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchmarkFile</B><BR/><short_desc xmlns="">
             The name of the file used as the comparison benchmark.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             The name of the file used as the comparison benchmark.<br>
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>FilterMode</B><BR/><short_desc xmlns="">
             (Future) Specify a file filter to use to process the text before comparison.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>FilterOptions</B><BR/><short_desc xmlns="">
             (Future) Specify filter options to use with the file filter.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyClipboardVP</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Nonsense, NonsenseToo, VerifyClipboardVP, ClipboardContentsVP</FONT></LI>
<LI type="circle"><FONT color="#800080">T, Browser, Browser, VerifyClipboardVP, BrowserContentsVP</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, HTMLTable, VerifyClipboardVP, TableContentsVP</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VPName</B><BR/><short_desc xmlns="">
             The name of the ClipboardVP from the currently running script.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyComputedStyle</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, COMPONENT, VerifyComputedStyle, "ComponentStyle.txt"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchFile</B><BR/><short_desc xmlns="">
                The benchmake file to compare against.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The benchmark file to compare against.<br>
                The full absolute path to the benchmark file or a relative path.<br>
                Relative path's should be sought in this order:
                <p><ol>
                <li>The Project's Bench directory;</li>
                <li>Relative to the Project's Datapool directory;</li>
                <li>Relative to the Project's root directory;</li>
                </ol></p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyFileToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WFSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W, F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Browser, HTMLTable, VerifyFileToFile, bFilename.ext, aFilename.ext, "", ""</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Anything, AtAll, VerifyFileToFile, c:\Dir\bFilename.ext, c:\Dir\aFilename.ext</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchmarkFile</B><BR/><short_desc xmlns=""> 
             File used as the comparison benchmark.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             File used as the comparison benchmark.<br>
             This can be a full path, a relative path, or a file name. If
             it is a filename, it is expected to be in the project's 
             Datapool\Bench directory. If it is a relative path, 
             FindSQAFile is used to located the file.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ActualFile</B><BR/><short_desc xmlns=""> 
             File used as the comparison file under test.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             File used as the comparison file under test.<br>
             This can be a full path, a relative path, or a file name. If
             it is a relative path or a file name, the command will try to
             find the file in the project's Datapool\Test directory.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>FilterMode</B><BR/><short_desc xmlns=""> 
             (Future) Specify a file filter to use to process the text before comparison.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>FilterOptions</B><BR/><short_desc xmlns=""> 
             (Future) Specify filter options to use with the file filter.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyGUIImageToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WFSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='WFSupport' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W, F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, VerifyGUIImageToFile, "comp.bmp"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, VerifyGUIImageToFile, "comp.bmp", "", "", "UUID=False"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, VerifyGUIImageToFile, "comp.jpg"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, VerifyGUIImageToFile, "comp.jpg", "", 95</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, VerifyGUIImageToFile, "comp.bmp", SUBAREA</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, VerifyGUIImageToFile, "comp.jpg", "", "", "", "Filter=0;0;10;10 60;60;10;15"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, COMPONENT, VerifyGUIImageToFile, "comp.jpg", "", "", "", "FilterMapKey"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchmarkFile</B><BR/><short_desc xmlns="">
             Name of the benchmark image file.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              Name of the benchmark image file.
              Relative paths suitable for FindSQAFile can be used. Normally,
              the Benchmark file would reside in the Project's Datapool\Bench
              directory. A test file with the same name would be created in
              the Datapool\Test folder. The resulting dif file with .txt
              extension would be saved under the Datapool\Dif folder. The
              extension of the benchmark file should be .bmp or .jpg. If not,
              it is considered a BMP file, i.e. the test file would have a
              .bmp extension.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>SubArea</B><BR/><short_desc xmlns="">
             Optional app map subkey indicating partial image of the component to verify.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              Optional app map subkey indicating partial image of the component to verify.
              Value of this app map reference must be in the format of a
              top-left and bottom-right pair, and can be either absolute
              coordinates or percentages ("x1,y1,x2,y2" or "x1%,y1%,x2%,y2%").
              Coordinates are relative to the component, i.e. (0,0) and
              (0%,0%) are the minimum, and (COMPONENT_WIDTH, COMPONENT_HEIGHT)
              and (100%,100%) are the maximum. Values exceeding the minimun/
              maximum are forced to the nearest limiting value. Absolute and
              percent values can be mixed, so "0,0,50%,50%" is valid. If this
              parameter is omitted, full image of the component is captured
              (equivalent to "0,0,100%,100%").
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>PercentageTolerance</B><BR/><short_desc xmlns="">
             The percentage of bits need to be matched.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
	            The percentage of bits need to be matched. it is between 0 and 100.<br>
	            100 means only all bits of images match, the images will be considered matched.<br>
	            0 means even no bits matche, the images will be considered matched.<br>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>UUIDFlag</B><BR/><short_desc xmlns="">
             "UUID=False" to make Test/Actuals Filenames the same as the Benchmark.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              If "UUID=False" is present, and the Engine defaults to appending Universally Unique IDs to 
              the filenames stored as runtime Test/Actuals, then this setting will prevent the appending of those 
              UUIDs to the runtime Test/Actual filename. Essentially, the Test/Actual filename will generally be 
              given the same filename as the benchmark.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>FilteredAreas</B><BR/><short_desc xmlns="">
              "<b>Filter=</b>one or multiple areas" to filter the GUI image (or sub image of GUI if the parameter "SubArea" is present)
              and it will also be used to filter the bench image before comparing. If there are some differences, the diff image
              will be made between these 2 filtered images (not the acutal and bench image).
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
              "<b>Filter=</b>one or multiple areas" to filter the GUI image (or sub image of GUI if the parameter "SubArea" is present)
              and it will also be used to filter the bench image before comparing. If there are some differences, the diff image
              will be made between these 2 filtered images (not the acutal and bench image).<br>
              The area is in the same format described for the parameter "SubArea".<br>
              Multiple areas are separated by a space character, such as "subarea1 subarea2 subarea3"<br>
              The actual-image and bench-image will be covered by black color at filtered areas.<br>
              Do NOT forget the prefix "Filter=", without it this parameter will be ignored.
             </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyObjectDataToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WFSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W, F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Browser, HTMLTable, VerifyObjectDataToFile, aFilename.ext, , "", ""</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, HTMLTable, VerifyObjectDataToFile, aFilename.ext, "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchmarkFile</B><BR/><short_desc xmlns="">
             The name of the file used as the comparison benchmark.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             The name of the file used as the comparison benchmark.<br>
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>FileEncoding</B><BR/><short_desc xmlns="">
             Specify a character encoding to be used when opening a bench file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>FilterMode</B><BR/><short_desc xmlns="">
             (Future) Specify a file filter to use to process the text before comparison.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>FilterOptions</B><BR/><short_desc xmlns="">
             (Future) Specify filter options to use with the file filter.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyPropertiesSubsetToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Window, Comp, VerifyPropertiesSubsetToFile, aFilename.ext</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Window, Comp, VerifyPropertiesSubsetToFile, aFilename.properties, "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchFile</B><BR/><short_desc xmlns="">
             The name of the file used to store the benchmark property data.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             The name of the file used to store the benchmark property data.
             By default, the files are expected in the active "Bench" directory.  
             If you specify a relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>FileEncoding</B><BR/><short_desc xmlns="">
             Specify a character encoding to be used when loading data from the file.
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             Specify a character encoding to be used when loading data from the file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyPropertiesToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Window, Comp, VerifyPropertiesToFile, aFilename.ext</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Window, Comp, VerifyPropertiesToFile, aFilename.properties, "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchFile</B><BR/><short_desc xmlns="">
             The name of the file used to store the benchmark property data.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             The name of the file used to store the benchmark property data.
             By default, the files are expected in the active "Bench" directory.  
             If you specify a relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>FileEncoding</B><BR/><short_desc xmlns="">
             Specify a character encoding to be used when loading data from the file.
             </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             Specify a character encoding to be used when loading data from the file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyProperty</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                , F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WindowID, WindowID, VerifyProperty, Visible, True, ^CASESENSITIVE="False"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WindowID, CheckboxID, VerifyProperty, State, "Unchecked"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>PropertyName</B><BR/><short_desc xmlns="">
             The case-sensitive name of the object property to verify.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ExpectedValue</B><BR/><short_desc xmlns="">
             The case-sensitive value we expect to get from the object property.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>CaseInsensitive</B><BR/><short_desc xmlns="">
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the property value and the expected value to ignore case.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyPropertyContains</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                , F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WindowID, WindowID, VerifyPropertyContains, Value, someSubstring, ^CaseSensitive="False"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WindowID, CheckboxID, VerifyPropertyContains, State, "Unc"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>PropertyName</B><BR/><short_desc xmlns="">
             The case-sensitive name of the object property to verify.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>SearchString</B><BR/><short_desc xmlns="">
             The case-sensitive value we expect the object property to contain.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>CaseInsensitive</B><BR/><short_desc xmlns="">
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the property value and the expected value to ignore case.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyPropertyToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WFSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W, F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Browser, HTMLTable, VerifyPropertyToFile, "innerText", aFilename.ext, , "", ""</FONT></LI>
<LI type="circle"><FONT color="#800080">T, Browser, HTMLTable, VerifyPropertyToFile, "innerText", c:\Dir\aFilename.ext</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, HTMLTable, VerifyPropertyToFile, "innerText", c:\Dir\aFilename.ext, "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>PropertyName</B><BR/><short_desc xmlns="">
             The case-sensitive name of the object property to verify.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>BenchmarkFile</B><BR/><short_desc xmlns="">
             The name of the file used as the comparison benchmark.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             The name of the file used as the comparison benchmark.<br>
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>FileEncoding</B><BR/><short_desc xmlns="">
             Specify a character encoding to be used when opening a bench file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>FilterMode</B><BR/><short_desc xmlns="">
             (Future) Specify a file filter to use to process the text before comparison.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>FilterOptions</B><BR/><short_desc xmlns="">
             (Future) Specify filter options to use with the file filter.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyTabOrder</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Window, Window, VerifyTabOrder, FileName</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Window, Component, VerifyTabOrder, FileName</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>FileName</B><BR/><short_desc xmlns="">
                Filename of TabOrder benchmark file.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Filename of TabOrder benchmark file.<p>
                The file is simply a list of component names in the order we expect to find
                them as we tab through the interface.  Each line in the file will contain a
                single component name.</p><p>
                This file would normally be placed in the Datapool\Bench directory.</p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyTextFileToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WFSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W, F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Browser, HTMLTable, VerifyTextFileToFile, bFilename.ext, aFilename.ext, "", ""</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Anything, AtAll, VerifyTextFileToFile, c:\Dir\bFilename.ext, c:\Dir\aFilename.ext</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchmarkFile</B><BR/><short_desc xmlns=""> 
             File used as the comparison benchmark.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             File used as the comparison benchmark.<br>
             This can be a full path, a relative path, or a file name. If
             it is a filename, it is expected to be in the project's 
             Datapool\Bench directory. If it is a relative path, 
             FindSQAFile is used to located the file.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ActualFile</B><BR/><short_desc xmlns=""> 
             File used as the comparison file under test.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             File used as the comparison file under test.<br>
             This can be a full path, a relative path, or a file name. If
             it is a relative path or a file name, the command will try to
             find the file in the project's Datapool\Test directory.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>FilterMode</B><BR/><short_desc xmlns=""> 
             (Future) Specify a file filter to use to process the text before comparison.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>FilterOptions</B><BR/><short_desc xmlns=""> 
             (Future) Specify filter options to use with the file filter.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyValueContains</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                , F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, anything, anything, VerifyValueContains, someString, someSubstring</FONT></LI>
<LI type="circle"><FONT color="#800080">T, anything, anything, VerifyValueContains, "here i am", "re i"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, anything, anything, VerifyValueContains, ^myVariable, "substr"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, anything, anything, VerifyValueContains, "someString", ^myVariable</FONT></LI>
<LI type="circle"><FONT color="#800080">T, anything, anything, VerifyValueContains, ^yourVariable, ^myVariable</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, anything, anything, VerifyValueContains, ^yourVariable, ^myVariable, "SuppressValue"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Value</B><BR/><short_desc xmlns="">
             The case-sensitive string value to verify.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  If this string is blank, the only possible match is
                  if the SearchString is also blank.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>SearchString</B><BR/><short_desc xmlns="">
             The case-sensitive value we expect the preceeding string to contain.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  If the SearchString is blank, that will match the searched 
                  Value ONLY if that value is also blank.
                  Note: not true for RobotJ version.  In RobotJ
             version, if SearchString is blank, then it will always
             match.  If you want to see if both strings are blank, use
             the keyword 'VerifyValues' instead.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>SuppressValue</B><BR/><short_desc xmlns="">
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
               The case-insensitive value "SUPPRESSVALUE" instructs the implementation to NOT 
               log the Value when logging.  This is generally 
               useful with Values that are exceedingly long, or contain large volumes 
               of text that will break-up the format or readability of the output log.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyValueContainsIgnoreCase</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                , F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, anything, anything, VerifyValueContainsIgnoreCase, someString, someSubstring</FONT></LI>
<LI type="circle"><FONT color="#800080">T, anything, anything, VerifyValueContainsIgnoreCase, "here i am", "re i"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, anything, anything, VerifyValueContainsIgnoreCase, ^myVariable, "substr"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, anything, anything, VerifyValueContainsIgnoreCase, "someString", ^myVariable</FONT></LI>
<LI type="circle"><FONT color="#800080">T, anything, anything, VerifyValueContainsIgnoreCase, ^yourVariable, ^myVariable</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, anything, anything, VerifyValueContainsIgnoreCase, ^yourVariable, ^myVariable, "SuppressValue"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Value</B><BR/><short_desc xmlns="">
             The case-insensitive string value to verify.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  If this string is blank, the only possible match is
                  if the SearchString is also blank.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>SearchString</B><BR/><short_desc xmlns="">
             The case-insensitive value we expect the preceeding string to contain.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  If the SearchString is blank, that will match the searched 
                  Value ONLY if that value is also blank.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>SuppressValue</B><BR/><short_desc xmlns="">
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
               The case-insensitive value "SUPPRESSVALUE" instructs the implementation to NOT 
               log the Value when logging.  This is generally 
               useful with Values that are exceedingly long, or contain large volumes 
               of text that will break-up the format or readability of the output log.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyValueDoesNotContain</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Anything, AtAll, VerifyValueDoesNotContain, "someString", "another"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, Anything, AtAll, VerifyValueDoesNotContain, ^myVariable, "substr"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, Anything, AtAll, VerifyValueDoesNotContain, "someString", ^myVariable</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Anything, AtAll, VerifyValueDoesNotContain, "someString", ^myVariable, "SuppressValue"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Value</B><BR/><short_desc xmlns="">
             The case-sensitive string value to verify.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  If this string is blank, the compare value should NOT be blank.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>SearchString</B><BR/><short_desc xmlns="">
             The case-sensitive value we do NOT want to find in the provided Value.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  If the SearchString is blank, success if Value is NOT blank.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>SuppressValue</B><BR/><short_desc xmlns="">
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
               The case-insensitive value "SUPPRESSVALUE" instructs the implementation to NOT 
               log the Value when logging.  This is generally 
               useful with Values that are exceedingly long, or contain large volumes 
               of text that will break-up the format or readability of the output log.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyValues</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                , F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, anything, anything, VerifyValues, ^myVariable, "astring"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, anything, anything, VerifyValues, "astring", ^myVariable</FONT></LI>
<LI type="circle"><FONT color="#800080">T, anything, anything, VerifyValues, ^yourVariable, ^myVariable</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, anything, anything, VerifyValues, ^yourVariable, ^myVariable, "SuppressValue"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Value1</B><BR/><short_desc xmlns="">
              A case-sensitive string value to compare.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  If this string is blank, the only possible match is
                  if Value2 is also blank.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Value2</B><BR/><short_desc xmlns="">
             A case-sensitive value to compare.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  If this string is blank, the only possible match is
                  if Value1 is also blank.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>SuppressValue</B><BR/><short_desc xmlns="">
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
               The case-insensitive value "SUPPRESSVALUE" instructs the implementation to NOT 
               log the Value when logging.  This is generally 
               useful with Values that are exceedingly long, or contain large volumes 
               of text that will break-up the format or readability of the output log.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyValuesIgnoreCase</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                , F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, anything, anything, VerifyValuesIgnoreCase, ^myVariable, "aSTring"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, anything, anything, VerifyValuesIgnoreCase, "asTRing", ^myVariable</FONT></LI>
<LI type="circle"><FONT color="#800080">T, anything, anything, VerifyValuesIgnoreCase, ^yourVariable, ^myVariable</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, anything, anything, VerifyValuesIgnoreCase, ^yourVariable, ^myVariable, "SuppressValue"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Value1</B><BR/><short_desc xmlns="">
              A case-insensitive string value to compare.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  If this string is blank, the only possible match is
                  if Value2 is also blank.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Value2</B><BR/><short_desc xmlns="">
             A case-insensitive value to compare.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  If this string is blank, the only possible match is
                  if Value1 is also blank.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>SuppressValue</B><BR/><short_desc xmlns="">
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
               The case-insensitive value "SUPPRESSVALUE" instructs the implementation to NOT 
               log the Value when logging.  This is generally 
               useful with Values that are exceedingly long, or contain large volumes 
               of text that will break-up the format or readability of the output log.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyValuesNotEqual</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Anything, AtAll, VerifyValuesNotEqual, ^myVariable, "astring"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, Anything, AtAll, VerifyValuesNotEqual, "astring", ^myVariable</FONT></LI>
<LI type="circle"><FONT color="#800080">T, Anything, AtAll, VerifyValuesNotEqual, ^yourVariable, ^myVariable</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Anything, AtAll, VerifyValuesNotEqual, ^yourVariable, ^myVariable, "SUPPRESSVALUE"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Value1</B><BR/><short_desc xmlns="">
              A case-sensitive string value to compare.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  If this string is blank, the only possible success is
                  if Value2 is NOT blank.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Value2</B><BR/><short_desc xmlns="">
             A case-sensitive value to compare.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  If this string is blank, the only possible success is
                  if Value1 is NOT blank.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>SuppressValue</B><BR/><short_desc xmlns="">
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
               The case-insensitive value "SUPPRESSVALUE" instructs the implementation to NOT 
               log the Value when logging.  This is generally 
               useful with Values that are exceedingly long, or contain large volumes 
               of text that will break-up the format or readability of the output log.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>GenericObjectFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="GenericObjectFunctions.htm" target="_blank">
<FONT color="#000000">GenericObjectFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>AltLeftDrag</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, ALTLEFTDRAG, AnObject</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, ALTLEFTDRAG, ASubObject</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, ALTLEFTDRAG, "Coords=10;20;200;300"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                  Name of the AppMap subkey to lookup or literal text to use for an ALT left mouse drag.
                </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  <p>Name of the AppMap subkey to lookup and use for an ALT left mouse drag.
                  We expect the AppMap or literal text to contain the item in the format "x1,y1,x2,y2":</p>
                  <p><pre>
                  [GenericItem]
                  DragName="3,10,12,20"     OR
                  DragName="Coords=3,10,12,20"
                  </pre></p>
                  <p>
                  Both Fields #3 and #5 are used to locate the item in the App Map.
                  This routine does not specify an App Map so only the current Map
                  is used and it is expected to be valid.
                  </p>
                </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Click</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Abbot Commands'>ABT</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, CLICK</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, CLICK, AnObject</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, CLICK, ASubObject</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, CLICK, 10;20</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, CLICK, "Coords=10;20"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, CLICK, 10;20, False</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                (Optional)Name of the AppMap subkey to lookup or the literal text to use for the click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Without this we should click on the center of the object.
                <p>Name of the AppMap subkey to lookup and use for the click.
                We expect the AppMap or literal text to contain the item in the format "x,y":</p>
                <pre>
                [FolderTree]
                Node1="33,120"      OR
                Node1="Coords=33,120"
                ...
                [AnHTMLImage]
                AMappdedRegion=Coords=10,10
                ANamedRegion=AreaName=TechSupport
                AnIndexedRegion=AreaIndex=2
                AnotherRegion=AreaID=Contact
                </pre><p>  
                The results from the lookup are appended to the "Coords=" string 
                used by the Click command in Robot (only if necessary).  So any 
                valid content used with the Click command can be part of 
                this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.
                </p><p>
                The Rational Robot implementation also supports using literal text in 
                this parameter instead of an AppMapSubKey.  If the value retrieved from 
                this field is NOT found to exist in the App Map as a Sub Key then it 
                will be used as literal text as if it HAD been retrieved from the App Map.
				</p><p>
				Engines should also attempt to support coordinates separated by alternate separators.  
				The most common separators that should be supported would be:
				<ul>
				<li>"," (comma) Example: "50,200"</li>
				<li>";" (semi-colon) Example: "50;200"</li>
				<li>" " (space) Example: "50 200"</li>
				</ul>
				</p>
                <p><b>Important TID note.</b> The <a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" target="imagebased" alt="SAFS Image-Based Recognition Doc">TID IBT implementation</a> supports using literal text in 
                this parameter instead of an AppMapSubKey.  If the value retrieved from 
                this field is NOT found to exist in the App Map as a Sub Key then it 
                will be used as literal text as if it HAD been retrieved from the App Map.
                </p><p>
                Any coordinates provided for TID IBT are considered relative to the top-left (0,0) of the 
                image or item found unless PointRelative and\or Hotspot information in the IBT recognition 
                string change this initial relative point to be somewhere else.
                </p>
                <p><b>Important Abbot note.</b> Presently, there is no support for AppMapSubkey
                specification (5th field).
                </p>
		        <p>For IOS: Any optional coordinates MUST be specified as an integer number between 
		        0-100.  0 represents the extreme left (or top), while 100 represents the extreme 
		        right (or bottom). IOS does not use absolute coordinates, but relative coordinates 
		        representing a percentage of the element width or height.
		        </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>AutoScroll</B><BR/><short_desc xmlns=""> 
                (Optional) True|False. If the component will be scrolled into view automatically before clicking. The default value is true.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                If the component is out of view, the click action will not succeed. Normally we will scroll the component into view,
                and then perform the click action. But sometimes, the component is partially shown and click could work and user does not
                want the component shift, then we could turn off the auto-scroll ability by setting this parameter to false.<br>
                If this auto-scroll is turned off, user needs to make sure that component is shown by himself.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickScreenImage</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, ClickScreenImage</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, ClickScreenImage, AppMapLookup</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, COMPONENT, ClickScreenImage, "Coords=50;200"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubKey</B><BR/><short_desc xmlns=""> 
                (Optional) AppMapSubKey type of use as documented in the CLICK command.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickScreenLocation</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, ClickScreenLocation</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, ClickScreenLocation, "Coords=200,400"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, ClickScreenLocation, ASubObject</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, ClickScreenLocation</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                (Sometimes Optional)Name of the AppMap subkey to locate in the AppMap.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Without this there MUST be absolute screen coordinates stored in the AppMap 
                for the Window:Component specified.
                <p>
                Name of the AppMap subkey to locate in the App Map.  
                We expect the AppMap to contain the coordinates in the following supported formats:
                </p><p><pre>
                [Component]
                Node1="33,120"        (comma-delimited)      OR
                Node1="33;120"        (semi-colon delimited) OR
                Node1="33 120"        (space-delimited)      OR
                Node1="Coords=33,120" (comma-delimited)      OR
                Node1="Coords=33;120" (semi-colon delimited) OR
                Node1="Coords=33 120" (space-delimited)
                </pre></p><p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
                <p>
                This field can instead contain the literal text of any absolute or relative coordinates 
                in the same formats as shown above. </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickScreenPoint</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, BogusWin, BogusComp, ClickScreenPoint, 33;120</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Coords</B><BR/><short_desc xmlns=""> 
                The hardcoded X,Y screen coordinates--or the result of an expression--that provides the 
                absolute screen coordinates to click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The coordinates must be in the following supported formats:
                <p><pre>
                "33,120"        (comma-delimited)      OR
                "33;120"        (semi-colon delimited) OR
                "33 120"        (space-delimited)
                </pre></p><p>
		Note the "Coords=" prefix is NOT supported for this deprecated command.
		</p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CompareStoredData</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, SiteMapImage, COMPARESTOREDDATA, "AStoredVP"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, COMPARESTOREDDATA, "AStoredVP", "ExpectedResult=FAIL"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VPAsset</B><BR/><short_desc xmlns=""> 
                Name of the pre-existing VP asset stored in the currently running script.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Name of the pre-existing VP asset stored in the currently running script.
                If the name also exists in the app map under the component then the
                additional stored parameters are appended to the VP call.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>AddParams</B><BR/><short_desc xmlns=""> 
                Additional parameter name used for lookup, or as literal text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Another parameter that can be stored as a lookup reference in the app map 
                that will be added to any also stored in the app map under the VP name.
                This parameter will also be treated as literal text if lookup in the app map 
                fails.  In this way, we can add parameters to the VP thru literal text 
                instead of requiring any App Map entry.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CompareStoredProperties</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, COMPARESTOREDPROPERTIES, "AStoredVP"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, COMPARESTOREDPROPERTIES, "AStoredVP", "ExpectedResult=FAIL"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VPAsset</B><BR/><short_desc xmlns=""> 
                Name of the pre-existing VP asset stored in the currently running script.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Name of the pre-existing VP asset stored in the currently running script.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>AddParams</B><BR/><short_desc xmlns=""> 
                Additional parameter name used for lookup, or as literal text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Another parameter that can be stored as a lookup reference in the app map 
                that will be added to any also stored in the app map under the VP name.
                This parameter will also be treated as literal text if lookup in the app map 
                fails.  In this way, we can add parameters to the VP thru literal text 
                instead of requiring any App Map entry.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CtrlAltLeftDrag</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, CTRLALTLEFTDRAG, AnObject</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, CTRLALTLEFTDRAG, ASubObject</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, CTRLALTLEFTDRAG, "Coords=10;20;200;300"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                  Name of the AppMap subkey to lookup or literal text to use for the CTRL ALT left mouse drag.
                </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  <p>Name of the AppMap subkey to lookup and use for the CTRL ALT left mouse drag.
                  We expect the AppMap or literal text to contain the item in the format "x1,y1,x2,y2":</p>
                  <p><pre>
                  [GenericItem]
                  DragName="3,10,12,20"     OR
                  DragName="Coords=3,10,12,20"
                  </pre></p>
                  <p>
                  Both Fields #3 and #5 are used to locate the item in the App Map.
                  This routine does not specify an App Map so only the current Map
                  is used and it is expected to be valid.
                  </p>
                </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CtrlClick</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Abbot Commands'>ABT</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, CTRLCLICK</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, CTRLCLICK, , False</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, CTRLCLICK, AnObject</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, CTRLCLICK, ASubObject</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubkey</B><BR/><short_desc xmlns="">
                (Optional) Name of the AppMap subkey to lookup and use for the CTRL-click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Without this we should click the center of the object.
                <p>Name of the AppMap subkey to lookup and use for the CTRL-click.
                We expect the AppMap to contain the item in the format "x,y":</p>
                <p><pre>
                [ToolItem]
                PrintTool="33,120"      OR
                PrintTool="Coords=33,120"
                </pre></p>
                <p>
                The results from the lookup are appended to the "Coords=" string
                used by the GenericObject Ctrl_Click command in Robot (if necessary).
                So any valid content used with the Ctrl_Click command can be
                part of this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.
				</p><p>
				Engines should also attempt to support coordinates separated by alternate separators.  
				The most common separators that should be supported would be:
				<ul>
				<li>"," (comma) Example: "50,200"</li>
				<li>";" (semi-colon) Example: "50;200"</li>
				<li>" " (space) Example: "50 200"</li>
				</ul>
				</p><p>
                <b>Important Abbot note.</b> Presently, there is no support for AppMapSubkey
                specification (5th field).
                </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>AutoScroll</B><BR/><short_desc xmlns=""> 
                (Optional) True|False. If the component will be scrolled into view automatically before clicking. The default value is true.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                If the component is out of view, the click action will not succeed. Normally we will scroll the component into view,
                and then perform the click action. But sometimes, the component is partially shown and click could work and user does not
                want the component shift, then we could turn off the auto-scroll ability by setting this parameter to false.<br>
                If this auto-scroll is turned off, user needs to make sure that component is shown by himself.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CtrlClickScreenImage</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, CtrlClickScreenImage</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, CtrlClickScreenImage, AppMapLookup</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, COMPONENT, CtrlClickScreenImage, "Coords=50;200"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubKey</B><BR/><short_desc xmlns=""> 
                (Optional) AppMapSubKey type of use as documented in the CLICK command.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CtrlLeftDrag</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, CTRLLEFTDRAG, AnObject</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, CTRLLEFTDRAG, ASubObject</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, CTRLLEFTDRAG, "Coords=10;20;200;300"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                  Name of the AppMap subkey to lookup or literal text to use for the CTRL left mouse drag.
                </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  <p>Name of the AppMap subkey to lookup and use for the CTRL left drag.
                  We expect the AppMap or literal text to contain the item in the format "x1,y1,x2,y2":</p>
                  <p><pre>
                  [GenericItem]
                  DragName="3,10,12,20"     OR
                  DragName="Coords=3,10,12,20"
                  </pre></p>
                  <p>
                  Both Fields #3 and #5 are used to locate the item in the App Map.
                  This routine does not specify an App Map so only the current Map
                  is used and it is expected to be valid.
                  </p>
                </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CtrlRightClick</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, CtrlRightClick</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, CtrlRightClick, , False</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, CtrlRightClick, AnObject</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, CtrlRightClick, ASubObject</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubkey</B><BR/><short_desc xmlns="">
                (Optional) Name of the AppMap subkey to lookup and use for the CTRL-Right-Click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Without this we should click the center of the object.
                <p>Name of the AppMap subkey to lookup and use for the CTRL-Right-Click.
                We expect the AppMap to contain the item in the format "x,y":</p>
                <p><pre>
                [ToolItem]
                PrintTool="33,120"      OR
                PrintTool="Coords=33,120"
                </pre></p>
                <p>
                The results from the lookup are appended to the "Coords=" string
                used by the GenericObject CTRL-Right-Click command in Robot (if necessary).
                So any valid content used with the CTRL-Right-Click command can be
                part of this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>AutoScroll</B><BR/><short_desc xmlns=""> 
                (Optional) True|False. If the component will be scrolled into view automatically before clicking. The default value is true.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                If the component is out of view, the click action will not succeed. Normally we will scroll the component into view,
                and then perform the click action. But sometimes, the component is partially shown and click could work and user does not
                want the component shift, then we could turn off the auto-scroll ability by setting this parameter to false.<br>
                If this auto-scroll is turned off, user needs to make sure that component is shown by himself.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CtrlRightClickScreenImage</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, CtrlRightClickScreenImage</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, CtrlRightClickScreenImage, AppMapLookup</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, COMPONENT, CtrlRightClickScreenImage, "Coords=50;200"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubKey</B><BR/><short_desc xmlns=""> 
                (Optional) AppMapSubKey type of use as documented in the CLICK command.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CtrlShiftLeftDrag</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, CTRLSHIFTLEFTDRAG, AnObject</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, CTRLSHIFTLEFTDRAG, ASubObject</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, CTRLSHIFTLEFTDRAG, "Coords=10;20;200;300"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                  Name of the AppMap subkey to lookup or literal text to use for the CTRL SHIFT left mouse drag.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  <p>Name of the AppMap subkey to lookup and use for the CTRL SHIFT left mouse drag.
                  We expect the AppMap or literal text to contain the item in the format "x1,y1,x2,y2":</p>
                  <p><pre>
                  [GenericItem]
                  DragName="3,10,12,20"     OR
                  DragName="Coords=3,10,12,20"
                  </pre></p>
                  <p>
                  Both Fields #3 and #5 are used to locate the item in the App Map.
                  This routine does not specify an App Map so only the current Map
                  is used and it is expected to be valid.
                  </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DoubleClick</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Abbot Commands'>ABT</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, DOUBLECLICK</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, DOUBLECLICK, , False</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, DOUBLECLICK, AnObject</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, DOUBLECLICK, ASubObject</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, DOUBLECLICK, "Coords=10;20"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                (Optional) Name of the AppMap subkey to lookup or the literal text to use for the double click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Without this we should click the center of the object.
                <p>Name of the AppMap subkey to lookup and use for the double click.
                We expect the AppMap or literal text to contain the item in the format "x,y":</p>
                <p><pre>
                [FolderTree]
                Node1="33,120"      OR
                Node1="Coords=33,120"
                </pre></p>
                <p>
                The results from the lookup are appended to the "Coords=" string 
                used by the GenericObject DBLClick command in Robot (if necessary).  
                So any valid content used with the DBLClick command can be 
                part of this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
                <p><b>Important Abbot note.</b> Presently, there is no support for AppMapSubkey
                specification (5th field).
				</p><p>
				Engines should also attempt to support coordinates separated by alternate separators.  
				The most common separators that should be supported would be:
				<ul>
				<li>"," (comma) Example: "50,200"</li>
				<li>";" (semi-colon) Example: "50;200"</li>
				<li>" " (space) Example: "50 200"</li>
				</ul>
				</p>
                <p><b>Important TID note.</b> The <a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" target="imagebased" alt="SAFS Image-Based Recognition Doc">TID IBT implementation</a> supports using literal text in 
                this parameter instead of an AppMapSubKey.  If the value retrieved from 
                this field is NOT found to exist in the App Map as a Sub Key then it 
                will be used as literal text as if it HAD been retrieved from the App Map.
                </p><p>
                Any coordinates provided for TID IBT are considered relative to the top-left (0,0) of the 
                image or item found unless PointRelative and\or Hotspot information in the IBT recognition 
                string change this initial relative point to be somewhere else.
                </p>
		        <p>For IOS: Any optional coordinates MUST be specified as an integer number between 
		        0-100.  0 represents the extreme left (or top), while 100 represents the extreme 
		        right (or bottom). IOS does not use absolute coordinates, but relative coordinates 
		        representing a percentage of the element width or height.
		        </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>AutoScroll</B><BR/><short_desc xmlns=""> 
                (Optional) True|False. If the component will be scrolled into view automatically before clicking. The default value is true.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                If the component is out of view, the click action will not succeed. Normally we will scroll the component into view,
                and then perform the click action. But sometimes, the component is partially shown and click could work and user does not
                want the component shift, then we could turn off the auto-scroll ability by setting this parameter to false.<br>
                If this auto-scroll is turned off, user needs to make sure that component is shown by himself.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DoubleClickScreenImage</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, DoubleClickScreenImage</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, DoubleClickScreenImage, AppMapItem</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, DoubleClickScreenImage, "50;100"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, COMPONENT, DoubleClickScreenImage, "Coords=50;100"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubKey</B><BR/><short_desc xmlns=""> 
                (Optional) AppMapSubKey as documented in the CLICK command.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DoubleClickScreenLocation</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, DoubleClickScreenLocation</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, DoubleClickScreenLocation, "Coords=200,400"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, DoubleClickScreenLocation, ASubObject</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, DoubleClickScreenLocation</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                (Sometimes Optional)Name of the AppMap subkey to locate in the AppMap.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Without this there MUST be absolute screen coordinates stored in the AppMap 
                for the Window:Component specified.
                <p>
                Name of the AppMap subkey to locate in the App Map.  
                We expect the AppMap to contain the coordinates in the following supported formats:
                </p><p><pre>
                [Component]
                Node1="33,120"        (comma-delimited)      OR
                Node1="33;120"        (semi-colon delimited) OR
                Node1="33 120"        (space-delimited)      OR
                Node1="Coords=33,120" (comma-delimited)      OR
                Node1="Coords=33;120" (semi-colon delimited) OR
                Node1="Coords=33 120" (space-delimited)
                </pre></p><p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
                <p>
                This field can instead contain the literal text of any absolute or relative coordinates 
                in the same formats as shown above. </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DoubleClickScreenPoint</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, BogusWin, BogusComp, DoubleClickScreenPoint, 33;120</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Coords</B><BR/><short_desc xmlns=""> 
                The hardcoded X,Y screen coordinates--or the result of an expression--that provides the 
                absolute screen coordinates to click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The coordinates must be in the following supported formats:
                <p><pre>
                "33,120"        (comma-delimited)      OR
                "33;120"        (semi-colon delimited) OR
                "33 120"        (space-delimited)
                </pre></p><p>
		Note the "Coords=" prefix is NOT supported for this deprecated command.
		</p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DoubleTap</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
</LI>
<LI><FONT color="#000000"><B>DragTo</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW,COMPONENT, DRAGTO, ToWINDOW,ToCOMPONENT</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW,COMPONENT, DRAGTO, ToWINDOW,ToCOMPONENT,"50%,50%,50%,50%"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW,COMPONENT, DRAGTO, WINDOW,COMPONENT,"50%;50%;75%;75%"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW,COMPONENT, DRAGTO, ToWINDOW,ToCOMPONENT,"50%,50%,50%,50%","FromSubItem"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW,COMPONENT, DRAGTO, ToWINDOW,ToCOMPONENT,50%,50%,50%,50%,"FromSubItem","ToSubItem"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ToWindow</B><BR/><short_desc xmlns="">ToWindow object.</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">ToWindow recognition string define into AppMap.</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ToComponent</B><BR/><short_desc xmlns="">ToComponent object.</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">ToComponent recognition string define into AppMap.</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Offsets</B><BR/><short_desc xmlns=""> 
                Drag and release location of from-component and to-component. 
                Offsets syntax will be "50%,50%,70%,70%"", where first two percentages are for from-component 
                and second two are for to-component. If offsets are not specified then center will be used.<br>
                Default value, both components center.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>FromSubItem</B><BR/><short_desc xmlns="">Text of from-component's sub item.</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">FromSubItem as text. e.g tree node or list item or any sub main component's item.</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>ToSubItem</B><BR/><short_desc xmlns="">Text of to-component's sub item.</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">ToSubItem as text. e.g tree node or list item or any sub main component item.</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>Pause</B><BR/><short_desc xmlns="">Pause time in millisecond to hold the button before releasing.</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The default pause time is 800 milliseconds, which may not enough for the AUT to react.
                User could provide a larger value according to his needs.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Flick</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, Flick</FONT></LI>
<LI type="circle"><FONT color="#800080">T, MainApp, MyTree, Flick, TopRightToBottom</FONT></LI>
<LI type="circle"><FONT color="#800080">T, MainApp, MyTree, Flick, TopRightToBottom, 3</FONT></LI>
<LI type="circle"><FONT color="#800080">T, MainApp, MyTree, Flick, "", "", 2</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, MainApp, MyTree, Flick, "", "", "", 3</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubKey</B><BR/><short_desc xmlns="">
                 Optional AppMap SubKey (or literal text) containing x1,y1,x2,y2 flick offsets within the object.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 Without this we should perform a default right-to-left Flick.
                 <p>Name of the AppMap subkey to lookup and use for the command.
                 We expect the AppMap or literal text to contain the item in the format "x1,y1,x2,y2":</p>
                 <pre>
                 [ComponentName]
                 OffsetName="0;0;100;100"
                 </pre><p>  
                 Both Fields #3 (Component Name) and #5 (Offset Name) are used to locate the item in the App Map.
                 This routine does not specify an App Map so only the current Map is used and it is expected to be valid.
                 </p><p>
                 If no such App Map lookup exists, then we will assume the field contains the offset value directly.
                 </p><p>                 
                 Offsets are "relative" to the object.  Each value should be an integer 0-100 representing 
                 the relative percentage where 0 is the minimum (left or top) and 100 is the maximum width or height 
                 of the object.  Thus: 0,0,100,100 represents a flick from the topleft corner to the bottomright 
                 corner of the object.
		         </p><p>
		         Engines should attempt to support offsets separated by different characters.  
		         The most common separators that should be supported would be:
		         <ul>
		         <li>"," (comma) Example: "0,0,100,100" (topleft to bottomright)</li>
		         <li>";" (semi-colon) Example: "100;0;0;100" (topright to bottomleft)</li>
		         <li>" " (space) Example: "0 50 100 50" (leftcenter to rightcenter)</li>
		         </ul>
		         </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Duration</B><BR/><short_desc xmlns="">
                 Optional number of seconds (0 to N) to press on the object.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 Optional number of seconds (0 to N) to press on the item.  The default value is 1.  
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Touches</B><BR/><short_desc xmlns="">
                 Optional number of touches or fingers to use.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 Optional number of touches or fingers to use.  The default value is 1.  
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>Repeat</B><BR/><short_desc xmlns="">
                 Optional number of times to repeat the operation.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 Optional number of times to repeat the operation.  
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>FlickDown</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, FlickDown</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, COMPONENT, FlickDown, 3</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Repeat</B><BR/><short_desc xmlns="">
                 Optional number of times to repeat the operation.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 Optional number of times to repeat the operation.  
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>FlickLeft</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, FlickLeft</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, COMPONENT, FlickLeft, 3</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Repeat</B><BR/><short_desc xmlns="">
                 Optional number of times to repeat the operation.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 Optional number of times to repeat the operation.  
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>FlickRight</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, FlickRight</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, COMPONENT, FlickRight, 3</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Repeat</B><BR/><short_desc xmlns="">
                 Optional number of times to repeat the operation.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 Optional number of times to repeat the operation.  
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>FlickUp</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, FlickUp</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, COMPONENT, FlickUp, 3</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Repeat</B><BR/><short_desc xmlns="">
                 Optional number of times to repeat the operation.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 Optional number of times to repeat the operation.  
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>HScrollTo</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, Object, HSCROLLTO, 0</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, Object, HSCROLLTO, 10</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>POSITION</B><BR/><short_desc xmlns=""> 
                 Integer value that specifies the absolute position to scroll to.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Integer value that specifies the absolute position to scroll to,
                 as would be used in the "Position=%" parameter for the HScrollTo 
                 action of the SQABasic GenericObject command.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>JavaMenuSelect</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, MAINMENU, JavaMenuSelect, FileOpen</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>JavaMenuItem</B><BR/><short_desc xmlns=""> 
                Name of the Java menuitem to lookup and use for the selection.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                <p>Name of the Java menuitem to lookup and use for the selection.
                We expect the AppMap to contain the item in the format "Path=Menu-&gt;Item":</p>
                <p>
                [MainMenu]
                FileOpen="Path=File-&gt;Open"</p>
                <p>  
                The full results from the AppMap lookup are used, so any 
                valid content used with the JavaMenu Click command can be part of 
                this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>LeftDrag</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, LEFTDRAG, AnObject</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, LEFTDRAG, ASubObject</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, LEFTDRAG, "Coords=10;20;200;300"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                Name of the AppMap subkey to lookup or literal text to use for the left mouse drag.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                <p>Name of the AppMap subkey to lookup and use for the left drag.
                We expect the AppMap or literal text to contain the item in the format "x1,y1,x2,y2":</p>
                <p><pre>
                [GenericItem]
                DragName="3,10,12,20"     OR
                DragName="Coords=3,10,12,20"
                </pre></p>
                <p>
                The results from the lookup are appended to the "Coords=" string 
                used by the GenericObject Left_Drag command in Robot (if necessary).  
                So any valid content used with the Left_Drag command can be 
                part of this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
                <p><b>Important TID note.</b> The <a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" target="imagebased" alt="SAFS Image-Based Recognition Doc">TID IBT implementation</a> supports using literal text in 
                this parameter instead of an AppMapSubKey.  If the value retrieved from 
                this field is NOT found to exist in the App Map as a Sub Key then it 
                will be used as literal text as if it HAD been retrieved from the App Map.
                </p><p>
                Any coordinates provided for TID IBT are considered relative to the top-left (0,0) of the 
                image or item found unless PointRelative and\or Hotspot information in the IBT recognition 
                string change this initial relative point to be somewhere else.
                </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>MouseClick</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, MOUSECLICK</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, MOUSECLICK, AnObject</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, MOUSECLICK, ASubObject</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, MOUSECLICK, 10;20</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, MOUSECLICK, "Coords=10;20"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                (Optional)Name of the AppMap subkey to lookup or the literal text to use for the click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Without this we should click on the center of the object.
                <p>Name of the AppMap subkey to lookup and use for the click.
                We expect the AppMap or literal text to contain the item in the format "x,y":</p>
                <pre>
                [FolderTree]
                Node1="33,120"      OR
                Node1="Coords=33,120"
                ...
                [AnHTMLImage]
                AMappdedRegion=Coords=10,10
                ANamedRegion=AreaName=TechSupport
                AnIndexedRegion=AreaIndex=2
                AnotherRegion=AreaID=Contact
                </pre><p>  
                The results from the lookup are appended to the "Coords=" string 
                used by the MouseClick command in Robot (only if necessary).  So any 
                valid content used with the MouseClick command can be part of 
                this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.
                </p><p>
                The Rational Robot implementation also supports using literal text in 
                this parameter instead of an AppMapSubKey.  If the value retrieved from 
                this field is NOT found to exist in the App Map as a Sub Key then it 
                will be used as literal text as if it HAD been retrieved from the App Map.
				</p><p>
				Engines should also attempt to support coordinates separated by alternate separators.  
				The most common separators that should be supported would be:
				<ul>
				<li>"," (comma) Example: "50,200"</li>
				<li>";" (semi-colon) Example: "50;200"</li>
				<li>" " (space) Example: "50 200"</li>
				</ul>
				</p>                
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>MultiClick</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, MULTICLICK</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, MULTICLICK, "", "4"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, MULTICLICK, AnObject</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, MULTICLICK, ASubObject</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, MULTICLICK, 10;20</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, MULTICLICK, "Coords=10;20", "4"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                (Optional)Name of the AppMap subkey to lookup or the literal text to use for the clicks.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Without this we should click on the center of the object.
                <p>Name of the AppMap subkey to lookup and use for the click.
                We expect the AppMap or literal text to contain the item in the format "x,y":</p>
                <pre>
                [FolderTree]
                Node1="33,120"      OR
                Node1="Coords=33,120"
                ...
                [AnHTMLImage]
                AMappdedRegion=Coords=10,10
                ANamedRegion=AreaName=TechSupport
                AnIndexedRegion=AreaIndex=2
                AnotherRegion=AreaID=Contact
                </pre><p>  
                The results from the lookup are appended to the "Coords=" string 
                used by the Click command in Robot (only if necessary).  So any 
                valid content used with the Click command can be part of 
                this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.
                </p>
                <p><b>Important TID note.</b> The <a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" target="imagebased" alt="SAFS Image-Based Recognition Doc">TID IBT implementation</a> supports using literal text in 
                this parameter instead of an AppMapSubKey.  If the value retrieved from 
                this field is NOT found to exist in the App Map as a Sub Key then it 
                will be used as literal text as if it HAD been retrieved from the App Map.
                </p><p>
                Any coordinates provided for TID IBT are considered relative to the top-left (0,0) of the 
                image or item found unless PointRelative and\or Hotspot information in the IBT recognition 
                string change this initial relative point to be somewhere else.
                </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>ClickCount</B><BR/><short_desc xmlns="">
                 Optional number of times (1 to N) to click the item.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 Optional number of times (1 to N) to click the item.  The default if no value is provided is 3.  
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>MultiClickScreenImage</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, MULTICLICKSCREENIMAGE</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, MULTICLICKSCREENIMAGE, "", "4"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, MULTICLICKSCREENIMAGE, AnObject</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, MULTICLICKSCREENIMAGE, ASubObject</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, MULTICLICKSCREENIMAGE, 10;20</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, MULTICLICKSCREENIMAGE, "Coords=10;20", "4"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                (Optional)Name of the AppMap subkey to lookup or the literal text to use for the clicks.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Same as <a href="#detail_MultiClick" alt="Goto MultiClick">MULTICLICK</a>.<br>
                The keyword is simply provided as a means to differentiate 
                Object-Based Testing from Image-Based Testing in your tests. 
                However, this differentiation is not required.
		<p>
		Note: the TID supports this command using 
		<a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" target="imagebased" alt="SAFS Image-Based Recognition Doc">Image-Based Testing</a> 
		techniques and App Map entries as well as literal text coordinates.
		</p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>ClickCount</B><BR/><short_desc xmlns="">
                 Optional number of times (1 to N) to click the item.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 Optional number of times (1 to N) to click the item.  The default if no value is provided is 3.  
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Press</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, Press</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, COMPONENT, Press, 3</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Duration</B><BR/><short_desc xmlns="">
                 Optional number of seconds (0 to N) to press on the object.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 Optional number of seconds (0 to N) to press on the item.  The default if no value is provided is 0.  
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightClick</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Abbot Commands'>ABT</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, RIGHTCLICK</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, RIGHTCLICK, , False</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, RIGHTCLICK, AnObject</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, RIGHTCLICK, ASubObject</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, RIGHTCLICK, "Coords=10;20"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                (Optional) Name of the AppMap subkey to lookup or the literal text to use for the right click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Without this we should click on the center of the object.
                <p>Name of the AppMap subkey to lookup and use for the right click.
                We expect the AppMap or literal text to contain the item in the format "x,y":</p>
                <p><pre>
                [ToolItem]
                PrintTool="33,120"      OR
                PrintTool="Coords=33,120"
                </pre></p>
                <p>
                The results from the lookup are appended to the "Coords=" string 
                used by the GenericObject Right_Click command in Robot (if necessary).  
                So any valid content used with the Right_Click command can be 
                part of this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.
				</p><p>
				Engines should also attempt to support coordinates separated by alternate separators.  
				The most common separators that should be supported would be:
				<ul>
				<li>"," (comma) Example: "50,200"</li>
				<li>";" (semi-colon) Example: "50;200"</li>
				<li>" " (space) Example: "50 200"</li>
				</ul>				
                </p><p><b>Important TID note.</b> The <a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" target="imagebased" alt="SAFS Image-Based Recognition Doc">TID IBT implementation</a> supports using literal text in 
                this parameter instead of an AppMapSubKey.  If the value retrieved from 
                this field is NOT found to exist in the App Map as a Sub Key then it 
                will be used as literal text as if it HAD been retrieved from the App Map.
                </p><p>
                Any coordinates provided for TID IBT are considered relative to the top-left (0,0) of the 
                image or item found unless PointRelative and\or Hotspot information in the IBT recognition 
                string change this initial relative point to be somewhere else.
                </p>
                <p><b>Important Abbot note.</b> Presently, there is no support for AppMapSubkey
                specification (5th field).
                </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>AutoScroll</B><BR/><short_desc xmlns=""> 
                (Optional) True|False. If the component will be scrolled into view automatically before clicking. The default value is true.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                If the component is out of view, the click action will not succeed. Normally we will scroll the component into view,
                and then perform the click action. But sometimes, the component is partially shown and click could work and user does not
                want the component shift, then we could turn off the auto-scroll ability by setting this parameter to false.<br>
                If this auto-scroll is turned off, user needs to make sure that component is shown by himself.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightClickScreenImage</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, RightClickScreenImage</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, RightClickScreenImage, "Coords=10;20"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubKey</B><BR/><short_desc xmlns=""> 
                (Optional) AppMapSubKey or literal text as documented in the CLICK command.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightClickScreenLocation</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, RightClickScreenLocation</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, RightClickScreenLocation, "Coords=200,400"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, RightClickScreenLocation, ASubObject</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, RightClickScreenLocation</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                (Sometimes Optional)Name of the AppMap subkey to locate in the AppMap.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Without this there MUST be absolute screen coordinates stored in the AppMap 
                for the Window:Component specified.
                <p>
                Name of the AppMap subkey to locate in the App Map.  
                We expect the AppMap to contain the coordinates in the following supported formats:
                </p><p><pre>
                [Component]
                Node1="33,120"        (comma-delimited)      OR
                Node1="33;120"        (semi-colon delimited) OR
                Node1="33 120"        (space-delimited)      OR
                Node1="Coords=33,120" (comma-delimited)      OR
                Node1="Coords=33;120" (semi-colon delimited) OR
                Node1="Coords=33 120" (space-delimited)
                </pre></p><p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
                <p>
                This field can instead contain the literal text of any absolute or relative coordinates 
                in the same formats as shown above. </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightClickScreenPoint</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, BogusWin, BogusComp, RightClickScreenPoint, 33;120</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Coords</B><BR/><short_desc xmlns=""> 
                The hardcoded X,Y screen coordinates--or the result of an expression--that provides the 
                absolute screen coordinates to click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The coordinates must be in the following supported formats:
                <p><pre>
                "33,120"        (comma-delimited)      OR
                "33;120"        (semi-colon delimited) OR
                "33 120"        (space-delimited)
                </pre></p><p>
		Note the "Coords=" prefix is NOT supported for this deprecated command.
		</p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightDrag</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, RIGHTDRAG, AnObject</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, LEFTDRAG, ASubObject</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, RIGHTDRAG, "Coords=10;20;200;300"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                Name of the AppMap subkey to lookup or literal text to use for the right mouse drag.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                <p>Name of the AppMap subkey to lookup and use for the right drag.
                We expect the AppMap or literal text to contain the item in the format "x1,y1,x2,y2":</p>
                <p><pre>
                [GenericItem]
                DragName="3,10,12,20"     OR
                DragName="Coords=3,10,12,20"
                </pre></p>
                <p>
                The results from the lookup are appended to the "Coords=" string 
                used by the GenericObject Left_Drag command in Robot (if necessary).  
                So any valid content used with the Right_Drag command can be 
                part of this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
                <p><b>Important TID note.</b> The <a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" target="imagebased" alt="SAFS Image-Based Recognition Doc">TID IBT implementation</a> supports using literal text in 
                this parameter instead of an AppMapSubKey.  If the value retrieved from 
                this field is NOT found to exist in the App Map as a Sub Key then it 
                will be used as literal text as if it HAD been retrieved from the App Map.
                </p><p>
                Any coordinates provided for TID IBT are considered relative to the top-left (0,0) of the 
                image or item found unless PointRelative and\or Hotspot information in the IBT recognition 
                string change this initial relative point to be somewhere else.
                </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ShiftClick</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Abbot Commands'>ABT</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, SHIFTCLICK</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, SHIFTCLICK, , False</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, SHIFTCLICK, AnObject</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, SHIFTCLICK, ASubObject</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubkey</B><BR/><short_desc xmlns="">
                (Optional) Name of the AppMap subkey to lookup and use for the SHIFT click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Without this we should click on the center of the object.
                <p>Name of the AppMap subkey to lookup and use for the SHIFT click.
                We expect the AppMap to contain the item in the format "x,y":</p>
                <p><pre>
                [ToolItem]<br>
                PrintTool="33,120"      OR
                PrintTool="Coords=33,120"
                </pre></p>
                <p>
                The results from the lookup are appended to the "Coords=" string
                used by the GenericObject Shift_Click command in Robot (if necessary).
                So any valid content used with the Shift_Click command can be
                part of this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.
				</p><p>
				Engines should also attempt to support coordinates separated by alternate separators.  
				The most common separators that should be supported would be:
				<ul>
				<li>"," (comma) Example: "50,200"</li>
				<li>";" (semi-colon) Example: "50;200"</li>
				<li>" " (space) Example: "50 200"</li>
				</ul>
				</p>
                <p><b>Important Abbot note.</b> Presently, there is no support for AppMapSubkey
                specification (5th field).
                </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>AutoScroll</B><BR/><short_desc xmlns=""> 
                (Optional) True|False. If the component will be scrolled into view automatically before clicking. The default value is true.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                If the component is out of view, the click action will not succeed. Normally we will scroll the component into view,
                and then perform the click action. But sometimes, the component is partially shown and click could work and user does not
                want the component shift, then we could turn off the auto-scroll ability by setting this parameter to false.<br>
                If this auto-scroll is turned off, user needs to make sure that component is shown by himself.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ShiftClickScreenImage</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SAFS TID Commands'>TID</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, ShiftClickScreenImage</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, ShiftClickScreenImage, AppMapLookup</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, COMPONENT, ShiftClickScreenImage, "Coords=50;200"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubKey</B><BR/><short_desc xmlns=""> 
                (Optional) AppMapSubKey type of use as documented in the CLICK command.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ShiftLeftDrag</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, SHIFTLEFTDRAG, AnObject</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, SHIFTLEFTDRAG, ASubObject</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, SHIFTLEFTDRAG, "Coords=10;20;200;300"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                  Name of the AppMap subkey to lookup or literal text to use for the SHIFT left mouse drag.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  <p>Name of the AppMap subkey to lookup and use for the operation.
                  We expect the AppMap or literal text to contain the item in the format "x1,y1,x2,y2":</p>
                  <p><pre>
                  [GenericItem]
                  DragName="3,10,12,20"     OR
                  DragName="Coords=3,10,12,20"
                  </pre></p>
                  <p>
                  Both Fields #3 and #5 are used to locate the item in the App Map.
                  This routine does not specify an App Map so only the current Map
                  is used and it is expected to be valid.
                  </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Tap</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
</LI>
<LI><FONT color="#000000"><B>TwoFingerTap</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, COMPONENT, TwoFingerTap</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyImage</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, VERIFYIMAGE, "AStoredVP"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VPAsset</B><BR/><short_desc xmlns=""> 
                Name of the pre-existing VP asset stored in the currently running script.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Name of the pre-existing VP asset stored in the currently running script.
                If the name also exists in the app map under the component then 
                a RegionImageVP will be attempted.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VScrollTo</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, Object, VSCROLLTO, 0</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, Object, VSCROLLTO, 10</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>POSITION</B><BR/><short_desc xmlns=""> 
                 Integer value that specifies the absolute position to scroll to.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Integer value that specifies the absolute position to scroll to,
                 as would be used in the "Position=%" parameter for the VScrollTo 
                 action of the SQABasic GenericObject command.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>GraphicControlFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="GraphicControlFunctions.htm" target="_blank">
<FONT color="#000000">GraphicControlFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>Click</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, GraphicControl, CLICK</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickButton</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, GraphicControl, CLICKBUTTON</FONT></LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>HTMLDocumentFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="HTMLDocumentFunctions.htm" target="_blank">
<FONT color="#000000">HTMLDocumentFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>CaptureBodySourceToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebPage, CaptureBodySourceTofile, OutputFile</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebPage, CaptureBodySourceTofile, OutputFile, "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Filename</B><BR/><short_desc xmlns=""> 
                Name of the output file to create in the active "Test" directory.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Name of the output file to create in the active "Test" directory.  
                This is the name only, no path information is expected.  
                If the file extension is omitted then the default extension 
                of ".TXT" will be used.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>FileEncoding</B><BR/><short_desc xmlns="">
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CaptureBodyTextToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebPage, CaptureBodyTextTofile, OutputFile</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebPage, CaptureBodyTextTofile, OutputFile, "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Filename</B><BR/><short_desc xmlns=""> 
                Name of the output file to create in the active "Test" directory.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Name of the output file to create in the active "Test" directory.  
                This is the name only, no path information is expected.  
                If the file extension is omitted then the default extension 
                of ".TXT" will be used.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>FileEncoding</B><BR/><short_desc xmlns="">
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickLink</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebPage, CLICKLINK, "Yearly Reports"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebPage, CLICKLINK, "Yearly Reports", 1, "CaseSensitive"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebPage, CLICKLINK, "Yearly Reports", 4</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>CompareTextValue</B><BR/><short_desc xmlns=""> 
                The text to compare with each Link.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The text to compare with each Link.  By default this comparison is not 
                case-sensitive.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns="">
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
                The index is 1-based.  "1" selects the first matching link,
                "2" selects the second matching link, etc..
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>CaseSensitive</B><BR/><short_desc xmlns="">
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickLinkBeginning</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebPage, CLICKLINKBEGINNING, "Report Generated on"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebPage, CLICKLINKBEGINNING, "Report Generated on", 4</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebPage, CLICKLINKBEGINNING, "Report", 1, ^CaseSensitive="TRUE"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BeginningTextValue</B><BR/><short_desc xmlns=""> 
                The text (NOT case-sensitive) to compare with the beginning of each Link.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The text (NOT case-sensitive) to compare with the beginning of each Link.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
                The index is 1-based.  "1" selects the first matching link,
                "2" selects the second matching link, etc..
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>CaseSensitive</B><BR/><short_desc xmlns="">
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickLinkContaining</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebPage, CLICKLINKCONTAINING, "Yearly Reports"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebPage, CLICKLINKCONTAINING, "Yearly Reports", 1, "CaseSensitive"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebPage, CLICKLINKCONTAINING, "Yearly Reports", 4</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>CompareTextValue</B><BR/><short_desc xmlns=""> 
                The text to compare with each Link.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The text (NOT case-sensitive) to compare with each Link.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns="">
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
                The index is 1-based.  "1" selects the first matching link,
                "2" selects the second matching link, etc..
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>CaseSensitive</B><BR/><short_desc xmlns="">
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickLinkMatching</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebPage, ClickLinkMatching, "Yearly Reports"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebPage, ClickLinkMatching, "Yearly Reports", 1, "CaseSensitive"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebPage, ClickLinkMatching, "Yearly Reports", 4</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>CompareTextValue</B><BR/><short_desc xmlns=""> 
                The text to compare with each Link.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The text to compare with each Link.  By default this comparison is not 
                case-sensitive.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns="">
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Optional match index indicating the desired link is not the first
                link that matches, but the "nth" link that matches.
                The index is 1-based.  "1" selects the first matching link,
                "2" selects the second matching link, etc..
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>CaseSensitive</B><BR/><short_desc xmlns="">
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                "Case-Sensitive", "CaseSensitive", or "True" will make search case-sensitive.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyBodySource</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebPage, VERIFYBODYSOURCE, BenchmarkFile.TXT</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebPage, VERIFYBODYSOURCE, BenchmarkFile.TXT, "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Benchmark</B><BR/><short_desc xmlns=""> 
                Name of the benchmark file in the active "Bench" directory to 
                use for the actual test file comparison.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Name of the benchmark file in the active "Bench" directory to 
                use for the actual test file comparison.  This is the name 
                only, no path information is expected.  If the file extension
                is omitted then the default extension of ".TXT" will be used.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>FileEncoding</B><BR/><short_desc xmlns="">
             Specify a character encoding to be used when opening a bench file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyBodyText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebPage, VERIFYBODYTEXT, BenchmarkFile.TXT</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebPage, VERIFYBODYTEXT, BenchmarkFile.TXT, "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Benchmark</B><BR/><short_desc xmlns=""> 
                Name of the benchmark file in the active "Bench" directory to 
                use for the actual test file comparison.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Name of the benchmark file in the active "Bench" directory to 
                use for the actual test file comparison.  This is the name 
                only, no path information is expected.  If the file extension
                is omitted then the default extension of ".TXT" will be used.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>FileEncoding</B><BR/><short_desc xmlns="">
             Specify a character encoding to be used when opening a bench file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>HTMLFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="HTMLFunctions.htm" target="_blank">
<FONT color="#000000">HTMLFunctions Documentation.</FONT></A>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>HTMLImageFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="HTMLImageFunctions.htm" target="_blank">
<FONT color="#000000">HTMLImageFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>Click</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, SiteMapImage, CLICK, Center</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                Name of the AppMap subkey to lookup and use for the click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                <p>(OPTIONAL) Name of the AppMap subkey to lookup and use for the click.
                The AppMap can contain the item in any of the following formats:</p>
                <pre>
                [AnImage]
                AMappdedRegion=Coords=10,10
                ANamedRegion=AreaName=TechSupport
                AnIndexedRegion=AreaIndex=2
                AnotherRegion=AreaID=Contact
                </pre><p>
                Any valid content used with the HTMLImage Click command can be part 
                of this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickArea</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, ADefinedArea, ClickArea</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                (FUTURE) Name of the AppMap subkey to lookup and use for the image area click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                (FUTURE) Not used by RobotJ at this time.
                <p>
                The AppMap could contain the item in any of the following formats:
                </p><pre>
                [AnImage]
                AMappdedRegion=Coords=10,10
                ANamedRegion=AreaName=TechSupport
                AnIndexedRegion=AreaIndex=2
                AnotherRegion=AreaID=Contact
                </pre><p>
                Both Fields #3 and #5 would be used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                would be used and it is expected to be valid.</p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CompareStoredData</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, SiteMapImage, COMPARESTOREDDATA, "AStoredVP"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VPAsset</B><BR/><short_desc xmlns=""> 
                Name of the pre-existing VP asset stored in the currently running script.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Name of the pre-existing VP asset stored in the currently running script.
                If the name also exists in the app map under the component then the
                additional stored parameters are appended to the VP call.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CompareStoredProperties</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, SiteMapImage, COMPARESTOREDPROPERTIES, "AStoredVP"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VPAsset</B><BR/><short_desc xmlns=""> 
                Name of the pre-existing VP asset stored in the currently running script.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Name of the pre-existing VP asset stored in the currently running script.
                If the name also exists in the app map under the component then the
                additional stored parameters are appended to the VP call.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SaveHTMLImage</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, myImage, SaveHTMLImage, ^filename=myImage.jpg</FONT></LI>
<LI type="circle"><FONT color="#800080">T  WebBrowser  myImage  SaveHTMLImage  ^filename=c:\images\myImage.jpg ^xy="25,25"</FONT></LI>
<LI type="circle"><FONT color="#800080">T  WebBrowser  myImage  SaveHTMLImage  ^filename=images\myImage.jpg  ^xy="Coords=25,25"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T  WebBrowser  myImage  SaveHTMLImage  ^filename=images\myImage.jpg  ^xy="TopRight"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>FileName</B><BR/><short_desc xmlns=""> 
                Name of the image file.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                <p>(Required) Name of the file to use for the image save-as command.
                  This can be a full or relative path or a simple filename.
                  A relative path will be stored relative to the Project's root 
                  directory.  If a simple filename is provided it will be stored 
                  in the Project's Datapool\Test directory.</p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Coords</B><BR/><short_desc xmlns=""> 
                The explicit coordinates ("x,y"), or an App Map reference to 
                pre-defined coordinates.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                We first check to see if the field contains a reference to an 
                App Map item.  If that cannot be found, we will assume the field 
                contains explicit coordinates.
                <p>We expect the coordinates in the format "x,y":</p>
                <pre>
                [MyImage]
                TopRight=50,10
                Center=25,25
                BottomRight=Coords=50,40 
                </pre><p>
                The results from the lookup are appended to the "Coords=" string 
                used by the Click command in Robot (if necessary).</p>
                <p>
                Both Fields #3(component name) and #6(coords reference name) 
                are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
                <p>If this parameter is not provided, we will use default 
                coordinates of 3,3 for the right click.</p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyHTMLImage</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, myImage, VerifHTMLImage, ^bench=myImage.jpg</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, myImage, VerifHTMLImage, ^bench=myImage.jpg, ^rightclick="Coords=15,15"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, myImage, VerifHTMLImage, ^bench=myImage.jpg, ^rightclick=TopLeft</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchmarkFile</B><BR/><short_desc xmlns=""> 
                Name of the Benchmark image file.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                <p>(REQUIRED) Name of the file to use for the image save-as command
                and the benchmark file.  This can also be a full or relative path 
                suitable for <a href="FileUtilities.htm#findsqafile">FindSQAFile</a>.  
                If no full path or relative path is given then the benchmark file is 
                expected to be found in the project's Datapool\Bench directory.</p>
                <p>The captured image will be stored in the project's Datapool\Test
                project's Datapool/Test directory.  Any comparison difference will 
                be stored in the project's Datapool\Dif directory.</p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Coords</B><BR/><short_desc xmlns=""> 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                We first check to see if the field contains a reference to an 
                App Map item.  If that cannot be found, we will assume the field 
                contains explicit coordinates.
                <p>We expect the coordinates in the format "x,y":</p>
                <pre>
                [MyImage]
                TopLeft=10,10
                Center=Coords=25,25 
                </pre><p>
                The results from the lookup are appended to the "Coords=" string 
                used by the Click command in Robot (if necessary).</p>
                <p>
                Both Fields #3(component name) and #6(coords reference name) 
                are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
                <p>If this parameter is not provided, we will use default 
                coordinates of 3,3 for the right click.</p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>HTMLLinkFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="HTMLLinkFunctions.htm" target="_blank">
<FONT color="#000000">HTMLLinkFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>Click</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, URLLink, CLICK</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CompareStoredData</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, URLLink, COMPARESTOREDDATA, "AStoredVP"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VPAsset</B><BR/><short_desc xmlns=""> 
                Name of the pre-existing VP asset stored in the currently running script.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Name of the pre-existing VP asset stored in the currently running script.
                If the name also exists in the app map under the component then the
                additional stored parameters are appended to the VP call.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CompareStoredProperties</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, URLLink, COMPARESTOREDPROPERTIES, "AStoredVP"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VPAsset</B><BR/><short_desc xmlns=""> 
                Name of the pre-existing VP asset stored in the currently running script.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Name of the pre-existing VP asset stored in the currently running script.
                If the name also exists in the app map under the component then the
                additional stored parameters are appended to the VP call.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>HTMLTableFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="HTMLTableFunctions.htm" target="_blank">
<FONT color="#000000">HTMLTableFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>ActivateCell</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, ActivateCell</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, ActivateCell, 3, 4</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>AssignCellContainsTextRow</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, AssignCellContainsTextRow, Variable, "Date","Time", "09:58 AM", "Change","Change #2","Revision", "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Var</B><BR/><short_desc xmlns=""> 
                The variable which gets assigned the row found.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The variable which gets assigned the row found. If not found then it will get a zero 
                length string.  This variable also is the rootname for the variable that will receive 
                the cell text value once the row # is identified.  The cell value variable will be the  
                user-defined variable +".Value".
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # or header value, identifying the column for extracting the 
                cell value into variable +".Value".
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.
                  <p>
                  The field header comparisons are not case-senstive, and provided values can be substrings 
                  of the actual header value in the table.
                  </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ColN</B><BR/><short_desc xmlns=""> 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.  
                This must be accompanied by the next parameter, 'ValueN', and as many of the
                ColN/ValueN parameter pairs can be supplied as desired in order to match for a row 
                based on cell contents.
                <p>
                The field header comparisons are not case-senstive, and provided values can be substrings 
                of the actual header value in the table.
                </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>ValueN</B><BR/><short_desc xmlns=""> 
                A Value to search for in the 'COLN' column.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                These values can be partial substrings and are not case-sensitive.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>AssignCellTextRow</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, AssignCellTextRow, Variable, "Date","Time", "09:58 AM", "Change","Change #2","Revision", "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Var</B><BR/><short_desc xmlns=""> 
                The variable which gets assigned the row found.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The variable which gets assigned the row found. If not found then it will get a zero 
                length string.  This variable also is the rootname for the variable that will receive 
                the cell text value once the row # is identified.  The cell value variable will be this 
                user-defined variable +".Value".
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # or header value, identifying the column for extracting the 
                cell value into variable +".Value".
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ColN</B><BR/><short_desc xmlns=""> 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.  
                This must be accompanied by the next parameter, 'ValueN', and as many of the
                ColN/ValueN parameter pairs can be supplied as desired in order to match for a row 
                based on cell contents.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>ValueN</B><BR/><short_desc xmlns=""> 
                A Value to search for in the 'COLN' column
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                These values are case-sensitive and must consititute an exact match.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>AssignVariableCellText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, AssignVariableCellText, AVariableName</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, AssignVariableCellText, "AVariableName", 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, AssignVariableCellText, "^AVariableName", ^row=4, ^col="5"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SetVariableValues, ^AVariableName="NextVariableName" <br>
                  T, WebBrowser, WebTable, AssignVariableCellText, ^AVariableName, ^row="5", ^col=2</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VariableName</B><BR/><short_desc xmlns="">
             The name of the variable to receive the property value.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
               The name of the variable to receive the property value.
               Note, if you supply the name of the variable and include the leading
               caret (^) symbol then the variable must be enclosed in quotes.
               Otherwise, that variable will be used like any other variable and the
               substituted value of that variable will be interpretted as the name
               of the variable you wish to use.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                RJ: Does not yet support using a unique row value in column 1 as a row identifier.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                RJ: Does not yet support using a unique col header value as a column identifier.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CaptureFuzzyRangeToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, CaptureFuzzyRangeToFile, AFileName.txt</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, CaptureFuzzyRangeToFile, AFileName.txt, 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, CaptureFuzzyRangeToFile, AFileName.txt, 4, "field5", 2, 5</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, CaptureFuzzyRangeToFile, AFileName.txt, "datum", 5, , 2</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, CaptureFuzzyRangeToFile, AFileName.txt, , , , , "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>FileName</B><BR/><short_desc xmlns="">
             The name of the file to receive the data.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  The data will be output as TAB delimited values.
                  The filename is usually just the short filename.ext 
                  and as such will be stored in the project's Datapool\Test 
                  directory.  <br>
                  If you specify a relative path, the path 
                  is relative to the project's root directory.  "Datapool" 
                  is a subdirectory of that root directory.<br>
                  Any specified full or relative path must already exist.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row 
                value in column 1.  
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.  This command allows for case-insensitive 
                substring matches for row text when used in place of an actual row index.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This command allows for case-insensitive 
                substring matches for header text when used in place of an actual column index.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>Rows</B><BR/><short_desc xmlns=""> 
                The number of rows to capture.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                If there are not enough rows to satisfy the request then we 
                will obviously only capture up to the last available row.<br>
                If the parameter is not provided, all subsequent rows from 
                the specified starting row are captured.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>Columns</B><BR/><short_desc xmlns=""> 
                The number of columns to capture.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                If there are not enough columns to satisfy the request then we 
                will obviously only capture up to the last available column.<br>
                If the parameter is not provided, all subsequent columns from 
                the specified starting column are captured.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>FileEncoding</B><BR/><short_desc xmlns="">
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [11]:<B>FilterMode</B><BR/><short_desc xmlns=""> 
                (FUTURE) A file filter to use when processing the text values.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [12]:<B>FilterOptions</B><BR/><short_desc xmlns=""> 
                (FUTURE) Filter options to use with the file filter.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CaptureRangeToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, CaptureRangeToFile, AFileName.txt</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, CaptureRangeToFile, AFileName.txt, 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, CaptureRangeToFile, AFileName.txt, 4, "Field5", 2, 5</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, CaptureRangeToFile, AFileName.txt, "ADatum", 5, , 2</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, CaptureRangeToFile, AFileName.txt, , , , , "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>FileName</B><BR/><short_desc xmlns="">
             The name of the file to receive the data.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  The data will be output as TAB delimited values.
                  The filename is usually just the short filename.ext 
                  and as such will be stored in the project's Datapool\Test 
                  directory.  <br>
                  If you specify a relative path, the path 
                  is relative to the project's root directory.  "Datapool" 
                  is a subdirectory of that root directory.<br>
                  Any specified full or relative path must already exist.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>Rows</B><BR/><short_desc xmlns=""> 
                The number of rows to capture.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                If there are not enough rows to satisfy the request then we 
                will obviously only capture up to the last available row.<br>
                If the parameter is not provided, all subsequent rows from 
                the specified starting row are captured.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>Columns</B><BR/><short_desc xmlns=""> 
                The number of columns to capture.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                If there are not enough columns to satisfy the request then we 
                will obviously only capture up to the last available column.<br>
                If the parameter is not provided, all subsequent columns from 
                the specified starting column are captured.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>FileEncoding</B><BR/><short_desc xmlns="">
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [11]:<B>FilterMode</B><BR/><short_desc xmlns=""> 
                (FUTURE) A file filter to use when processing the text values.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [12]:<B>FilterOptions</B><BR/><short_desc xmlns=""> 
                (FUTURE) Filter options to use with the file filter.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Click</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, CLICK, Centert</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                Name of the AppMap subkey to lookup and use for the click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                <p>Name of the AppMap subkey to lookup and use for the click.
                The AppMap can contain the item in any of the following formats:</p>
                <p>
                [ATable]<br>
                AMappedRegion=Coords=10,10<br>
                ANamedRegion=Coords=10,10,25,25<br>
                AnIndexedRegion=Col=1;Row=1</p>
                <p>
                Any valid content used with the HTMLTable Click command can be part 
                of this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickCell</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, ClickCell, 1, 3</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Row</B><BR/><short_desc xmlns=""> 
                The row of the cell to click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The cell is fully defined by the intersection of
                the row and column values.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Col</B><BR/><short_desc xmlns=""> 
                The column of the cell to click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The cell is fully defined by the intersection of
                the row and column values.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CompareStoredData</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebPage, COMPARESTOREDDATA, "AStoredVP"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VPAsset</B><BR/><short_desc xmlns=""> 
                Name of the pre-existing VP asset stored in the currently running script.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Name of the pre-existing VP asset stored in the currently running script.
                If the name also exists in the app map under the component then the
                additional stored parameters are appended to the VP call.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CompareStoredProperties</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebPage, COMPARESTOREDPROPERTIES, "AStoredVP"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VPAsset</B><BR/><short_desc xmlns="">
                Name of the pre-existing VP asset stored in the currently running script.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Name of the pre-existing VP asset stored in the currently running script.
                If the name also exists in the app map under the component then the
                additional stored parameters are appended to the VP call.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DoubleClickCell</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, DoubleClickCell</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, DoubleClickCell, 3, 4</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightClickCell</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, RightClickCell</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, RightClickCell, 3, 4</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectCell</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, SelectCell</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, SelectCell, 3, 4</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectCellContainsTextFind</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, SelectCellContainsTextFind, Variable, "Date","Time", "09:58 AM", "Change","Change #2","Revision", "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Var</B><BR/><short_desc xmlns=""> 
                The variable which gets assigned the row found.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The variable which gets assigned the row found. If not
                found then it will get a zero length string
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # or header value, identifying the column for the select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.
                <p>
                These comparisons are not case-sensitive and can be substrings of the actual table text.
                </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ColN</B><BR/><short_desc xmlns=""> 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.  
                This must be accompanied by the next parameter, 'ValueN', and as many of the
                ColN/ValueN parameter pairs can be supplied as desired in order to match for a row 
                based on cell contents.
                <p>
                These comparisons are not case-sensitive and can be substrings of the actual table text.
                </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>ValueN</B><BR/><short_desc xmlns=""> 
                A Value to search for in the 'COLN' column
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The values are not case-sensitive and can be substrings of the actual table text.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectCellText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, SelectCellText</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, SelectCellText, 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, SelectCellText, 4, "Field5"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, SelectCellText, "ADatum", 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectCellTextFind</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, SelectCellTextFind, Variable, "Date","Time", "09:58 AM", "Change","Change #2","Revision", "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Var</B><BR/><short_desc xmlns=""> 
                The variable which gets assigned the row found.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The variable which gets assigned the row found. If not
                found then it will get a zero length string
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # or header value, identifying the column for the select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ColN</B><BR/><short_desc xmlns=""> 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.  
                This must be accompanied by the next parameter, 'ValueN', and as many of the
                ColN/ValueN parameter pairs can be supplied as desired in order to match for a row 
                based on cell contents.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>ValueN</B><BR/><short_desc xmlns=""> 
                A Value to search for in the 'COLN' column
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectCellTextSpecial</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, SelectCellTextSpecial, Control, Left, 2, 3</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, SelectCellTextSpecial, Shift, Left, 2, 3</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>SpecialKey</B><BR/><short_desc xmlns="">
             The special key command used in the row selection.
	     For now, ownly "Control" and "Shift" are supported.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>MouseClick</B><BR/><short_desc xmlns=""> 
	        The type of mouse click needed.
		For now, ownly "Left" and "Right" are supported.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>Row</B><BR/><short_desc xmlns=""> 
	        The 1-based cell row in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>Col</B><BR/><short_desc xmlns=""> 
	        The 1-based cell column in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectFuzzyCellText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, SelectFuzzyCellText</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, SelectFuzzyCellText, 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, SelectFuzzyCellText, 4, "field5"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, SelectFuzzyCellText, "datum", 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.  This command allows for case-insensitive substring 
                matches for row text when used in place of an actual row index.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This command allows for case-insensitive substring 
                matches for header text when used in place of an actual column index.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectFuzzyCellTextFind</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, SelectFuzzyCellTextFind, Variable, "Da","Ti", "09:58 AM", "Cha","Change #2","Rev", "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Var</B><BR/><short_desc xmlns=""> 
                The variable which gets assigned the row found.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The variable which gets assigned the row found. If not
                found then it will get a zero length string
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or fuzzy column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to fuzzy-match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ColN</B><BR/><short_desc xmlns=""> 
                A 1-based cell column # in the row/col specification or fuzzy column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to fuzzy-match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This must be accompanied by
                the next parameter, 'ValueN', and as many of the
                ColN/ValueN parameter pairs can be supplied as desired
                in order to match for a row based on cell contents.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>ValueN</B><BR/><short_desc xmlns=""> 
                A Value to search for in a cell under the 'ColN' column
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                A Value to search for in a cell under the 'ColN' column
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyCellEditable</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, VerifyCellEditable, "2", "3", "true"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Row</B><BR/><short_desc xmlns="">
	    The 1-based cell row in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Col</B><BR/><short_desc xmlns="">
	       The 1-based cell column in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ExpectedValue</B><BR/><short_desc xmlns=""> 
	         The case-insensitive value we expect for the editable value ("true" or"false").
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyCellText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, VerifyCellText, FirstCellValue</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, VerifyCellText, "FirstCellValue", 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, VerifyCellText, "BenchValue", ^row=4, ^col="5"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, VerifyCellText, "BenchData", ^row="5", ^col=2</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchValue</B><BR/><short_desc xmlns="">
             The case-sensitive expected value for the specified cell.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                RJ: Does not yet support using a row value in Column 1 as a row identifier.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                RJ: Does not yet support using a column header value as a column identifier.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyCellTextContains</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, VerifyCellTextContains, FirstCellValue</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, VerifyCellTextContains, "firstcell", 1 , 1 </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, VerifyCellTextContains, "bench", ^row=4, ^col="5"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchValue</B><BR/><short_desc xmlns="">
                  The expected value for the specified cell.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  The value can be a substring of the full expected 
                  value and is NOT case-sensitive.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                RJ: Does not yet support using a unique row value in Column 1 as a row specifier.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                RJ: Does not yet support using a unique column header value as a column specifier.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyCellTextFind</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, VerifyCellTextFind, "10/09/2003", Variable, "Date","Time", "09:58 AM", "Change","Change #2","Revision", "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchValue</B><BR/><short_desc xmlns="">
             The case-sensitive expected value for the specified cell.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Var</B><BR/><short_desc xmlns=""> 
                The variable which gets assigned the row found.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The variable which gets assigned the row found. If not
                found then it will get a zero length string
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>ColN</B><BR/><short_desc xmlns=""> 
                A 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This must be accompanied by
                the next parameter, 'ValueN', and as many of the
                ColN/ValueN parameter pairs can be supplied as desired
                in order to match for a row based on cell contents.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    9 :<B>ValueN</B><BR/><short_desc xmlns=""> 
                A Value to search for in a cell under the 'ColN' column
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                A Value to search for in a cell under the 'ColN' column
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyCellValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, VerifyCellValue, ExpectedValue</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, VerifyCellValue, ExpectedValue, "2,2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ExpectedValue</B><BR/><short_desc xmlns=""> 
                     The Expected Value of the cell.
                   </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                     The Expected Value of the cell, this will be used to compare with
		     the actual value of the cell and logged as a pass or fail. This value
		     is case sensitive and should acurately reflect the text string of the
		     cell being tested.
                   </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Cell</B><BR/><short_desc xmlns=""> 
                     This is the optional cell location to be tested
                   </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                     This is the optional cell location to be tested, it will be assummed if 
		     value is not present that the command is referencing cell 1,1
                   </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyColumnLabel</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, VerifyColumnLabel, "Foo", "4"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, VerifyColumnLabel, "Foo SecondFoo", "4"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ColLabel</B><BR/><short_desc xmlns="">
             The case-insensitive expected value for the specified column label.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ColNumber</B><BR/><short_desc xmlns=""> 
                The 1-based column number of the label that needs verified.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyFuzzyCellText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, VerifyFuzzyCellText, FirstCellValue</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, VerifyFuzzyCellText, "FirstCellValue", 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, VerifyFuzzyCellText, ABenchValue, 4, "field5"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, VerifyFuzzyCellText, ^ABenchValue, "datum", 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchValue</B><BR/><short_desc xmlns="">
             The case-sensitive expected value for the specified cell.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.  This command allows for case-insensitive substring 
                matches for row text when used in place of an actual row index.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This command allows for case-insensitive substring 
                matches for header text when used in place of an actual column index.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyFuzzyCellTextContains</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, VerifyFuzzyCellTextContains, FirstCellValue</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, VerifyFuzzyCellTextContains, "firstcell", 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, WebBrowser, WebTable, VerifyFuzzyCellTextContains, bench, 4, "field5"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, VerifyFuzzyCellText, bench, "datum", 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchValue</B><BR/><short_desc xmlns="">
                  The expected value for the specified cell.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  The value can be a substring of the full expected 
                  value and is NOT case-sensitive.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.  This command allows for case-insensitive substring 
                matches for row text when used in place of an actual row index.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This command allows for case-insensitive substring 
                matches for header text when used in place of an actual column index.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyFuzzyCellTextFind</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WebBrowser, WebTable, VerifyFuzzyCellTextFind, "10/09/2003", Variable, "Da","Ti", "09:58 AM", "Cha","Change #2","Rev", "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchValue</B><BR/><short_desc xmlns="">
             The case-sensitive expected value for the specified cell.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Var</B><BR/><short_desc xmlns=""> 
                The variable which gets assigned the row found.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The variable which gets assigned the row found. If not
                found then it will get a zero length string
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or fuzzy column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to fuzzy-match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>ColN</B><BR/><short_desc xmlns=""> 
                A 1-based cell column # in the row/col specification or fuzzy column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to fuzzy-match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This must be accompanied by
                the next parameter, 'ValueN', and as many of the
                ColN/ValueN parameter pairs can be supplied as desired
                in order to match for a row based on cell contents.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    9 :<B>ValueN</B><BR/><short_desc xmlns=""> 
                A Value to search for in a cell under the 'ColN' column
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                A Value to search for in a cell under the 'ColN' column
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>JavaMenuFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="JavaMenuFunctions.htm" target="_blank">
<FONT color="#000000">JavaMenuFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>ResetMenuCache</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, JavaWindow, JavaMenu, ResetMenuCache</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectMenuItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, FileMenu, SelectMenuItem</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, FileMenu, SelectMenuItem, "Exit"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJmenu, SelectMenuItem, "File"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJMenu, SelectMenuItem, "File-&gt;Exit"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJmenu, SelectMenuItem, "FileOpen"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJMenu, SelectMenuItem, "File-&gt;Exit", "1-&gt;2"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJMenu, SelectMenuItem, "Fil*-&gt;[eE]xit"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of menuItem to select OR an App Map reference.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the menuitem to select.
                 Parent-Child relationships are separated by "-&gt;".<br>
                 Alternatively, the TextValue can be an App Map reference item 
                 used in conjunction with the Component Name (field #3) that 
                 allows us to store explicit menu item text in the App Map.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>indexPath</B><BR/><short_desc xmlns=""> 
                 The index for item of each level. It is 1-based.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 The index for item of each level. It is 1-based.
                 If there are several menuitem in the same level with same text, this
                 parameter can be used to indicate which one is wanted.
                 Parent-Child relationships are separated by "-&gt;".<br>
                 Alternatively, the indexPath can be an App Map reference item 
                 used in conjunction with the Component Name (field #3) that 
                 allows us to store explicit indexes in the App Map. 
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectMenuItemContains</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, FileMenu, SelectMenuItemContains, "exi"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJMenu, SelectMenuItemContains, "f-&gt;exit"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJMenu, SelectMenuItemContains, "file-&gt;e", "1-&gt;2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-insensitive substring of menuItem to select OR an App Map reference.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 Parent-Child relationships are separated by "-&gt;"<br>
                 Alternatively, the TextValue can be an App Map reference item 
                 used in conjunction with the Component Name (field #3) that 
                 allows us to store explicit menu item text in the App Map.<br>
				 Note: RJ implementation: this field is required.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>indexPath</B><BR/><short_desc xmlns=""> 
                 The index for item of each level. It is 1-based.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 The index for item of each level. It is 1-based.
                 If there are several menuitem in the same level with same text, this
                 parameter can be used to indicate which one is wanted.                 
                 Parent-Child relationships are separated by "-&gt;".<br>
                 Alternatively, the indexPath can be an App Map reference item 
                 used in conjunction with the Component Name (field #3) that 
                 allows us to store explicit indexes in the App Map.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectUnverifiedMenuItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJmenu, SelectUnverifiedMenuItem, "File"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJMenu, SelectUnverifiedMenuItem, "File-&gt;Exit"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJmenu, SelectUnverifiedMenuItem, "FileOpen"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJMenu, SelectUnverifiedMenuItem, "file-&gt;edit", "1-&gt;2"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJMenu, SelectMenuItem, "Fil*-&gt;[eE]xit"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of menuItem to select OR an App Map reference.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the menuitem to select.
                 Parent-Child relationships are separated by "-&gt;".<br>
                 Alternatively, the TextValue can be an App Map reference item 
                 used in conjunction with the Component Name (field #3) that 
                 allows us to store explicit menu item text in the App Map.<br>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>indexPath</B><BR/><short_desc xmlns=""> 
                 The index for item of each level. It is 1-based.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 The index for item of each level. It is 1-based.
                 If there are several menuitem in the same level with same text, this
                 parameter can be used to indicate which one is wanted.                 
                 Parent-Child relationships are separated by "-&gt;".<br>
                 Alternatively, the indexPath can be an App Map reference item 
                 used in conjunction with the Component Name (field #3) that 
                 allows us to store explicit indexes in the App Map.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyMenuItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, JavaWindow, JavaMenu, VerifyMenuItem, "File"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWindow, JavaMenu, VerifyMenuItem, "Weird-&gt;CheckBox", "Enabled Checked"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJMenu, VerifyMenuItem, "file-&gt;edit","Enabled", "1-&gt;2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>MenuItemText</B><BR/><short_desc xmlns=""> 
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to find.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to find.
                This menu hierarchy IS case-sensitive<br>
				TQ String. the full case-sensitive menu item path to select.  
                Ampersands (&amp;) indicating/preceding underlined characters are optional.  
                The text must include the full text including spaces and any visible shortcut key 
                combinations displayed in the text of the menu item.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>ExpectedStatus</B><BR/><short_desc xmlns=""> 
                Expected status string (or part thereof) of the menuitem. 
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Expected status string (or part thereof) to verify.
				Only "Enabled" "Ungrayed" "Grayed" "Disabled" "Checked" "Unchecked" "Menu With N MenuItems" are supported now.  
                <br>Ex: "Enabled Checked"         OR  "Grayed UnChecked"    etc.
                <br>Each item separated by a space will be evaluated separately so 
                the order of the status items does not matter.
				Only the state information of interest needs to be specified.  
                These status items ARE case-insensitive,space-delimited.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>indexPath</B><BR/><short_desc xmlns=""> 
                 The index for item of each level. It is 1-based.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 The index for item of each level. It is 1-based.
                 If there are several menuitem in the same level with same text, this
                 parameter can be used to indicate which one is wanted.                 
                 Parent-Child relationships are separated by "-&gt;".<br>
                 Alternatively, the indexPath can be an App Map reference item 
                 used in conjunction with the Component Name (field #3) that 
                 allows us to store explicit indexes in the App Map.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyMenuItemContains</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, JavaWindow, JavaMenu, VerifyMenuItemContains, "Fil-&gt;Sav"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWindow, JavaMenu, VerifyMenuItemContains, "Fil-&gt;Sav","Enabled"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJMenu, VerifyMenuItemContains, "fi-&gt;e","Enabled", "1-&gt;2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>MenuItemText</B><BR/><short_desc xmlns=""> 
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to find.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to find.
                This menu hierarchy IS case-sensitive<br>
				TQ String. the case-sensitive menu item path to select.  
                Ampersands (&amp;) indicating/preceding underlined characters are optional.
				The text can be any substring of the full text including spaces and any visible shortcut key 
                combinations displayed in the text of the menu item.  
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>ExpectedStatus</B><BR/><short_desc xmlns=""> 
                Expected status string (or part thereof) of the menuitem. 
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Expected status string (or part thereof) to verify.
				Only "Enabled" "Ungrayed" "Grayed" "Disabled" "Checked" "Unchecked" "Menu With N MenuItems" are supported now.  
                <br>Ex: "Enabled Checked"         OR  "Grayed UnChecked"    etc.
                <br>Each item separated by a space will be evaluated separately so 
                the order of the status items does not matter.
				Only the state information of interest needs to be specified.  
                These status items ARE case-insensitive,space-delimited.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>indexPath</B><BR/><short_desc xmlns=""> 
                 The index for item of each level. It is 1-based.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 The index for item of each level. It is 1-based.
                 If there are several menuitem in the same level with same text, this
                 parameter can be used to indicate which one is wanted.                 
                 Parent-Child relationships are separated by "-&gt;".<br>
                 Alternatively, the indexPath can be an App Map reference item 
                 used in conjunction with the Component Name (field #3) that 
                 allows us to store explicit indexes in the App Map.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>JavaTableFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="JavaTableFunctions.htm" target="_blank">
<FONT color="#000000">JavaTableFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>ActivateCell</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, ActivateCell</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, ActivateCell, 3, 4</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ActivateColumnLabel</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, ActivateColumnLabel, "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ColNumber</B><BR/><short_desc xmlns="">
             The 1-based column label number to double click.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>YOffset</B><BR/><short_desc xmlns=""> 
	      (FUTURE) Number of pixels to adjust where the actual double click occurs.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>AssignCellContainsTextRow</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, AssignCellContainsTextRow, Variable, "Date","Time", "09:58 AM", "Change","Change #2","Revision", "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Var</B><BR/><short_desc xmlns=""> 
                The variable which gets assigned the row found.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The variable which gets assigned the row found. If not found then it will get a zero 
                length string.  This variable also is the rootname for the variable that will receive 
                the cell text value once the row # is identified.  The cell value variable will be the  
                user-defined variable +".Value".
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # or header value, identifying the column for extracting the 
                cell value into variable +".Value".
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.
                  <p>
                  The field header comparisons are not case-senstive, and provided values can be substrings 
                  of the actual header value in the table.
                  </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ColN</B><BR/><short_desc xmlns=""> 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.  
                This must be accompanied by the next parameter, 'ValueN', and as many of the
                ColN/ValueN parameter pairs can be supplied as desired in order to match for a row 
                based on cell contents.
                <p>
                The field header comparisons are not case-senstive, and provided values can be substrings 
                of the actual header value in the table.
                </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>ValueN</B><BR/><short_desc xmlns=""> 
                A Value to search for in the 'COLN' column.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                These values can be partial substrings and are not case-sensitive.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>AssignCellTextRow</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, AssignCellTextRow, Variable, "Date","Time", "09:58 AM", "Change","Change #2","Revision", "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Var</B><BR/><short_desc xmlns=""> 
                The variable which gets assigned the row found.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The variable which gets assigned the row found. If not found then it will get a zero 
                length string.  This variable also is the rootname for the variable that will receive 
                the cell text value once the row # is identified.  The cell value variable will be this 
                user-defined variable +".Value".
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # or header value, identifying the column for extracting the 
                cell value into variable +".Value".
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ColN</B><BR/><short_desc xmlns=""> 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.  
                This must be accompanied by the next parameter, 'ValueN', and as many of the
                ColN/ValueN parameter pairs can be supplied as desired in order to match for a row 
                based on cell contents.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>ValueN</B><BR/><short_desc xmlns=""> 
                A Value to search for in the 'COLN' column
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                These values are case-sensitive and must consititute an exact match.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>AssignVariableCellText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, AssignVariableCellText, AVariableName</FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, AssignVariableCellText, "AVariableName", 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, AssignVariableCellText, "^AVariableName", 4, "Field5"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SetVariableValues, ^AVariableName="NextVariableName" <br>
                  T, JavaWin, JTable, AssignVariableCellText, ^AVariableName, "ADatum", 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VariableName</B><BR/><short_desc xmlns="">
             The name of the variable to receive the property value.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
               The name of the variable to receive the property value.
               Note, if you supply the name of the variable and include the leading
               caret (^) symbol then the variable must be enclosed in quotes.
               Otherwise, that variable will be used like any other variable and the
               substituted value of that variable will be interpretted as the name
               of the variable you wish to use.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>AssignVariableFuzzyCellText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, AssignVariableFuzzyCellText, AVariableName</FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, AssignVariableFuzzyCellText, "AVariableName", 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, AssignVariableFuzzyCellText, "^AVariableName", 4, "field5"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">C, SetVariableValues, ^AVariableName="NextVariableName" <br>
                  T, JavaWin, JTable, AssignVariableFuzzyCellText, ^AVariableName, "datum", 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VariableName</B><BR/><short_desc xmlns="">
             The name of the variable to receive the property value.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
               The name of the variable to receive the property value.
               Note, if you supply the name of the variable and include the leading
               caret (^) symbol then the variable must be enclosed in quotes.
               Otherwise, that variable will be used like any other variable and the
               substituted value of that variable will be interpretted as the name
               of the variable you wish to use.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.  This command allows for case-insensitive substring 
                matches for row text when used in place of an actual row index.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This command allows for case-insensitive substring 
                matches for header text when used in place of an actual column index.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CaptureFuzzyRangeToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, CaptureFuzzyRangeToFile, AFileName.txt</FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, CaptureFuzzyRangeToFile, AFileName.txt, 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, CaptureFuzzyRangeToFile, AFileName.txt, 4, "field5", 2, 5</FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, CaptureFuzzyRangeToFile, AFileName.txt, "datum", 5, , 2</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, CaptureFuzzyRangeToFile, AFileName.txt, , , , , "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>FileName</B><BR/><short_desc xmlns="">
             The name of the file to receive the data.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  The data will be output as TAB delimited values.
                  The filename is usually just the short filename.ext 
                  and as such will be stored in the project's Datapool\Test 
                  directory.  <br>
                  If you specify a relative path, the path 
                  is relative to the project's root directory.  "Datapool" 
                  is a subdirectory of that root directory.<br>
                  Any specified full or relative path must already exist.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row 
                value in column 1.  
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.  This command allows for case-insensitive 
                substring matches for row text when used in place of an actual row index.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This command allows for case-insensitive 
                substring matches for header text when used in place of an actual column index.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>Rows</B><BR/><short_desc xmlns=""> 
                The number of rows to capture.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                If there are not enough rows to satisfy the request then we 
                will obviously only capture up to the last available row.<br>
                If the parameter is not provided, all subsequent rows from 
                the specified starting row are captured.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>Columns</B><BR/><short_desc xmlns=""> 
                The number of columns to capture.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                If there are not enough columns to satisfy the request then we 
                will obviously only capture up to the last available column.<br>
                If the parameter is not provided, all subsequent columns from 
                the specified starting column are captured.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>FileEncoding</B><BR/><short_desc xmlns="">
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [11]:<B>FilterMode</B><BR/><short_desc xmlns=""> 
                (FUTURE) A file filter to use when processing the text values.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [12]:<B>FilterOptions</B><BR/><short_desc xmlns=""> 
                (FUTURE) Filter options to use with the file filter.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CaptureRangeToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, CaptureRangeToFile, AFileName.txt</FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, CaptureRangeToFile, AFileName.txt, 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, CaptureRangeToFile, AFileName.txt, 4, "Field5", 2, 5</FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, CaptureRangeToFile, AFileName.txt, "ADatum", 5, , 2</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, CaptureRangeToFile, AFileName.txt, , , , , "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>FileName</B><BR/><short_desc xmlns="">
             The name of the file to receive the data.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  The data will be output as TAB delimited values.
                  The filename is usually just the short filename.ext 
                  and as such will be stored in the project's Datapool\Test 
                  directory.  <br>
                  If you specify a relative path, the path 
                  is relative to the project's root directory.  "Datapool" 
                  is a subdirectory of that root directory.<br>
                  Any specified full or relative path must already exist.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>Rows</B><BR/><short_desc xmlns=""> 
                The number of rows to capture.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                If there are not enough rows to satisfy the request then we 
                will obviously only capture up to the last available row.<br>
                If the parameter is not provided, all subsequent rows from 
                the specified starting row are captured.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>Columns</B><BR/><short_desc xmlns=""> 
                The number of columns to capture.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                If there are not enough columns to satisfy the request then we 
                will obviously only capture up to the last available column.<br>
                If the parameter is not provided, all subsequent columns from 
                the specified starting column are captured.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>FileEncoding</B><BR/><short_desc xmlns="">
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [11]:<B>FilterMode</B><BR/><short_desc xmlns=""> 
                (FUTURE) A file filter to use when processing the text values.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [12]:<B>FilterOptions</B><BR/><short_desc xmlns=""> 
                (FUTURE) Filter options to use with the file filter.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickCell</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, CLICKCELL</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, CLICKCELL, 3, 4</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickColumnLabel</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, ClickColumnLabel, "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ColNumber</B><BR/><short_desc xmlns="">
             The 1-based column label number to click.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>YOffset</B><BR/><short_desc xmlns=""> 
	      (FUTURE) Number of pixels to adjust where the actual click occurs.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DoubleClickCell</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, DoubleClickCell</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, DoubleClickCell, 3, 4</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DoubleClickColumnLabel</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, DoubleClickColumnLabel, "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ColNumber</B><BR/><short_desc xmlns="">
             The 1-based column label number to double click.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>YOffset</B><BR/><short_desc xmlns=""> 
	      (FUTURE) Number of pixels to adjust where the actual double click occurs.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightClickCell</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, RightClickCell</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, RightClickCell, 3, 4</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightClickColumnLabel</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, RightClickColumnLabel, "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ColNumber</B><BR/><short_desc xmlns="">
             The 1-based column label number to click.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>YOffset</B><BR/><short_desc xmlns=""> 
	      (FUTURE) Number of pixels to adjust where the actual click occurs.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectCell</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, SelectCell</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, SelectCell, 3, 4</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectCellContainsTextFind</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, SelectCellContainsTextFind, Variable, "Date","Time", "09:58 AM", "Change","Change #2","Revision", "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Var</B><BR/><short_desc xmlns=""> 
                The variable which gets assigned the row found.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The variable which gets assigned the row found. If not
                found then it will get a zero length string
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # or header value, identifying the column for the select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.
                <p>
                These comparisons are not case-sensitive and can be substrings of the actual table text.
                </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ColN</B><BR/><short_desc xmlns=""> 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.  
                This must be accompanied by the next parameter, 'ValueN', and as many of the
                ColN/ValueN parameter pairs can be supplied as desired in order to match for a row 
                based on cell contents.
                <p>
                These comparisons are not case-sensitive and can be substrings of the actual table text.
                </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>ValueN</B><BR/><short_desc xmlns=""> 
                A Value to search for in the 'COLN' column
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The values are not case-sensitive and can be substrings of the actual table text.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectCellText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, SelectCellText</FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, SelectCellText, 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, SelectCellText, 4, "Field5"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, SelectCellText, "ADatum", 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectCellTextFind</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, SelectCellTextFind, Variable, "Date","Time", "09:58 AM", "Change","Change #2","Revision", "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Var</B><BR/><short_desc xmlns=""> 
                The variable which gets assigned the row found.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The variable which gets assigned the row found. If not
                found then it will get a zero length string
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # or header value, identifying the column for the select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ColN</B><BR/><short_desc xmlns=""> 
                A 1-based cell column #, or header value, identifying the column to locate the VALUEN below.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 1-based column number.  
                This must be accompanied by the next parameter, 'ValueN', and as many of the
                ColN/ValueN parameter pairs can be supplied as desired in order to match for a row 
                based on cell contents.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>ValueN</B><BR/><short_desc xmlns=""> 
                A Value to search for in the 'COLN' column
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectCellTextSpecial</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Frame, custTableTable, SelectCellTextSpecial, Control, Left, 2, 3</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Frame, custTableTable, SelectCellTextSpecial, Shift, Left, 2, 3</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>SpecialKey</B><BR/><short_desc xmlns="">
             The special key command used in the row selection.
	     For now, ownly Control and Shift are supported.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>MouseClick</B><BR/><short_desc xmlns=""> 
	        The type of mouse click needed.
		For now, ownly Left and Right are supported.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>Row</B><BR/><short_desc xmlns=""> 
	        The 1-based cell row in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>Col</B><BR/><short_desc xmlns=""> 
	        The 1-based cell column in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectFuzzyCellText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, SelectFuzzyCellText</FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, SelectFuzzyCellText, 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, SelectFuzzyCellText, 4, "field5"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, SelectFuzzyCellText, "datum", 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.  This command allows for case-insensitive substring 
                matches for row text when used in place of an actual row index.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This command allows for case-insensitive substring 
                matches for header text when used in place of an actual column index.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectFuzzyCellTextFind</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, SelectFuzzyCellTextFind, Variable, "Da","Ti", "09:58 AM", "Cha","Change #2","Rev", "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Var</B><BR/><short_desc xmlns=""> 
                The variable which gets assigned the row found.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The variable which gets assigned the row found. If not
                found then it will get a zero length string
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or fuzzy column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to fuzzy-match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ColN</B><BR/><short_desc xmlns=""> 
                A 1-based cell column # in the row/col specification or fuzzy column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to fuzzy-match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This must be accompanied by
                the next parameter, 'ValueN', and as many of the
                ColN/ValueN parameter pairs can be supplied as desired
                in order to match for a row based on cell contents.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>ValueN</B><BR/><short_desc xmlns=""> 
                A Value to search for in a cell under the 'ColN' column
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                A Value to search for in a cell under the 'ColN' column
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyCellEditable</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, VerifyCellEditable, "2", "3", "true"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Row</B><BR/><short_desc xmlns="">
	    The 1-based cell row in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Col</B><BR/><short_desc xmlns="">
	       The 1-based cell column in the row/col specification.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ExpectedValue</B><BR/><short_desc xmlns=""> 
	         The case-insensitive value we expect for the editable value.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyCellText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, VerifyCellText, FirstCellValue</FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, VerifyCellText, "FirstCellValue", 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, VerifyCellText, "BenchValue", 4, "Field5"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, VerifyCellText, "BenchData", "ADatum", 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchValue</B><BR/><short_desc xmlns="">
             The case-sensitive expected value for the specified cell.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyCellTextContains</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, VerifyCellTextContains, FirstCellValue</FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, VerifyCellTextContains, "firstcell", 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, VerifyCellTextContains, "bench", 4, "Field5"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, VerifyCellTextContains, "bench", "ADatum", 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchValue</B><BR/><short_desc xmlns="">
                  The expected value for the specified cell.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  The value can be a substring of the full expected 
                  value and is NOT case-sensitive.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyCellTextFind</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, VerifyCellTextFind, "10/09/2003", Variable, "Date","Time", "09:58 AM", "Change","Change #2","Revision", "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchValue</B><BR/><short_desc xmlns="">
             The case-sensitive expected value for the specified cell.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Var</B><BR/><short_desc xmlns=""> 
                The variable which gets assigned the row found.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The variable which gets assigned the row found. If not
                found then it will get a zero length string
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>ColN</B><BR/><short_desc xmlns=""> 
                A 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This must be accompanied by
                the next parameter, 'ValueN', and as many of the
                ColN/ValueN parameter pairs can be supplied as desired
                in order to match for a row based on cell contents.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    9 :<B>ValueN</B><BR/><short_desc xmlns=""> 
                A Value to search for in a cell under the 'ColN' column
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                A Value to search for in a cell under the 'ColN' column
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyColumnLabel</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, VerifyColumnLabel, "Foo", "4"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, VerifyColumnLabel, "Foo SecondFoo", "4"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ColLabel</B><BR/><short_desc xmlns="">
             The case-insensitive expected value for the specified column label.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ColNumber</B><BR/><short_desc xmlns=""> 
                The 1-based column number of the label that needs verified.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyFuzzyCellText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, VerifyFuzzyCellText, FirstCellValue</FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, VerifyFuzzyCellText, "FirstCellValue", 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, VerifyFuzzyCellText, ABenchValue, 4, "field5"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, VerifyFuzzyCellText, ^ABenchValue, "datum", 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchValue</B><BR/><short_desc xmlns="">
             The case-sensitive expected value for the specified cell.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.  This command allows for case-insensitive substring 
                matches for row text when used in place of an actual row index.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This command allows for case-insensitive substring 
                matches for header text when used in place of an actual column index.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyFuzzyCellTextContains</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, VerifyFuzzyCellTextContains, FirstCellValue</FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, VerifyFuzzyCellTextContains, "firstcell", 1 , 1 </FONT></LI>
<LI type="circle"><FONT color="#800080">T, JavaWin, JTable, VerifyFuzzyCellTextContains, bench, 4, "field5"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, VerifyFuzzyCellText, bench, "datum", 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchValue</B><BR/><short_desc xmlns="">
                  The expected value for the specified cell.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                  The value can be a substring of the full expected 
                  value and is NOT case-sensitive.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Row</B><BR/><short_desc xmlns=""> 
                The 1-based cell row # in the row/col specification or a unique row value in column 1.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a cell value
                in column 1.  If no match is found, it will expect the value to be a valid 
                1-based row number.  This command allows for case-insensitive substring 
                matches for row text when used in place of an actual row index.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This command allows for case-insensitive substring 
                matches for header text when used in place of an actual column index.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyFuzzyCellTextFind</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, JavaWin, JTable, VerifyFuzzyCellTextFind, "10/09/2003", Variable, "Da","Ti", "09:58 AM", "Cha","Change #2","Rev", "2"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchValue</B><BR/><short_desc xmlns="">
             The case-sensitive expected value for the specified cell.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Var</B><BR/><short_desc xmlns=""> 
                The variable which gets assigned the row found.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The variable which gets assigned the row found. If not
                found then it will get a zero length string
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>Col</B><BR/><short_desc xmlns=""> 
                The 1-based cell column # in the row/col specification or fuzzy column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to fuzzy-match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>ColN</B><BR/><short_desc xmlns=""> 
                A 1-based cell column # in the row/col specification or fuzzy column header text.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The routine will first attempt to fuzzy-match any provided value with a field header. 
                If no match is found, it will expect the value to be a valid 
                1-based column number.  This must be accompanied by
                the next parameter, 'ValueN', and as many of the
                ColN/ValueN parameter pairs can be supplied as desired
                in order to match for a row based on cell contents.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    9 :<B>ValueN</B><BR/><short_desc xmlns=""> 
                A Value to search for in a cell under the 'ColN' column
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                A Value to search for in a cell under the 'ColN' column
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>JavaTreeFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="JavaTreeFunctions.htm" target="_blank">
<FONT color="#000000">JavaTreeFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>CaptureTreeDataToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Browser, aTreeView, CaptureTreeDataToFile, aFilename.ext</FONT></LI>
<LI type="circle"><FONT color="#800080">T, Browser, aJavaTree, CaptureTreeDataToFile, myDirectory\aFilename.ext, "Parent Bank-&gt;Branch Banking and Trust", "_"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, aTreeView, CaptureTreeDataToFile, aFilename.ext, , , "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>File</B><BR/><short_desc xmlns="">
             The name of the file used to store the tree data.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             The name of the file used to store the tree data.
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Branch</B><BR/><short_desc xmlns="">
	                	The full name of the tree branch to capture.
	                </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
	                	The full name of the tree branch to capture.  If omitted, all 
	                	branches/nodes are captured.
		        	<br><br>The search of the path to the node is expected to be a case-sensitive 
		        	exact match of each node.  Use 'PartialMatchTreeDataToFile' if you 
		        	wish to specify case-insensitive substring matches for tree nodes.             
                        </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>IndentMark</B><BR/><short_desc xmlns="">
		        	The character(s) to use in the output file to indent the tree nodes from the 
		        	parent tree branches.
		        </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
		         	The character(s) to use in the output file to indent the tree nodes from the 
		        	parent tree branches.  If omitted, a tab character is used.
              		</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>FileEncoding</B><BR/><short_desc xmlns="">
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>FilterMode</B><BR/><short_desc xmlns="">
             (Future) Specify a file filter to use to process the text before comparison.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>FilterOptions</B><BR/><short_desc xmlns="">
             (Future) Specify filter options to use with the file filter.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, ClickTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, ClickTextNode, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to click.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, ClickUnverifiedTextNode, "root-&gt;Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, ClickUnverifiedTextNode, "root-&gt;Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive full path text of node to click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to click.
                 Parent-Child relationships are separated by "-&gt;"  If the tree contains 
                 hidden root nodes then they must be provided.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Collapse</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, Collapse, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, Collapse, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to collapse
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to collapse.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CollapsePartialTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, CollapsePartialTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, CollapsePartialTextNode, "parent-&gt;child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-Insensitive text of node to collapse
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-insensitive text of the node to collapse.
                 Parent-Child relationships are separated by "-&gt;"
                 For each level, a text comparison is performed. If the node 
                 contains the requested substring anywhere in its text, then 
                 that node is considered a match.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CollapseTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, CollapseTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, CollapseTextNode, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to collapse
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to collapse.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CollapseUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, CollapseUnverifiedTextNode, "root-&gt;Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, CollapseUnverifiedTextNode, "root-&gt;Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive full path text of node to collapse
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to collapse.
                 Parent-Child relationships are separated by "-&gt;" 
                 If the tree contains hidden root nodes they must be provided.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CtrlClickUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, CtrlClickUnverifiedTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, CtrlClickUnverifiedTextNode, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to CTRL-click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to CTRL-click.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DoubleClickTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, DoubleClickTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, DoubleClickTextNode, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to double-click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to double-click.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DoubleClickUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, DoubleClickUnverifiedTextNode, "root-&gt;Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, DoubleClickUnverifiedTextNode, "root-&gt;Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive full path text of node to double-click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to double-click.
                 Parent-Child relationships are separated by "-&gt;"  If the tree contains 
                 hidden root nodes then they must be provided.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Expand</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, Expand, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, Expand, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to expand
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to expand.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ExpandPartialTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, ExpandPartialTextNode, "parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, ExpandPartialTextNode, "parent-&gt;child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-Insensitive text of node to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-insensitive text of the node.
                 Parent-Child relationships are separated by "-&gt;".
                 For each level, a text comparison is performed. If the node 
                 contains the requested substring anywhere in its text, then 
                 that node is considered a match.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ExpandTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, ExpandTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, ExpandTextNode, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to expand
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to expand.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ExpandUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, ExpandUnverifiedTextNode, "root-&gt;Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, ExpandUnverifiedTextNode, "root-&gt;Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive full path text of node to expand
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to expand.
                 Parent-Child relationships are separated by "-&gt;".  If the tree 
                 contains hidden root nodes the user must provide these.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>MakeSelection</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, MakeSelection, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, MakeSelection, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to select.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>PartialMatchTreeDataToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Browser, aTreeView, PartialMatchTreeDataToFile, aFilename.ext</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, aJavaTree, PartialMatchTreeDataToFile, myDirectory\aFilename.ext, "parent-&gt;branch", "_"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>File</B><BR/><short_desc xmlns="">
             The name of the file used to store the tree data.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             The name of the file used to store the tree data.
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Branch</B><BR/><short_desc xmlns="">
	             The full name of the tree branch to capture.
	              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
	             The full name of the tree branch to capture.  If omitted, 
	             all branches/nodes are captured.
		     <br><br>The search of the path to the node is a case-insensitive 
		     substring match of each node.  Use 'CaptureTreeDataToFile' if you 
		     wish to specify case-sensitive exact matches for tree nodes.             
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>IndentMark</B><BR/><short_desc xmlns="">
			        	The character(s) to use in the output file to indent the tree nodes from the 
			        	parent tree branches.
			        </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
			         	The character(s) to use in the output file to indent the tree nodes from the 
			        	parent tree branches.  If omitted, a tab character is used.
	              		</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>FilterMode</B><BR/><short_desc xmlns="">
             (Future) Specify a file filter to use to process the text before comparison.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>FilterOptions</B><BR/><short_desc xmlns="">
             (Future) Specify filter options to use with the file filter.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightClickTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, RightClickTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, RightClickTextNode, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to right-click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to right-click.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightClickUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, RightClickUnverifiedTextNode, "root-&gt;Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, RightClickUnverifiedTextNode, "root-&gt;Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive full path text of node to right-click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to right-click.
                 Parent-Child relationships are separated by "-&gt;"  If the tree contains 
                 hidden root nodes then they must be provided.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectAnotherPartialTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, SelectAnotherPartialTextNode, "parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, SelectAnotherPartialTextNode, "parent-&gt;child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-Insensitive text of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-insensitive text of the node to select.
                 Parent-Child relationships are separated by "-&gt;"
                 For each level, a text comparison is performed. If the node 
                 contains the requested substring anywhere in its text, then 
                 that node is considered a match.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectAnotherTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, SelectAnotherTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, SelectAnotherTextNode, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to select.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectAnotherUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, SelectAnotherUnverifiedTextNode, "root-&gt;Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, SelectAnotherUnverifiedTextNode, "root-&gt;Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive full path text of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to select.
                 Parent-Child relationships are separated by "-&gt;"  If the tree contains 
                 hidden root nodes they must be provided.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectPartialTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, SelectPartialTextNode, "parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, SelectPartialTextNode, "parent-&gt;child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-Insensitive text of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-insensitive text of the node to select.
                 Parent-Child relationships are separated by "-&gt;"
                 For each level, a text comparison is performed. If the node 
                 contains the requested substring anywhere in its text, then 
                 that node is considered a match.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, SelectTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, SelectTextNode, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to select.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, SelectUnverifiedTextNode, "root-&gt;Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, SelectUnverifiedTextNode, "root-&gt;Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive full path text of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to select.
                 Parent-Child relationships are separated by "-&gt;" 
                 If the tree contains hidden root nodes they must be provided.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetTreeContainsNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, aTreeView, SetTreeContainsNode, "Parent Bank-&gt;Branch Banking and Trust", isFound</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Node</B><BR/><short_desc xmlns="">
             				The name of the node to verify.
              			</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             				The search of the path to the node is expected to be a case-sensitive 
	     				exact match of each node.  Use 'SetTreeContainsPartialMatch' if you 
	     				wish to specify case-insensitive substring matches for tree nodes.
              			</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ResultVar</B><BR/><short_desc xmlns="">
	             			The name of the variable which gets assigned the result.
	              		</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
	             			The value of 'TRUE' indicates the node was found in the tree, and 'FALSE'
	             			indicates that the node was not found in the tree.
	              		</detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetTreeContainsPartialMatch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, aTreeView, VerifyTreeContainsNode, "parent-&gt;branch", isFound</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Node</B><BR/><short_desc xmlns="">
             				The name of the node to verify.
              			</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             				The search of the path to the node is expected to be a case-insensitive 
					substring match of each node.  Use 'SetTreeContainsNode' if you 
             				wish to specify case-sensitive substring matches for tree nodes.
              			</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ResultVar</B><BR/><short_desc xmlns="">
	             			The name of the variable which gets assigned the result.
	              		</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
	             			The value of 'TRUE' indicates the node was found in the tree, and 'FALSE'
	             			indicates that the node was not found in the tree.
	              		</detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ShiftClickUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, ShiftClickUnverifiedTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, ShiftClickUnverifiedTextNode, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to SHIFT-click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to SHIFT-click.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyTreeContainsNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, aTreeView, VerifyTreeContainsNode, "Parent Bank-&gt;Branch Banking and Trust"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Node</B><BR/><short_desc xmlns="">
             		The name of the node to verify.
              	</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             		The search of the path to the node is expected to be a case-sensitive 
	     		exact match of each node.  Use 'VerifyTreeContainsPartialMatch' if you 
	     		wish to specify case-insensitive substring matches for tree nodes.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyTreeContainsPartialMatch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, aTreeView, VerifyTreeContainsNode, "parent-&gt;branch"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Node</B><BR/><short_desc xmlns="">
             		The name of the node to verify.
              	</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             		The search of the path to the node is expected to be a case-insensitive 
			substring match of each node.  Use 'VerifyTreeContainsNode' if you 
             		wish to specify case-sensitive substring matches for tree nodes.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>LabelFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="LabelFunctions.htm" target="_blank">
<FONT color="#000000">LabelFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>Click</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, AWindow, ALabel, CLICK</FONT></LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>ListBoxFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="ListBoxFunctions.htm" target="_blank">
<FONT color="#000000">ListBoxFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>ActivatePartialMatch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ListBox, ActivatePartialMatch ,  "ATextSubstring"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive substring of node to DblClick and verify.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue should contain the case-sensitive substring to DblClick and verify.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ActivateTextItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ListBox, ActivateTextItem ,  "AParticularUserID"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to DblClick and verify.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue should contain the case-sensitive text item to DblClick and verify.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ActivateUnverifiedPartialMatch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ListBox, ActivateUnverifiedPartialMatch ,  "ATextSubstring"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive substring of node to DblClick.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue should contain the case-sensitive substring to DblClick.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ActivateUnverifiedTextItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ListBox, ActivateUnverifiedTextItem ,  "AParticularUserID"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to DblClick.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue should contain the case-sensitive text item to DblClick.
                 <p>No check is performed after the selection to verify success.  
                 This is typically done for cases when the listbox is only temporary 
                 in nature and disappears immediately upon a selection.</p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CaptureItemsToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T, WINDOW, ListBox, CaptureItemsToFile ,  afile.txt   </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListBox, CaptureItemsToFile ,  afile.txt, "UTF-8"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>FileName</B><BR/><short_desc xmlns=""> 
                 File name (if not absolute, then to test dir)
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 File name (if not absolute, then to test dir)
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>FileEncoding</B><BR/><short_desc xmlns="">
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickColumnIndex</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListBox, ClickColumnIndex ,  1   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Index</B><BR/><short_desc xmlns=""> 
                 Index of the column header to click, starting from 1
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Index of the column header to click, starting from 1
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickColumnLabel</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListBox, ClickColumnLabel ,  "Product"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Label</B><BR/><short_desc xmlns=""> 
                 Label of the column header to click
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Label of the column header to click
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickTextItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListBox, ClickTextItem ,  "AParticularUserID"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue should contain the case-sensitive text item to select.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ExtendSelectionToTextItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListBox, ExtendSelectionToTextItem,  "AParticularUserID"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select and verify.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightClickTextItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListBox, RightClickTextItem ,  "AParticularUserID"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to right-click on.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue should contain the case-sensitive text item to right-click.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectAnotherTextItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListBox, SelectAnotherTextItem ,  "AParticularUserID"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select and verify.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectAnotherUnverifiedTextItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListBox, SelectAnotherUnverifiedTextItem ,  "AParticularUserID"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectIndex</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListBox, SelectIndex ,  1   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Index</B><BR/><short_desc xmlns=""> 
                 Index of the text item to select, starting from 1
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Index of the text item to select, starting from 1
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectPartialMatch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListBox, SelectPartialMatch ,  "ATextSubstring"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive substring of node to select and verify.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue should contain the case-sensitive substring to select and verify.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectTextItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListBox, SelectTextItem ,  "AParticularUserID"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select and verify.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue should contain the case-sensitive text item to select and verify.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectUnverifiedAnotherTextItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListBox, SelectUnverifiedAnotherTextItem ,  "AParticularUserID"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectUnverifiedPartialMatch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListBox, SelectUnverifiedPartialMatch ,  "ATextSubstring"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive substring of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue should contain the case-sensitive substring to select.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectUnverifiedTextItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListBox, SelectUnverifiedTextItem ,  "AParticularUserID"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue should contain the case-sensitive text item to select.
                 <p>No check is performed after the selection to verify success.  
                 This is typically done for cases when the listbox is only temporary 
                 in nature and disappears immediately upon a selection.</p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetListContains</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
					T, WINDOW, ListView, SetListContains ,  "AParticularServerName", isFound
				</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ItemText</B><BR/><short_desc xmlns="">
						The case-sensitive name of the sought item.
					</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
						ItemText should contain the case-sensitive text item to find in the list view.
						A message is sent to the log confirming whether or not the item is found in the list view.
					</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ResultVar</B><BR/><short_desc xmlns="">
						The name of the variable receiving the result.
					</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
						This variable is set with 'TRUE' if the item is found or 'FALSE' if the item is not found.
					</detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ListBox, VerifyItem, 1, "ATextString"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ListBox, VerifyItem, 10, "ATextString10"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Index</B><BR/><short_desc xmlns=""> 
                 Index of the item in the list starting from 1
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Index of the item in the list starting from 1
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive string to compare to the text of the node at the index.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Case-sensitive string to compare to the text of the node at the index.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyItemUnselected</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ListBox, VerifyItemUnselected,  "AParticularUserID"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node that will be verified as unselected
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue should contain the case-sensitive text of the item that is expected to NOT be selected.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyListContains</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ListBox, VerifyListContains, "ATextString", "True"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ListBox, VerifyListContains, "ATextString", "Case-Sensitive"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ListBox, VerifyListContains, "ATextString10", "False"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ListBox, VerifyListContains, "ATextString10"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 String to look for in the list.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 String to look for in the list.  
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>CaseSensitive</B><BR/><short_desc xmlns=""> 
	                 Optional "True" for case-sensitive search
	              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
	                 Optional "True" for case-sensitive search.<br>
	                 Robot (others?) also supports "CASE-SENSITIVE" in place of "TRUE" for this parameter.
	              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyListContainsPartialMatch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ListBox, VerifyListContainsPartialMatch, "Text", "True"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ListBox, VerifyListContainsPartialMatch, "Text", "Case-Sensitive"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ListBox, VerifyListContainsPartialMatch, "Text", "False"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ListBox, VerifyListContainsPartialMatch, "Text"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 SubString to look for in the list.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 SubString to look for in the list.  
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>CaseSensitive</B><BR/><short_desc xmlns=""> 
	                 Optional "True" for case-sensitive search
	              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
	                 Optional "True" for case-sensitive search.<br>
	                 Robot (others?) also supports "CASE-SENSITIVE" in place of "TRUE" for this parameter.
	              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyListDoesNotContain</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ListBox, VerifyListDoesNotContain, "ATextString", "True"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ListBox, VerifyListDoesNotContain, "ATextString", "Case-Sensitive"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ListBox, VerifyListDoesNotContain, "ATextString10", "False"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ListBox, VerifyListDoesNotContain, "ATextString10"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                      String to look for in the list.
                   </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                      String to look for in the list.
                   </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>CaseSensitive</B><BR/><short_desc xmlns=""> 
     	                 Optional "True" for case-sensitive search
     	              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
     	                 Optional "True" for case-sensitive search.  Robot also supports the literal 
     	                 string "CASE-SENSITIVE" instead of "TRUE".
     	              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyListDoesNotContainPartialMatch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ListBox, VerifyListDoesNotContainPartialMatch, "Text", "True"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ListBox, VerifyListDoesNotContainPartialMatch, "String", "Case-Sensitive"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ListBox, VerifyListDoesNotContainPartialMatch, "String", "False"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ListBox, VerifyListDoesNotContainPartialMatch, "Text"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                      SubString to look for in the list.
                   </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                      SubString to look for in the list.
                   </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>CaseSensitive</B><BR/><short_desc xmlns=""> 
     	                 Optional "True" for case-sensitive search
     	              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
     	                 Optional "True" for case-sensitive search.  Robot also supports the literal 
     	                 string "CASE-SENSITIVE" instead of "TRUE".
     	              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyMenuItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ListBox, VerifyMenuItem, "ATextString"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ListBox, VerifyMenuItem, "ATextString10"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive string to compare to the text of any node in the list.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Case-sensitive string to compare to the text of any node in the list.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyMenuPartialMatch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ListBox, VerifyMenuPartialMatch, "ATextString"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ListBox, VerifyMenuPartialMatch, "10"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-insensitive substring to compare to the text of any node in the list.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Case-insensitive substring to compare to the text of any node in the list.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyPartialMatch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ListBox, VerifyPartialMatch, 1, "AText"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ListBox, VerifyItem, 10, "10"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Index</B><BR/><short_desc xmlns=""> 
                 Index of the item in the list starting from 1
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Index of the item in the list starting from 1
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-insensitive substring to compare to the text of the node at the index.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Case-insensitive substring to compare to the text of the node at the index.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifySelectedItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ListBox, VerifySelectedItem ,  "AParticularUserID"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node that will be verified as selected
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue should contain the case-sensitive text of the item expected to already be selected
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifySelectedPartialMatch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ListBox, VerifySelectedPartialMatch ,  "ATextSubstring"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive substring of node that will be verified selected
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue should contain the case-sensitive substring of the item expected to already be selected
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>ListViewFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="ListViewFunctions.htm" target="_blank">
<FONT color="#000000">ListViewFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>ActivateIndex</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListBox, ActivateIndex ,  3   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Index</B><BR/><short_desc xmlns=""> 
                 Index of the text item to select
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                It is important to note that some ListViews index their values
                differently.  For example, you may need to select an item by 
                text by using a property whose starting index is 1.  Yet, 
                if you request to seek an item strictly by index, the starting 
                index is 0.  So, the test developer may need to evaluate their 
                ListView object for these differences.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ActivateIndexItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListView, ActivateIndexItem ,  3   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>IndexValue</B><BR/><short_desc xmlns=""> 
                 Index of item to activate.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                It is important to note that some ListViews index their values
                differently.  For example, you may need to select an item by 
                text by using a property whose starting index is 1.  Yet, 
                if you request to seek an item strictly by index, the starting 
                index is 0.  So, the test developer may need to evaluate their 
                ListView object for these differences.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ActivatePartialMatch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T, WINDOW, ListView, ActivatePartialMatch,  "ATextSubstring"   </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListView, ActivatePartialMatch ,  "ATextSubstring", "Index=2"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>PartialTextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive substring of text item to select
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 PartialTextValue should be a case-sensitive substring of text item to select.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ActivateTextItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T, WINDOW, ListView, ActivateTextItem ,  "AParticularUserID"   </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListView, ActivateTextItem ,  "AParticularUserID", "Index=2"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>SelectTextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 SelectTextValue should contain the case-sensitive text item to select.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ActivateTextItemCoords</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T  WINDOW  MyList  ActivateTextItemCoords  "AParticularUserID"  "5,20"   </FONT></LI>
<LI type="circle"><FONT color="#800080"> T  WINDOW  MyList  ActivateTextItemCoords  "AParticularUserID"  "5,20"  "Index=3" </FONT></LI>
<LI type="circle"><FONT color="#800080"> T  WINDOW  MyList ActivateTextItemCoords  "AParticularUserID"  "Coords=5,20"   </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T  WINDOW  MyList  ActivateTextItemCoords  "AParticularUserID"  CENTER   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>SelectTextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 SelectTextValue should contain the case-sensitive text item to select.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Coords</B><BR/><short_desc xmlns=""> 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                We first check to see if the field contains a reference to an 
                App Map item.  If that cannot be found, we will assume the field 
                contains explicit coordinates.
                <p>We expect the coordinates in the format "x,y":</p>
                <p>
                [MyListView]<br>
                Center=5,120   OR<br>
                Center=Coords=5,120 </p>
                <p>
                The results from the lookup are appended to the "Coords=" string 
                used by the Click command in Robot (if necessary).</p>
                <p>
                Both Fields #3(component name) and #6(coords reference name) 
                are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ActivateUnverifiedTextItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T, WINDOW, ListView, ActivateUnverifiedTextItem ,  "AParticularUserID"   </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListView, ActivateUnverifiedTextItem ,  "AParticularUserID", "Index=3"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>SelectTextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 SelectTextValue should contain the case-sensitive text item to select.
                 The selection will not be verified.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ActivateUnverifiedTextItemCoords</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T  WINDOW  MyList  ActivateUnverifiedTextItemCoords  "AParticularUserID"  "5,20"   </FONT></LI>
<LI type="circle"><FONT color="#800080"> T  WINDOW  MyList  ActivateUnverifiedTextItemCoords  "AParticularUserID"  "5,20"  "Index=2" </FONT></LI>
<LI type="circle"><FONT color="#800080"> T  WINDOW  MyList ActivateUnverifiedTextItemCoords  "AParticularUserID"  "Coords=5,20"   </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T  WINDOW  MyList  ActivateUnverifiedTextItemCoords  "AParticularUserID"  CENTER   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>SelectTextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 SelectTextValue should contain the case-sensitive text item to select.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Coords</B><BR/><short_desc xmlns=""> 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                We first check to see if the field contains a reference to an 
                App Map item.  If that cannot be found, we will assume the field 
                contains explicit coordinates.
                <p>We expect the coordinates in the format "x,y":</p>
                <p>
                [MyListView]<br>
                Center=5,120   OR<br>
                Center=Coords=5,120 </p>
                <p>
                The results from the lookup are appended to the "Coords=" string 
                used by the Click command in Robot (if necessary).</p>
                <p>
                Both Fields #3(component name) and #6(coords reference name) 
                are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>AssignCellValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T  WINDOW  MyList  AssignCellValue  "^variablename"  2   3   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Varibale</B><BR/><short_desc xmlns=""> 
                 Name of variable to assign value
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 The variable name that should be used to hold the value retrieved by this command.  
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>RowCoord</B><BR/><short_desc xmlns=""> 
                The coordinate of the row in the listview that you want to capture the value.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                We will capture the row, column value in the listview and assign it to the variable value.
                First you identify the row and then the column.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ColCoord</B><BR/><short_desc xmlns=""> 
                The coordinate of the column in the listview that you want to capture the value.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                We will capture the row, column value in the listview and assign it to the variable value.
                First you identify the row and then the column.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CaptureItemsToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T, WINDOW, ListBox, CaptureItemsToFile ,  afile.txt   </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListBox, CaptureItemsToFile ,  afile.txt, "UTF-8"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>FileName</B><BR/><short_desc xmlns=""> 
                 File name (if not absolute, then to test dir)
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 File name (if not absolute, then to test dir)
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>FileEncoding</B><BR/><short_desc xmlns="">
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickIndex</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListBox, ClickIndex ,  3   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Index</B><BR/><short_desc xmlns=""> 
                 See ListView ActivateIndexItem
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickIndexItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListBox, ClickIndexItem ,  3   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Index</B><BR/><short_desc xmlns=""> 
                 See ListView ActivateIndexItem
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ExtendSelectionToTextItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListView, ExtendSelectionToTextItem,  "AParticularUserID"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select and verify.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightClickTextItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T, WINDOW, ListView, RightClickTextItem ,  "AParticularUserID"   </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListView, RightClickTextItem ,  "AParticularUserID", "Index=2"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>SelectTextValue</B><BR/><short_desc xmlns=""> 
                      Case-sensitive text of node to RightClick
                   </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                      SelectTextValue should contain the case-sensitive text item to RightClick.
                   </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                      Optional index of the Nth duplicate item to match.
                   </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                      Allows us to match duplicate item N in a list containing duplicate 
                      entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                      the provided text value.
                      <p>
                      The value of the parameter can have 2 forms:<br>
                      <ul>
                      <li>A numeric value.  Ex: "3"</li>
                      <li>Index prefixed value.  Ex: "Index=3"</li>
                      </ul>
                      </p>
                   </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightClickTextItemCoords</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T  WINDOW  MyList  RightClickTextItemCoords  "AParticularUserID"  "5,20"   </FONT></LI>
<LI type="circle"><FONT color="#800080"> T  WINDOW  MyList  RightClickTextItemCoords  "AParticularUserID"  "5,20"  "Index=2"  </FONT></LI>
<LI type="circle"><FONT color="#800080"> T  WINDOW  MyList RightClickTextItemCoords  "AParticularUserID"  "Coords=5,20"   </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T  WINDOW  MyList  RightClickTextItemCoords  "AParticularUserID"  CENTER   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>SelectTextValue</B><BR/><short_desc xmlns=""> 
                      Case-sensitive text of node to RightClick
                   </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                      SelectTextValue should contain the case-sensitive text item to RightClick.
                   </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Coords</B><BR/><short_desc xmlns=""> 
                     The explicit coordinates ("x,y") or an App Map reference to 
                     pre-defined coordinates.
                   </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                     We first check to see if the field contains a reference to an 
                     App Map item.  If that cannot be found, we will assume the field 
                     contains explicit coordinates.
                     <p>We expect the coordinates in the format "x,y":</p>
                     <p>
                     [MyListView]<br>
                     Center=5,120   OR<br>
                     Center=Coords=5,120 </p>
                     <p>
                     The results from the lookup are appended to the "Coords=" string 
                     used by the Click command in Robot (if necessary).</p>
                     <p>
                     Both Fields #3(component name) and #6(coords reference name) 
                     are used to locate the item in the App Map.
                     This routine does not specify an App Map so only the current Map
                     is used and it is expected to be valid.</p>
                   </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                      Optional index of the Nth duplicate item to match.
                   </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                      Allows us to match duplicate item N in a list containing duplicate 
                      entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                      the provided text value.
                      <p>
                      The value of the parameter can have 2 forms:<br>
                      <ul>
                      <li>A numeric value.  Ex: "3"</li>
                      <li>Index prefixed value.  Ex: "Index=3"</li>
                      </ul>
                      </p>
                   </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightClickUnverifiedTextItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T, WINDOW, ListView, RightClickUnverifiedTextItem ,  "AParticularUserID"   </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListView, RightClickUnverifiedTextItem ,  "AParticularUserID", "Index=3"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>SelectTextValue</B><BR/><short_desc xmlns=""> 
                      Case-sensitive text of node to RightClick
                   </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                      SelectTextValue should contain the case-sensitive text item to RightClick.
                      The selection will not be verified.
                   </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                      Optional index of the Nth duplicate item to match.
                   </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                      Allows us to match duplicate item N in a list containing duplicate 
                      entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                      the provided text value.
                      <p>
                      The value of the parameter can have 2 forms:<br>
                      <ul>
                      <li>A numeric value.  Ex: "3"</li>
                      <li>Index prefixed value.  Ex: "Index=3"</li>
                      </ul>
                      </p>
                   </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightClickUnverifiedTextItemCoords</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T  WINDOW  MyList  RightClickUnverifiedTextItemCoords  "AParticularUserID"  "5,20"   </FONT></LI>
<LI type="circle"><FONT color="#800080"> T  WINDOW  MyList  RightClickUnverifiedTextItemCoords  "AParticularUserID"  "5,20"  "Index=3" </FONT></LI>
<LI type="circle"><FONT color="#800080"> T  WINDOW  MyList RightClickUnverifiedTextItemCoords  "AParticularUserID"  "Coords=5,20"   </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T  WINDOW  MyList  RightClickUnverifiedTextItemCoords  "AParticularUserID"  CENTER   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>SelectTextValue</B><BR/><short_desc xmlns=""> 
                      Case-sensitive text of node to select
                   </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                      SelectTextValue should contain the case-sensitive text item to RightClick.
                   </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Coords</B><BR/><short_desc xmlns=""> 
                     The explicit coordinates ("x,y") or an App Map reference to 
                     pre-defined coordinates.
                   </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                     We first check to see if the field contains a reference to an 
                     App Map item.  If that cannot be found, we will assume the field 
                     contains explicit coordinates.
                     <p>We expect the coordinates in the format "x,y":</p>
                     <p>
                     [MyListView]<br>
                     Center=5,120   OR<br>
                     Center=Coords=5,120 </p>
                   </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                      Optional index of the Nth duplicate item to match.
                   </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                      Allows us to match duplicate item N in a list containing duplicate 
                      entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                      the provided text value.
                      <p>
                      The value of the parameter can have 2 forms:<br>
                      <ul>
                      <li>A numeric value.  Ex: "3"</li>
                      <li>Index prefixed value.  Ex: "Index=3"</li>
                      </ul>
                      </p>
                   </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectAnotherPartialMatch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T, WINDOW, ListView, SelectAnotherPartialMatch,  "ASubstring"   </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListView, SelectAnotherPartialMatch,  "ASubstring", "Index=2" </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>PartialTextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive substring of text item to select.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match. 
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectAnotherTextItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T, WINDOW, ListView, SelectAnotherTextItem ,  "AParticularUserID"   </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListView, SelectAnotherTextItem ,  "AParticularUserID", "Index=2" </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match. 
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectIndex</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListBox, SelectIndex ,  3   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Index</B><BR/><short_desc xmlns=""> 
                 See ListView SelectIndexItem
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectIndexItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListView, SelectIndexItem ,  4   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ItemIndex</B><BR/><short_desc xmlns=""> 
                 Index of node to select.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectIndexItemCoords</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T  WINDOW  MyList  SelectIndexItemCoords  "2"  "5,20"   </FONT></LI>
<LI type="circle"><FONT color="#800080"> T  WINDOW  MyList  SelectIndexItemCoords  "2"  "Coords=5,20"   </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T  WINDOW  MyList  SelectIndexItemCoords  "2"  "Center"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ItemIndex</B><BR/><short_desc xmlns=""> 
                 Index of node to select.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Coords</B><BR/><short_desc xmlns=""> 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                We first check to see if the field contains a reference to an 
                App Map item.  If that cannot be found, we will assume the field 
                contains explicit coordinates.
                <p>We expect the coordinates in the format "x,y":</p>
                <p>
                [MyListView]<br>
                Center=5,120   OR<br>
                Center=Coords=5,120 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectPartialMatch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T, WINDOW, ListView, SelectPartialMatch ,  "APartialString"   </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListView, SelectPartialMatch ,  "APartialString", "Index=2"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>PartialTextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive substring of node to select
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 PartialTextValue should be a case-sensitive substring of text item to select.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectRandomItems</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListView, SelectRandomItems , "3"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ItemCount</B><BR/><short_desc xmlns=""> 
                  The quantity of items to randomly select in the object.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectTextItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T, WINDOW, ListView, SelectTextItem ,  "AParticularUserID"   </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListView, SelectTextItem ,  "AParticularUserID", "Index=2"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>SelectTextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 SelectTextValue should contain the case-sensitive text item to select.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectTextItemCoords</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T  WINDOW  MyList  SelectTextItemCoords  "AParticularUserID"  "5,20"   </FONT></LI>
<LI type="circle"><FONT color="#800080"> T  WINDOW  MyList  SelectTextItemCoords  "AParticularUserID"  "5,20"  "Index=2"  </FONT></LI>
<LI type="circle"><FONT color="#800080"> T  WINDOW  MyList SelectTextItemCoords  "AParticularUserID"  "Coords=5,20"   </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T  WINDOW  MyList  SelectTextItemCoords  "AParticularUserID"  CENTER   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>SelectTextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 SelectTextValue should contain the case-sensitive text item to select.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Coords</B><BR/><short_desc xmlns=""> 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                We first check to see if the field contains a reference to an 
                App Map item.  If that cannot be found, we will assume the field 
                contains explicit coordinates.
                <p>We expect the coordinates in the format "x,y":</p>
                <p>
                [MyListView]<br>
                Center=5,120   OR<br>
                Center=Coords=5,120 </p>
                <p>
                The results from the lookup are appended to the "Coords=" string 
                used by the Click command in Robot (if necessary).</p>
                <p>
                Both Fields #3(component name) and #6(coords reference name) 
                are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectUnverifiedTextItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T, WINDOW, ListView, SelectUnverifiedTextItem ,  "AParticularUserID"   </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ListView, SelectUnverifiedTextItem ,  "AParticularUserID", "Index=3"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>SelectTextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 SelectTextValue should contain the case-sensitive text item to select.
                 The selection will not be verified.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectUnverifiedTextItemCoords</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T  WINDOW  MyList  SelectUnverifiedTextItemCoords  "AParticularUserID"  "5,20"   </FONT></LI>
<LI type="circle"><FONT color="#800080"> T  WINDOW  MyList  SelectUnverifiedTextItemCoords  "AParticularUserID"  "5,20"  "Index=3" </FONT></LI>
<LI type="circle"><FONT color="#800080"> T  WINDOW  MyList SelectUnverifiedTextItemCoords  "AParticularUserID"  "Coords=5,20"   </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T  WINDOW  MyList  SelectUnverifiedTextItemCoords  "AParticularUserID"  CENTER   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>SelectTextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 SelectTextValue should contain the case-sensitive text item to select.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Coords</B><BR/><short_desc xmlns=""> 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                We first check to see if the field contains a reference to an 
                App Map item.  If that cannot be found, we will assume the field 
                contains explicit coordinates.
                <p>We expect the coordinates in the format "x,y":</p>
                <p>
                [MyListView]<br>
                Center=5,120   OR<br>
                Center=Coords=5,120 </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetListContains</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
					T, WINDOW, ListView, SetListContains ,  "AParticularServerName", isFound
				</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ItemText</B><BR/><short_desc xmlns="">
						The case-sensitive name of the sought item.
					</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
						ItemText should contain the case-sensitive text item to find in the list view.
						A message is sent to the log confirming whether or not the item is found in the list view.
					</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ResultVar</B><BR/><short_desc xmlns="">
						The name of the variable receiving the result.
					</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
						This variable is set with 'TRUE' if the item is found or 'FALSE' if the item is not found.
					</detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyItemUnselected</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ListView, VerifyItemUnselected,  "AParticularUserID"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node that will be verified unselected
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue should contain the case-sensitive text of the item that is expected NOT to be selected.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyListContains</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">
					T, WINDOW, ListView, VerifyListContains ,  "AParticularServerName"
				</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ItemText</B><BR/><short_desc xmlns="">
						The case-sensitive name of the item to verify.
					</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
						ItemText should contain the case-sensitive text item to find in the list view.
						A message is sent to the log confirming whether or not the item is found in the list view.
					</detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifySelectedItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ListView, VerifySelectedItem ,  "AParticularUserID"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node that will be verified selected
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue should contain the case-sensitive text of the item expected to already be selected
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>PopupMenuFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="PopupMenuFunctions.htm" target="_blank">
<FONT color="#000000">PopupMenuFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>SelectPopupMenuID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, Anything, AtAll, SelectPopupMenuID, 1001</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>MenuItemID</B><BR/><short_desc xmlns=""> 
                The Windows menuID of the menuItem to select.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectPopupMenuItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Anything, AtAll, SelectPopupMenuItem, "File-&gt;Save   Ctrl+S"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, Anything, AtAll, SelectPopupMenuItem, "&amp;File-&gt;&amp;Save   Ctrl+S"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, ParentWindow, popupMenu, SelectPopupMenuItem, "File-&gt;Save"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, ParentWindow, popupFileMenu, SelectPopupMenuItem, "Save"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, ParentWindow, popupSaveMenu, SelectPopupMenuItem</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>MenuItemText</B><BR/><short_desc xmlns=""> 
                Menu-&gt;MenuItem hierarchy to the menuItem to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to select.<br>
                NOTE:SQA can only handle submenus up to 5 levels deep.<br>
				NOTE:For RJ implementation, this field is optional if the "child" is a "MenuItem"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectUnverifiedPopupMenuItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Anything, AtAll, SelectUnverifiedPopupMenuItem, "File-&gt;Save   Ctrl+S"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, Anything, AtAll, SelectUnverifiedPopupMenuItem, "&amp;File-&gt;&amp;Save   Ctrl+S"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, ParentWindow, popupMenu, SelectUnverifiedPopupMenuItem, "File-&gt;Save"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, ParentWindow, popupFileMenu, SelectUnverifiedPopupMenuItem, "Save"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>MenuItemText</B><BR/><short_desc xmlns=""> 
                Menu-&gt;MenuItem hierarchy to the menuItem to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to select.<br>
                NOTE:SQA can only handle submenus up to 5 levels deep.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyPopupMenu</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                , F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Anything, AtAll, VerifyPopupMenu, BenchFile.ext </FONT></LI>
<LI type="circle"><FONT color="#800080">T, Anything, AtAll, VerifyPopupMenu, BenchFile.ext, "Normal App State Menu" </FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Anything, AtAll, VerifyPopupMenu, BenchFile.ext, "", TestFile.ext, DiffFile.ext </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchmarkFile</B><BR/><short_desc xmlns=""> 
             The name.ext of the file used as the comparison benchmark.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The name.ext of the file used as the comparison benchmark.<br>
                Typically, benchmarks are stored in the Datapool\Bench directory.  
                In that event, only the filename.ext is needed.  Otherwise, the 
                full file path is needed.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>HeaderText</B><BR/><short_desc xmlns=""> 
                Optional descriptive header line of text to match with the benchmark.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                Optional header line of text to match with the benchmark.<br>
                If the benchmark file was created with or contains an initial line 
                of descriptive text then that line must be provided here for 
                the comparison to be successful.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>ActualFile</B><BR/><short_desc xmlns=""> 
                The optional name.ext of the file used for the captured menu status.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The optional name.ext of the file used for the captured menu status.<br>
                Typically, actuals are stored in the Datapool\Test directory with the same 
                name as the benchmark file.  Thus, you would normally leave this blank.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>DiffFile</B><BR/><short_desc xmlns=""> 
                The optional name.ext of the file used to contain the differences found.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The optional name.ext of the file used to contain the differences found.<br>
                Typically, diffs are stored in the Datapool\Dif directory with the same 
                name as the benchmark file.  Thus, you would normally leave this blank.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyPopupMenuID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                , F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Anything, AtAll, VerifyPopupMenuID, 1001, "Enabled Menu With 7 MenuItems"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Anything, AtAll, VerifyPopupMenuID, 10400, "Disabled Unchecked"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>MenuItemID</B><BR/><short_desc xmlns=""> 
                The Windows menuID of the menuItem to verify.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>StateInfo</B><BR/><short_desc xmlns=""> 
                Expected status string (or part thereof) to verify.  
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                Expected status string (or part thereof) to verify.  
                Ex:  "Enabled Checked"  OR  "Disabled Grayed"    etc.
                Each item separated by a space will be evaluated separately so 
                the order of the status items does not matter.  
                These status items (listed below) currently ARE case-sensitive. 
                <p>
                "Enabled"     "Grayed"      "BarBreak"                "Bitmap"
                "Disabled"    "Ungrayed"    "Separator"               "Break"
                "Checked"     "Hilited"     "Default"                 "Menu With N MenuItems"
                "Unchecked"   "Unhilited"   "Normal" (not default)
                </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyPopupMenuItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                , F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Anything, AtAll, VerifyPopupMenuItem, "File", "Enabled Menu With 7 MenuItems"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, Anything, AtAll, VerifyPopupMenuItem, "&amp;View-&gt;&amp;Toolbars-&gt;P&amp;aint", "Disabled Unchecked"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, parentWindow, popupMenu, VerifyPopupMenuItem, "Weird-&gt;CheckBox", "Enabled"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, parentWindow, popupWeirdMenu, VerifyPopupMenuItem, "CheckBox", "Enabled Unchecked"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>MenuItemText</B><BR/><short_desc xmlns=""> 
                Menu-&gt;MenuItem hierarchy to the menuItem to verify.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to verify.<br>
                NOTE:SQA can only handle submenus up to 5 levels deep.
                <p>
                For RC and Win32 popups: The Window and Component references are not 
                used and can be anything.  They just cannot be blank.</p>
                <p>
                For Java popups: Valid recognition information for the Java window and 
                "child" popup menu must be provided.</p>
                <p>
                Also refer to <i>JavaMenuFunctions</i> for support specific to Java menus and 
                popup menus.</p></detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>StateInfo</B><BR/><short_desc xmlns=""> 
                Expected status string (or part thereof) to verify.  
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                <p>Note: this parameter is partial supported for RJ.</p>
                <p>
                Expected status string (or part thereof) to verify.  
                Ex:  "Enabled Checked"  OR  "Disabled Grayed"    etc.
                Each item separated by a space will be evaluated separately so 
                the order of the status items does not matter.  
                These status items (listed below) currently ARE case-sensitive.</p>                    
                <p>
                "Enabled"     "Grayed"      "BarBreak"                "Bitmap"
                "Disabled"    "Ungrayed"    "Separator"               "Break"
                "Checked"     "Hilited"     "Default"                 "Menu With N MenuItems"
                "Unchecked"   "Unhilited"   "Normal" (not default)
                </p>
                <p>
                "Enabled"     "Grayed"      "Bitmap"
                "Disabled"    "Ungrayed"    "Separator"
                "Checked"     "Unchecked"   "Menu With N MenuItems" are supported by RJ.
                </p>			   
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyPopupMenuPartialMatch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                , F
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, ParentWindow, popupMenu, VerifyPopupMenuPartialMatch, "Fil-&gt;Ope"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>MenuItemText</B><BR/><short_desc xmlns=""> 
                Menu-&gt;MenuItem hierarchy substring to the menuItem
                to search for.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                Menu-&gt;MenuItem hierarchy substring to identify
                which menuitem to search for.<br>
                <p>
                For Java popups: Valid recognition information for the Java window and 
                "child" popup menu must be provided.</p>
                <p>
                Also refer to <i>JavaMenuFunctions</i> for support specific to Java menus and 
                popup menus.</p>                
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>ProgressBarFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="ProgressBarFunctions.htm" target="_blank">
<FONT color="#000000">ProgressBarFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>GetProgress</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ProgressBar, GetProgress, currentPrimaryProgress</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ProgressBar, GetProgress, currentSecondaryProgress, False</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VariableName</B><BR/><short_desc xmlns=""> 
                 The variable VariableName will contain the progress of progress bar in percentage.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 The variable VariableName will contain the progress of progress bar in percentage.
                 If the current progress is 52%, this variable will be set to "52%".
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>IsPrimary</B><BR/><short_desc xmlns=""> 
                 IsPrimary is boolean value (default is true). It indicates which indicator to get.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 IsPrimary is boolean value (default is true). It indicates which indicator to get.
                 Android progress bar has 2 indicators, primary and secondary.
                 If it is True or Yes, the primary indicator's progress will be got; otherwise the secondary's will be got.              
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetRating</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, RatingBar, GetRating, currentRating</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VariableName</B><BR/><short_desc xmlns=""> 
                 The variable VariableName will contain the rating of rating bar.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 The variable VariableName will contain the rating of rating bar.
                 It will contain a float number which represents the rating (number of stars filled).
                 If 5 stars are filled, then this variable will contain 5.0
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetProgress</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ProgressBar, SetProgress, "0.35"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ProgressBar, SetProgress, "59%", False</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ProgressValue</B><BR/><short_desc xmlns=""> 
                 ProgressValue to set.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 ProgressValue to set. It can be a number between 0 and 1, or a percentage number like 52%.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>IsPrimary</B><BR/><short_desc xmlns=""> 
                 IsPrimary is boolean value (default is true). It indicates which indicator to set.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 IsPrimary is boolean value (default is true). It indicates which indicator to set.
                 Android progress bar has 2 indicators, primary and secondary.
                 If it is True or Yes, the primary indicator will be set; otherwise the secondary will be set.              
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetRating</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, RatingBar, SetRating, "3.5"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>RatingValue</B><BR/><short_desc xmlns=""> 
                 RatingValue to set.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 RatingValue to set. It is a float number which represents the rating (number of stars filled).
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>PushButtonFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="PushButtonFunctions.htm" target="_blank">
<FONT color="#000000">PushButtonFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>Click</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, PushButton, CLICK</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickButton</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, PushButton, CLICKBUTTON</FONT></LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>RadioButtonFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="RadioButtonFunctions.htm" target="_blank">
<FONT color="#000000">RadioButtonFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>Click</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, RadioButton, CLICK</FONT></LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>ScrollBarFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="ScrollBarFunctions.htm" target="_blank">
<FONT color="#000000">ScrollBarFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>OneDown</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ScrollBar, ONEDOWN</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ScrollBar, ONEDOWN, 12</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>IntegerValue</B><BR/><short_desc xmlns=""> 
                 Optional integer to specify how many times to perform the action.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OneLeft</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ScrollBar, ONELEFT</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ScrollBar, ONELEFT, 12</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>IntegerValue</B><BR/><short_desc xmlns=""> 
                 Optional integer to specify how many times to perform the action.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OneRight</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ScrollBar, ONERIGHT</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ScrollBar, ONERIGHT, 12</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>IntegerValue</B><BR/><short_desc xmlns=""> 
                 Optional integer to specify how many times to perform the action.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>OneUp</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ScrollBar, ONEUP</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ScrollBar, ONEUP, 12</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>IntegerValue</B><BR/><short_desc xmlns=""> 
                 Optional integer to specify how many times to perform the action.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>PageDown</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ScrollBar, PAGEDOWN</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ScrollBar, PAGEDOWN, 12</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>IntegerValue</B><BR/><short_desc xmlns=""> 
                 Optional integer to specify how many times to perform the action.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>PageLeft</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ScrollBar, PAGELEFT</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ScrollBar, PAGELEFT, 12</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>IntegerValue</B><BR/><short_desc xmlns=""> 
                 Optional integer to specify how many times to perform the action.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>PageRight</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ScrollBar, PAGERIGHT</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ScrollBar, PAGERIGHT, 12</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>IntegerValue</B><BR/><short_desc xmlns=""> 
                 Optional integer to specify how many times to perform the action.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>PageUp</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ScrollBar, PAGEUP</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ScrollBar, PAGEUP, 12</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>IntegerValue</B><BR/><short_desc xmlns=""> 
                 Optional integer to specify how many times to perform the action.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>SSTreeFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="SSTreeFunctions.htm" target="_blank">
<FONT color="#000000">SSTreeFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>CollapseNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, DirectoryTree, COLLAPSENODE, MyNode</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                The named reference of the coordinates to expand/collapse
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The named reference of the coordinates to expand/collapse
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ExpandNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, DirectoryTree, EXPANDNODE, MyNode</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                The named reference of the coordinates to expand/collapse
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The named reference of the coordinates to expand/collapse
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, DirectoryTree, SELECTNODE, MyNode</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                The named reference of the coordinates to click
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                The named reference of the coordinates to click
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyExpandedState</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, DirectoryTree, VERIFYEXPANDEDSTATE, "My Node", "True"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                Case-sensitive text of the node to check.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Case-sensitive text of the node to check.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ExpectedState</B><BR/><short_desc xmlns=""> 
                Expected State: "True" or "False" (not case-sensitive)
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Expected State: "True" or "False" (not case-sensitive)
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifySelectedText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, DirectoryTree, SELECTTEXTNODE, "My Node"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                Case-sensitive text expected in the selected node.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Case-sensitive text expected in the selected node.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>TabControlFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="TabControlFunctions.htm" target="_blank">
<FONT color="#000000">TabControlFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>Click</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TabControl, CLICK, "StatsTab"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text* on the tab to identify which tab to click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue is the case-sensitive text on the tab to identify which tab to click.
                 *For Sheridan SSActiveTabs this will be treated as an AppMap reference to an item
                  that contains coordinates in the form of "xcoord,ycoord".  The item will be 
                  retrieved from the section in the AppMap with the Components name (Field #3).
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>process</B><BR/><short_desc xmlns=""> 
                 Indicator for unverified click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 When process=1, this indicates we are performing an unverified click.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickTab</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TabControl, CLICKTAB, "StatsTab"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text on the tab to identify which tab to click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue is the case-sensitive text on the tab to identify which tab to click.
                 *For Sheridan SSActiveTabs this will be treated as an AppMap reference to an item
                  that contains coordinates in the form of "xcoord,ycoord".  The item will be 
                  retrieved from the section in the AppMap with the Components name (Field #3).
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickTabContains</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, PropertiesWin, TabControl, ClickTabContains, "StatsTab"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Partial case-sensitive text on the tab to identify which tab to click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue is the partial case-sensitive text on the tab to identify which tab to click.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>MakeSelection</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TabControl, MAKESELECTION, "StatsTab"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text on the tab to identify which tab to click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue is the case-sensitive text on the tab to identify which tab to click.
                 *For Sheridan SSActiveTabs this will be treated as an AppMap reference to an item
                  that contains coordinates in the form of "xcoord,ycoord".  The item will be 
                  retrieved from the section in the AppMap with the Components name (Field #3).
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectTab</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TabControl, SelectTab, "StatsTab"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text on the tab to identify which tab to click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                TextValue is the case-sensitive text on the tab to identify which tab to click.
                If the provided text value contains ampersands (for hotkey characters) then 
                ampersands will be retained in the TabControl text for comparisons performed 
                to identify the correct tab to click.  
                Otherwise, ampersands are stripped out of the TabControl text to facilitate 
                these comparisons.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectTabIndex</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TabControl, SelectTabIndex, 2</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TabIndex</B><BR/><short_desc xmlns=""> 
                 Index of the tab to click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                The index of the tab to click.  The user needs to know whether 
                the TabControl indices are 0-based or 1-based.  SAFS for RFT attempts to 
                allow the user to use 1-based indices for all controls.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>UnverifiedClick</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TabControl, UNVERIFIEDCLICK, "StatsTab"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text* on the tab to identify which tab to click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue is the case-sensitive text on the tab to identify which tab to click.
                 *For Sheridan SSActiveTabs this will be treated as an AppMap reference to an item
                  that contains coordinates in the form of "xcoord,ycoord".  The item will be 
                  retrieved from the section in the AppMap with the Components name (Field #3).
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>UnverifiedClickTab</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TabControl, UnverifiedClickTab, "StatsTab"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text* on the tab to identify which tab to click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue is the case-sensitive text on the tab to identify which tab to click.
                 *For Sheridan SSActiveTabs this will be treated as an AppMap reference to an item
                  that contains coordinates in the form of "xcoord,ycoord".  The item will be 
                  retrieved from the section in the AppMap with the Components name (Field #3).
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>TableViewFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="TableViewFunctions.htm" target="_blank">
<FONT color="#000000">TableViewFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>ActivateTableRow</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOWNAME, COMPNAME, ACTIVATETABLEROW, 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Row</B><BR/><short_desc xmlns=""> 
     	                 The row number to activate.
     	              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
     	                 Activates the row to the one specified here
     	              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetCellValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOWNAME, COMPNAME, GetCellValue, VARIABLENAME, 1, 1</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOWNAME, COMPNAME, GetCellValue, "^VARIABLENAME", 1, 1</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOWNAME, COMPNAME, GetCellValue, VARIABLENAME, ^row=1, ^column=1</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VariableName</B><BR/><short_desc xmlns=""> 
				 The variable that the data will be stored in.
			      </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Row</B><BR/><short_desc xmlns=""> 
				 The row that the data will be extracted from
			      </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>Column</B><BR/><short_desc xmlns=""> 
          	                 The column that the data will be extracted from.
          	              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetRowCount</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOWNAME, COMPNAME, GetRowCount, VARIABLENAME</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>RowCount</B><BR/><short_desc xmlns=""> 
				 The variable that the number of rows will be stored in.
			      </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetSelectedColumn</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOWNAME, COMPNAME, SETSELECTEDCOLUMN, 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Column</B><BR/><short_desc xmlns=""> 
     	                 The column number that the TableView should be set to.
     	              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
     	                 Set the current column to the one specified in this parameter.
     	              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetSelectedRow</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOWNAME, COMPNAME, SETSELECTEDROW, 5</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Row</B><BR/><short_desc xmlns=""> 
	                 The row number that the TableView should be set to.
	              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
	                 Set the current row to the one specified in this parameter.
	              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetTableCellData</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOWNAME, COMPNAME, SETTABLECELLDATA, 5, 7, "Cell Value"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOWNAME, COMPNAME, SETTABLECELLDATA, 5, 7, ^CellValue</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Row</B><BR/><short_desc xmlns=""> 
          	                 The row that the cell you want to set is in.
          	              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Column</B><BR/><short_desc xmlns=""> 
				 The column that the cell you want to set is in.
			      </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>TextValue</B><BR/><short_desc xmlns=""> 
				 The text value to set the cell value to.
			      </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyCellValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOWNAME, COMPNAME, VERIFYCELLVALUE, "The string to equal", ROW, COLUMN</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOWNAME, COMPNAME, VERIFYCELLVALUE, ^ExpectedString, ROW, COLUMN</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ExpectedText</B><BR/><short_desc xmlns=""> 
     				 The value that the data in the cell is expected to equal.
     			      </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>Row</B><BR/><short_desc xmlns=""> 
				 The row number of the cell to be verified.
			      </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>Column</B><BR/><short_desc xmlns=""> 
				 The column number of the cell to be verified.
			      </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>TimePickerFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="TimePickerFunctions.htm" target="_blank">
<FONT color="#000000">TimePickerFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>GetTime</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TimePicker, GetTime, currentTime</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VariableName</B><BR/><short_desc xmlns=""> 
                 The name of variable to contain the time string of TimePicker.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 The name of variable to contain the time string of TimePicker.
                 The time string will be in format "HH:mm:ss", the hour is in military format (24-hour).
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetTime</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, TimePicker, SetTime, "23:45:12"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TimePicker, SetTime, "7:56"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TimeValue</B><BR/><short_desc xmlns=""> 
                 TimeValue to set.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TimeValue to set. It can be in format of "HH:mm:ss" or "HH:mm".
                 The hour should be in military format (24-hour). For the second, it is ignored
                 for now, as Android TimePicker doesn't support it yet.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>ToolBarFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="ToolBarFunctions.htm" target="_blank">
<FONT color="#000000">ToolBarFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>ClickButton</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T, WINDOW, ToolBar, ClickButton,  "AParticularButtonText"   </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ToolBar, ClickButton,  "aparticularbuttontext", CaseInsensitive   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ButtonTextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of the toolbar button to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Case-sensitive text of the toolbar button to select.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>CaseInsensitive</B><BR/><short_desc xmlns=""> 
                 "1", "CaseInsensitive", or "Case-Insensitive" to match button text in a case-insensitive manner.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickButtonIndex</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T, WINDOW, ToolBar, ClickButtonIndex,  3  </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ToolBar, ClickButtonIndex,  1, "55;8"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Index</B><BR/><short_desc xmlns=""> 
                 Index described which icon to be clicked in the toolbar.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Index described which icon to be clicked in the toolbar.<br>
				<b>RJ Note:</b>
					<ol>
						<li>If the index is bigger than the number of children of toolbar, the last icon will be clicked.</li>
						<li>The tool bar separator is not counted for indexing. If the toolbar contains "button1 | button2", button1 is
							at index 1, button2 is at index 2, the separator between these two buttons is not counted.</li>
					</ol>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Coordination</B><BR/><short_desc xmlns=""> 
				A position within the toolbar button, the mouse will be click there. 
				<br><b>RJ Note:</b> This parameter is special for RJ implementation.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickButtonText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T, WINDOW, ToolBar, ClickButtonText,  "AParticularButtonText"   </FONT></LI>
<LI type="circle"><FONT color="#800080"> T, WINDOW, ToolBar, ClickButtonText,  "aparticularbuttontext", CaseInsensitive   </FONT></LI>
<LI type="circle"><FONT color="#800080"> T, WINDOW, ToolBar, ClickButtonText,  "parent-&gt;child", CaseInsensitive   </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ToolBar, ClickButtonText,  "AButtonText", , "55;8"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ButtonTextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of the toolbar button to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Case-sensitive text of the toolbar button to select.<br>
				 <b>RJ Note:</b> This parameter may be a path like "a-&gt;b-&gt;c"
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>CaseInsensitive</B><BR/><short_desc xmlns=""> 
                 "1", "CaseInsensitive", or "Case-Insensitive" to match button text in a case-insensitive manner.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Coordination</B><BR/><short_desc xmlns=""> 
				A position within the toolbar button, the mouse will be click there. 
				<br><b>RJ Note:</b> This parameter is special for RJ implementation.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickButtonTooltip</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ToolBar, ClickButtonTooltip,  "Connections"  </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Tooltip</B><BR/><short_desc xmlns=""> 
                 Tooltip is description of the icon on ToolBar.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Tooltip is description of the icon on ToolBar.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickUnverifiedButtonID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ToolBar, ClickUnverifiedButtonID,  "1017"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ButtonID</B><BR/><short_desc xmlns=""> 
                 ID for a particular button in the toolbar to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 ID for a particular button in the toolbar to select.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickUnverifiedButtonText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080"> T, WINDOW, ToolBar, ClickUnverifiedButtonText,  "AParticularButtonText"   </FONT></LI>
<LI type="circle"><FONT color="#800080"> T, WINDOW, ToolBar, ClickUnverifiedButtonText,  "aparticularbuttontext", CaseInsensitive   </FONT></LI>
<LI type="circle"><FONT color="#800080"> T, WINDOW, ToolBar, ClickUnverifiedButtonText,  "parent-&gt;child", CaseInsensitive   </FONT></LI>
<LI><FONT color="#800080"><usage xmlns=""> T, WINDOW, ToolBar, ClickUnverifiedButtonText,  "AButtonText", , "55;8"   </usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ButtonTextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of the toolbar button to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Case-sensitive text of the toolbar button to select.<br>
				 <b>RJ Note:</b> This parameter may be a path like "a-&gt;b-&gt;c"
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>CaseInsensitive</B><BR/><short_desc xmlns=""> 
                 "1", "CaseInsensitive", or "Case-Insensitive" to match button text in a case-insensitive manner.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Not all toolbars and buttons will be able to support this case-insensitive option.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Coordination</B><BR/><short_desc xmlns=""> 
				A position within the toolbar button, the mouse will be click there. 
				<b>RJ Note:</b> This parameter is special for RJ implementation.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyButtonClicked</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ToolBar, VerifyButtonClicked,  "AParticularButtonText"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ButtonTextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text(Button.Key) of button that will be verified as clicked
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue should contain the case-sensitive text(Button.Key) of the item expected to already be clicked
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyButtonCount</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ToolBar, VerifyButtonCount,  "buttonCount"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ButtonCount</B><BR/><short_desc xmlns=""> 
                 Numeric count value represents the total button counts in the Toolbar.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Numeric count value represents the total button counts in the Toolbar.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyButtonText</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ToolBar, VerifyButtonText,  "AParticularButtonText"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ToolBar, VerifyButtonText,  "aparticularbuttontext", "Case-Insensitive"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ButtonTextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text (button.key) item that will be verified as exists
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue should contain the case-sensitive text of the item expected to exist.
                 The user has an optional parameter to specify that the provided 
		 text is case-insensitive.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>CaseInsensitive</B><BR/><short_desc xmlns=""> 
                 "1", "CaseInsensitive", or "Case-Insensitive" to match button text in a case-insensitive manner.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyButtonUnClicked</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ToolBar, VerifyButtonUnClicked,  "AParticularButtonText"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>ButtonTextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text(Button.Key) of button that will be verified as unselected
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 TextValue should contain the case-sensitive text(Button.Key) of the item expected to be unselected
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>TreeViewFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="TreeViewFunctions.htm" target="_blank">
<FONT color="#000000">TreeViewFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>ActivateUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, ActivateUnverifiedTextNode, "MyParent-&gt;MyBranch-&gt;MyNode"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, ActivateUnverifiedTextNode, "MyParent-&gt;MyBranch-&gt;MyNode", "3"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TreeView, ActivateUnverifiedTextNode, "MyParent-&gt;MyBranch-&gt;MyNode", "Index=3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of the node to be clicked
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to be clicked
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CaptureTreeDataToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Browser, aTreeView, CaptureTreeDataToFile, aFilename.ext</FONT></LI>
<LI type="circle"><FONT color="#800080">T, Browser, aJavaTree, CaptureTreeDataToFile, myDirectory\aFilename.ext, "Parent Bank-&gt;Branch Banking and Trust", "_"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, aTreeView, CaptureTreeDataToFile, aFilename.ext, , , "UTF-8"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>File</B><BR/><short_desc xmlns="">
             The name of the file used to store the tree data.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             The name of the file used to store the tree data.
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Branch</B><BR/><short_desc xmlns="">
	                	The full name of the tree branch to capture.
	                </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
	                	The full name of the tree branch to capture.  If omitted, all 
	                	branches/nodes are captured.
		        	<br><br>The search of the path to the node is expected to be a case-sensitive 
		        	exact match of each node.  Use 'PartialMatchTreeDataToFile' if you 
		        	wish to specify case-insensitive substring matches for tree nodes.             
                        </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>IndentMark</B><BR/><short_desc xmlns="">
		        	The character(s) to use in the output file to indent the tree nodes from the 
		        	parent tree branches.
		        </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
		         	The character(s) to use in the output file to indent the tree nodes from the 
		        	parent tree branches.  If omitted, a tab character is used.
              		</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>FileEncoding</B><BR/><short_desc xmlns="">
             Specify a character encoding to be used when saving data to a file.
			 If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>FilterMode</B><BR/><short_desc xmlns="">
             (Future) Specify a file filter to use to process the text before comparison.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [10]:<B>FilterOptions</B><BR/><short_desc xmlns="">
             (Future) Specify filter options to use with the file filter.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CheckTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, CheckTextNode, "MyNode"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, CheckTextNode, "MyNode", 3</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TreeView, CheckTextNode, "MyNode", "Index=3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of the node to be checked.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to be checked.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickPartial</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, ClickPartial, "parent"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, ClickPartial, "parent", "3"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, ClickPartial, "parent", "Index=3"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, ClickPartial, "parent-&gt;child"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATreeView, ClickPartial, "parent-&gt;child", "3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-Insensitive text of node to click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-insensitive text of the node to click.
                 Parent-Child relationships are separated by "-&gt;"
                 For each level, a text comparison is performed. If the node 
                 contains the requested substring anywhere in its text, then 
                 that node is considered a match.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, ClickTextNode, "Parent"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, ClickTextNode, "Parent", "3"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, ClickTextNode, "Parent", "Index=3"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, ClickTextNode, "Parent-&gt;Child"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATreeView, ClickTextNode, "Parent-&gt;Child", "3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to click.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ClickUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, ClickUnverifiedTextNode, "MyParent-&gt;MyBranch-&gt;MyNode"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, ClickUnverifiedTextNode, "MyParent-&gt;MyBranch-&gt;MyNode", "3"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TreeView, ClickUnverifiedTextNode, "MyParent-&gt;MyBranch-&gt;MyNode", "Index=3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of the node to be clicked
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to be clicked
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Collapse</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, Collapse, "Parent"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, Collapse, "Parent", "3"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, Collapse, "Parent", "Index=3"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, Collapse, "Parent-&gt;Child"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATreeView, Collapse, "Parent-&gt;Child", "3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to collapse
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to collapse.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CollapsePartial</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, CollapsePartial, "parent"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, CollapsePartial, "parent", "3"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, CollapsePartial, "parent", "Index=3"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, CollapsePartial, "parent-&gt;child"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATreeView, CollapsePartial, "parent-&gt;child", "3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-Insensitive text of node to collapse
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-insensitive text of the node to collapse.
                 Parent-Child relationships are separated by "-&gt;"
                 For each level, a text comparison is performed. If the node 
                 contains the requested substring anywhere in its text, then 
                 that node is considered a match.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CollapsePartialTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, CollapsePartialTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, CollapsePartialTextNode, "parent-&gt;child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-Insensitive text of node to collapse
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-insensitive text of the node to collapse.
                 Parent-Child relationships are separated by "-&gt;"
                 For each level, a text comparison is performed. If the node 
                 contains the requested substring anywhere in its text, then 
                 that node is considered a match.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CollapseTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, COLLAPSETEXTNODE, "MyNode"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, COLLAPSETEXTNODE, "MyNode", 3</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TreeView, COLLAPSETEXTNODE, "MyNode", "Index=3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to collapse
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to collapse
				 <br><b>RJ Implementation:</b>TextValue must be given as full path with separator "-&gt;". Example: "Parent-&gt;Child"
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CollapseUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, CollapseUnverifiedTextNode, "root-&gt;Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, CollapseUnverifiedTextNode, "root-&gt;Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive full path text of node to collapse
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to collapse.
                 Parent-Child relationships are separated by "-&gt;" 
                 If the tree contains hidden root nodes they must be provided.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CtrlClickUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, CtrlClickUnverifiedTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, CtrlClickUnverifiedTextNode, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to CTRL-click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to CTRL-click.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DoubleClickPartial</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, DoubleClickPartial, "parent"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, DoubleClickPartial, "parent", "3"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, DoubleClickPartial, "parent", "Index=3"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, DoubleClickPartial, "parent-&gt;child"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATreeView, DoubleClickPartial, "parent-&gt;child", "3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-Insensitive text of node to double click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-insensitive text of the node to double click.
                 Parent-Child relationships are separated by "-&gt;"
                 For each level, a text comparison is performed. If the node 
                 contains the requested substring anywhere in its text, then 
                 that node is considered a match.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DoubleClickTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, DoubleClickTextNode, "Parent"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, DoubleClickTextNode, "Parent", 3</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, DoubleClickTextNode, "Parent", "Index=3"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, DoubleClickTextNode, "Parent-&gt;Child"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATreeView, DoubleClickTextNode, "Parent-&gt;Child", 3</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to double click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to double click.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DoubleClickUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, DoubleClickUnverifiedTextNode, "MyParent-&gt;MyBranch-&gt;MyNode"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, DoubleClickUnverifiedTextNode, "MyParent-&gt;MyBranch-&gt;MyNode", "3"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TreeView, DoubleClickUnverifiedTextNode, "MyParent-&gt;MyBranch-&gt;MyNode", "Index=3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of the node to be clicked
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to be clicked
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Expand</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, Expand, "Parent"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, Expand, "Parent", 3</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, Expand, "Parent", "Index=3"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATreeView, Expand, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to expand
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to expand.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ExpandPartial</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, ExpandPartial, "parent"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, ExpandPartial, "parent", "3"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, ExpandPartial, "parent", "Index=3"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, ExpandPartial, "parent-&gt;child"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATreeView, ExpandPartial, "parent-&gt;child", "3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-Insensitive text of node to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-insensitive text of the node.
                 Parent-Child relationships are separated by "-&gt;".
                 For each level, a text comparison is performed. If the node 
                 contains the requested substring anywhere in its text, then 
                 that node is considered a match.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ExpandPartialTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, ExpandPartialTextNode, "parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, ExpandPartialTextNode, "parent-&gt;child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-Insensitive text of node to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-insensitive text of the node.
                 Parent-Child relationships are separated by "-&gt;".
                 For each level, a text comparison is performed. If the node 
                 contains the requested substring anywhere in its text, then 
                 that node is considered a match.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ExpandTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, EXPANDTEXTNODE, "MyNode"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, EXPANDTEXTNODE, "MyNode", "3"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TreeView, EXPANDTEXTNODE, "MyNode", "Index=3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to expand
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to expand.
				 <br><b>RJ Implementation:</b>TextValue must be given as full path with separator "-&gt;". Example: "Parent-&gt;Child"
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ExpandUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, ExpandUnverifiedTextNode, "root-&gt;Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, ExpandUnverifiedTextNode, "root-&gt;Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive full path text of node to expand
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to expand.
                 Parent-Child relationships are separated by "-&gt;".  If the tree 
                 contains hidden root nodes the user must provide these.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>PartialMatchTreeDataToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Browser, aTreeView, PartialMatchTreeDataToFile, aFilename.ext</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, aJavaTree, PartialMatchTreeDataToFile, myDirectory\aFilename.ext, "parent-&gt;branch", "_"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>File</B><BR/><short_desc xmlns="">
             The name of the file used to store the tree data.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             The name of the file used to store the tree data.
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>Branch</B><BR/><short_desc xmlns="">
	             The full name of the tree branch to capture.
	              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
	             The full name of the tree branch to capture.  If omitted, 
	             all branches/nodes are captured.
		     <br><br>The search of the path to the node is a case-insensitive 
		     substring match of each node.  Use 'CaptureTreeDataToFile' if you 
		     wish to specify case-sensitive exact matches for tree nodes.             
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>IndentMark</B><BR/><short_desc xmlns="">
			        	The character(s) to use in the output file to indent the tree nodes from the 
			        	parent tree branches.
			        </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
			         	The character(s) to use in the output file to indent the tree nodes from the 
			        	parent tree branches.  If omitted, a tab character is used.
	              		</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>FilterMode</B><BR/><short_desc xmlns="">
             (Future) Specify a file filter to use to process the text before comparison.
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>FilterOptions</B><BR/><short_desc xmlns="">
             (Future) Specify filter options to use with the file filter.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightClickPartial</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, RightClickPartial, "parent"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, RightClickPartial, "parent", "3"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, RightClickPartial, "parent", "Index=3"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, RightClickPartial, "parent-&gt;child"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATreeView, RightClickPartial, "parent-&gt;child", "3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-Insensitive text of node to right click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-insensitive text of the node to right click.
                 Parent-Child relationships are separated by "-&gt;"
                 For each level, a text comparison is performed. If the node 
                 contains the requested substring anywhere in its text, then 
                 that node is considered a match.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightClickTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, RightClickTextNode, "MyParent-&gt;MyBranch-&gt;MyNode"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, RightClickTextNode, "MyParent-&gt;MyBranch-&gt;MyNode", "3"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TreeView, RightClickTextNode, "MyParent-&gt;MyBranch-&gt;MyNode", "Index=3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of the node to be clicked
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to be clicked
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightClickUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, RightClickUnverifiedTextNode, "MyParent-&gt;MyBranch-&gt;MyNode"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, RightClickUnverifiedTextNode, "MyParent-&gt;MyBranch-&gt;MyNode", "3"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TreeView, RightClickUnverifiedTextNode, "MyParent-&gt;MyBranch-&gt;MyNode", "Index=3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of the node to be clicked
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to be clicked
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Select</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, Select, "Parent"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, Select, "Parent", 3</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, Select, "Parent", "Index=3"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, Select, "Parent-&gt;Child"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATreeView, Select, "Parent-&gt;Child", "3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to select.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectAnotherPartialTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, SelectAnotherPartialTextNode, "parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, SelectAnotherPartialTextNode, "parent-&gt;child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-Insensitive text of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-insensitive text of the node to select.
                 Parent-Child relationships are separated by "-&gt;"
                 For each level, a text comparison is performed. If the node 
                 contains the requested substring anywhere in its text, then 
                 that node is considered a match.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectAnotherTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, SelectAnotherTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, SelectAnotherTextNode, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to select.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectAnotherUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, SelectAnotherUnverifiedTextNode, "root-&gt;Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, SelectAnotherUnverifiedTextNode, "root-&gt;Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive full path text of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to select.
                 Parent-Child relationships are separated by "-&gt;"  If the tree contains 
                 hidden root nodes they must be provided.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectPartial</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, SelectPartial, "parent"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, SelectPartial, "parent", "3"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, SelectPartial, "parent", "Index=3"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, SelectPartial, "parent-&gt;child"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATreeView, SelectPartial, "parent-&gt;child", "3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-Insensitive text of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-insensitive text of the node to select.
                 Parent-Child relationships are separated by "-&gt;"
                 For each level, a text comparison is performed. If the node 
                 contains the requested substring anywhere in its text, then 
                 that node is considered a match.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectPartialTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, SelectPartialTextNode, "parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, SelectPartialTextNode, "parent-&gt;child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-Insensitive text of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-insensitive text of the node to select.
                 Parent-Child relationships are separated by "-&gt;"
                 For each level, a text comparison is performed. If the node 
                 contains the requested substring anywhere in its text, then 
                 that node is considered a match.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectPartialTextNodeSpecial</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, SelectPartialTextNodeSpecial, "parent", , Shift, Left</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATreeView, SelectPartialTextNodeSpecial, "parent", , Control, Left</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-Insensitive text (can be a part of whole text) of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-insensitive text (can be a part of whole text) of the node to select.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>SpecialKey</B><BR/><short_desc xmlns="">
               The special key command used in the row selection.
	           For now, only Control and Shift are supported.
             </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>MouseClick</B><BR/><short_desc xmlns=""> 
	           The type of mouse click needed.
		       For now, only Left and Right are supported.
             </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectStateIcon</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, SELECTSTATEICON, "MyNode"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, SELECTSTATEICON, "MyNode", 3</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TreeView, SELECTSTATEICON, "MyNode", "Index=3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of the node to be selected/checked.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to be selected/checked.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, SELECTTEXTNODE, "MyNode"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, SELECTTEXTNODE, "MyNode", 3</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TreeView, SELECTTEXTNODE, "MyNode", "Index=3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of the node to be selected.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to be selected.
  				 <br><b>RJ Implementation:</b>TextValue must be given as full path with separator "-&gt;". Example: "Parent-&gt;Child"
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectTextNodeSpecial</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, ATreeView, SelectTextNodeSpecial, "Parent", , Shift, Left</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, ATreeView, SelectTextNodeSpecial, "Parent", , Control, Left</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to select.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>SpecialKey</B><BR/><short_desc xmlns="">
               The special key command used in the row selection.
	           For now, only Control and Shift are supported.
             </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    8 :<B>MouseClick</B><BR/><short_desc xmlns=""> 
	           The type of mouse click needed.
		       For now, only Left and Right are supported.
             </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, SelectUnverifiedTextNode, "MyParent-&gt;MyBranch-&gt;MyNode"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, SelectUnverifiedTextNode, "MyParent-&gt;MyBranch-&gt;MyNode", "3"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TreeView, SelectUnverifiedTextNode, "MyParent-&gt;MyBranch-&gt;MyNode", "Index=3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of the node to be clicked
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to be clicked
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectUnverifiedTextNodeRightClick</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, SelectUnverifiedTextNodeRightClick, "MyParent-&gt;MyBranch-&gt;MyNode"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TreeView, SelectUnverifiedTextNodeRightClick, "MyParent-&gt;MyBranch-&gt;MyNode", "3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of the node to be clicked
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to be clicked
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetTreeContainsNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, aTreeView, SetTreeContainsNode, "Parent Bank-&gt;Branch Banking and Trust", isFound</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Node</B><BR/><short_desc xmlns="">
             				The name of the node to verify.
              			</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
							The search of the path to the node is expected to be a case-sensitive 
							exact match of each node.  Use 'SetTreeContainsPartialMatch' if you 
							wish to specify case-insensitive substring matches for tree nodes.
							<br><b>RJ Implementation:</b>TextValue must be given as full path with separator "-&gt;". Example: "Parent-&gt;Child"
              			</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ResultVar</B><BR/><short_desc xmlns="">
	             			The name of the variable which gets assigned the result.
	              		</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
	             			The value of 'TRUE' indicates the node was found in the tree, and 'FALSE'
	             			indicates that the node was not found in the tree.
	              		</detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetTreeContainsPartialMatch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, aTreeView, SetTreeContainsPartialMatch, "parent-&gt;branch", isFound</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Node</B><BR/><short_desc xmlns="">
             				The name of the node to verify.
              			</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             				The search of the path to the node is expected to be a case-insensitive 
							substring match of each node.  Use 'SetTreeContainsNode' if you 
             				wish to specify case-sensitive substring matches for tree nodes.
							<br><b>RJ Implementation:</b>TextValue must be given as full path with separator "-&gt;". Example: "Parent-&gt;Child"
              			</detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ResultVar</B><BR/><short_desc xmlns="">
	             			The name of the variable which gets assigned the result.
	              		</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
	             			The value of 'TRUE' indicates the node was found in the tree, and 'FALSE'
	             			indicates that the node was not found in the tree.
	              		</detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>ShiftClickUnverifiedTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, AJTree, ShiftClickUnverifiedTextNode, "Parent"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AJTree, ShiftClickUnverifiedTextNode, "Parent-&gt;Child"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to SHIFT-click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to SHIFT-click.
                 Parent-Child relationships are separated by "-&gt;"
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>UnCheckTextNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, UnCheckTextNode, "MyNode"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, UnCheckTextNode, "MyNode", 3</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TreeView, UnCheckTextNode, "MyNode", "Index=3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of the node to be unchecked.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to be unchecked.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyNodeUnselected</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TreeView, VERIFYNODEUNSELECTED, "MyNode"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to be verified NOT selected
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to be verified NOT selected
				 <br><b>RJ Implementation:</b>TextValue must be given as full path with separator "-&gt;". Example: "Parent-&gt;Child"				 
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifySelectedNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TreeView, VERIFYSELECTEDNODE, "MyNode"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of node to be verified selected
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the node to be verified selected
				 <br><b>RJ Implementation:</b>TextValue must be given as full path with separator "-&gt;". Example: "Parent-&gt;Child"				  
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyStateIcon</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, VERIFYSTATEICON, "MyNode"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, VERIFYSTATEICON, "MyNode", "3"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TreeView, VERIFYSTATEICON, "MyNode", "Index=3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of state icon to be verified selected
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the state icon to be verified selected/checked
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyStateIconUnselected</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, VERIFYSTATEICONUNSELECTED, "MyNode"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, VERIFYSTATEICONUNSELECTED, "MyNode", "3"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TreeView, VERIFYSTATEICONUNSELECTED, "MyNode", "Index=3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of state icon to be verified NOT selected/checked
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the state icon to be verified NOT selected/checked
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyTextNodeChecked</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, VerifyTextNodeChecked, "MyNode"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, VerifyTextNodeChecked, "MyNode", "3"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TreeView, VerifyTextNodeChecked, "MyNode", "Index=3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of state icon to be verified selected/checked
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the state icon to be verified selected/checked
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyTextNodeUnChecked</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, VerifyTextNodeUnChecked, "MyNode"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, TreeView, VerifyTextNodeUnChecked, "MyNode", "3"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, TreeView, VerifyTextNodeUnChecked, "MyNode", "Index=3"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                 Case-sensitive text of state icon to be verified NOT checked
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                 TextValue is the case-sensitive text of the state icon to be verified NOT checked
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>MatchIndex</B><BR/><short_desc xmlns=""> 
                 Optional index of the Nth duplicate item to match.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
                 Allows us to match duplicate item N in a list containing duplicate 
                 entries.  For example, match the 2nd (or specified Nth) item whose text matches 
                 the provided text value.
                 <p>
                 The value of the parameter can have 2 forms:<br>
                 <ul>
                 <li>A numeric value.  Ex: "3"</li>
                 <li>Index prefixed value.  Ex: "Index=3"</li>
                 </ul>
                 </p>
                 <p>
                 If the field parameter data does not match one of these two forms then 
                 the data is ignored and the default(first match) is used.
                 </p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyTreeContainsNode</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, aTreeView, VerifyTreeContainsNode, "Parent Bank-&gt;Branch Banking and Trust"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Node</B><BR/><short_desc xmlns="">
             		The name of the node to verify.
              	</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             		The search of the path to the node is expected to be a case-sensitive 
	     		exact match of each node.  Use 'VerifyTreeContainsPartialMatch' if you 
	     		wish to specify case-insensitive substring matches for tree nodes.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyTreeContainsPartialMatch</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, Browser, aTreeView, VerifyTreeContainsNode, "parent-&gt;branch"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>Node</B><BR/><short_desc xmlns="">
             		The name of the node to verify.
              	</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             		The search of the path to the node is expected to be a case-insensitive 
			substring match of each node.  Use 'VerifyTreeContainsNode' if you 
             		wish to specify case-sensitive substring matches for tree nodes.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>VSFlexGridFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="VSFlexGridFunctions.htm" target="_blank">
<FONT color="#000000">VSFlexGridFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>ClickCell</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, AWindow, AGrid, ClickCell, ^row=2, ^col=1</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>row</B><BR/><short_desc xmlns=""> 
             The 1-based logical row to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
             If no row is provided then row=1 is assumed.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>col</B><BR/><short_desc xmlns=""> 
             The 1-based logical col to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
             If no col is provided then col=1 is assumed.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectCell</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, AWindow, AGrid, SelectCell, ^row=2, ^col=1</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    [5]:<B>row</B><BR/><short_desc xmlns=""> 
             The 1-based logical row to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
             If no row is provided then row=1 is assumed.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>col</B><BR/><short_desc xmlns=""> 
             The 1-based logical col to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns=""> 
             If no col is provided then col=1 is assumed.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyValuesToFile</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='WSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                W
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, Window, VSFGrid, VerifyGridToFile, "bench.ext"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, Window, VSFGrid, VerifyGridToFile, "bench.ext", 1, 5</FONT></LI>
<LI type="circle"><FONT color="#800080">T, Window, VSFGrid, VerifyGridToFile, "bench.ext", 1, 5, 3, 6</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, Window, VSFGrid, VerifyGridToFile, "bench.ext", 1, 5, "First Name", "Zip Code"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchmarkFile</B><BR/><short_desc xmlns=""> 
             The name of the file used as the comparison benchmark.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             The name of the file used as the comparison benchmark.<br>
             Typically, benchmarks are stored in the Datapool\Bench directory.  
             In that event, only the filename.ext is needed.  
             Benchmarks and captures will be TAB delimited files.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>rowMin</B><BR/><short_desc xmlns=""> 
             The first row to include in the capture and compare.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             By default, the first row of the grid is used.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>rowMax</B><BR/><short_desc xmlns=""> 
             The last row to include in the capture and compare.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             By default, the last row of the entire grid is used.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>colMin</B><BR/><short_desc xmlns=""> 
             The first col to include in the capture and compare.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             By default, the first col of the grid is used.  
             Columns can also be specified by full or partial 
             column header text.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [9]:<B>colMax</B><BR/><short_desc xmlns=""> 
             The last col to include in the capture and compare.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
             By default, the last col of the entire grid is used.
             Columns can also be specified by full or partial 
             column header text.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI type="disc"><FONT color="#0000A0">
<B>WindowFunctions</B>
</FONT>
<UL>
<LI type="circle"><A HREF="WindowFunctions.htm" target="_blank">
<FONT color="#000000">WindowFunctions Documentation.</FONT></A>
</LI>
<LI><FONT color="#000000"><B>Click</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, CLICK, AnObject</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, CLICK, ASubObject</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                Name of the AppMap subkey to lookup and use for the click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                <p>Name of the AppMap subkey to lookup and use for the click.
                We expect the AppMap to contain the item in the format "x,y":</p>
                <p>
                [FileMenu]
                Exit=33,120   OR
                Exit=Coords=33,120 </p>
                <p>
                The results from the lookup are appended to the "Coords=" string 
                used by the Window Click command in Robot (if necessary).  So any 
                valid content used with the Window Click command can be part of 
                this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CloseWindow</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, CLOSEWINDOW</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>CompareStoredProperties</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, WINDOW, COMPARESTOREDPROPERTIES, "AStoredVP"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VPAsset</B><BR/><short_desc xmlns=""> 
                 Name of the pre-existing VP asset stored in the currently running script.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>DoubleClick</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, DOUBLECLICK, AnObject</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, DOUBLECLICK, ASubObject</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                Name of the AppMap subkey to lookup and use for the double-click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                <p>Name of the AppMap subkey to lookup and use for the double-click.
                We expect the AppMap to contain the item in the format "x,y":</p>
                <p>
                [FileMenu]
                Exit=33,120   OR
                Exit=Coords=33,120 </p>
                <p>
                The results from the lookup are appended to the "Coords=" string 
                used by the Window DBLClick command in Robot (if necessary).  So any 
                valid content used with the Window DBLClick command can be part of 
                this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GetWinInfo</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOWNAME, WINDOWNAME, GETWININFO, Caption, ^TitleValue</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>PropertyName</B><BR/><short_desc xmlns=""> 
                     The name of the property to retrieve.
                   </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>VariableName</B><BR/><short_desc xmlns=""> 
			  The name of the variable that the property value should be stored in.
			</short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>GoBack</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Android'>DRD</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOWNAME, WINDOWNAME, GoBack</FONT></LI>
<LI type="circle"><FONT color="#800080">T, Anything, AtAll, GoBack</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>InputCharacters</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, WINDOW, INPUTCHARACTERS, "Some Text to Input"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                String of keystrokes to send.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                String of keystrokes to send.
                Consult the documentation on the SQA InputKeys command for 
                syntax information for special characters and keys.  This 
                routine sends the provided string unmodified to the InputKeys
                command.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>InputKeys</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, WINDOW, INPUTKEYS, "Some Text to Input"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                String of keystrokes to send.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                String of keystrokes to send.
                Consult the documentation on the SQA InputKeys command for 
                syntax information for special characters and keys.  This 
                routine sends the provided string unmodified to the InputKeys
                command.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Maximize</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, MAXIMIZE</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Minimize</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, MINIMIZE</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>PinchClose</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, AppWindow, AppWindow, PinchClose, Origin1, Resize2</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, AppWindow, AppWindow, PinchClose, Origin1, "-40;-40", 3</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>OriginSubKey</B><BR/><short_desc xmlns=""> 
                     The AppMapSubkey that contains the onscreen rectangle for the pinch operation.
                   </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                     Name of the AppMap subkey to lookup and use for OriginRect or the actual 
                     literal text for the values.
                     <p>
                     We expect the rectangle stored in the App Map or the literal text to be specified 
                     as integer rectangle coordinates and size in pixels: X,Y,Width,Height.
                     </p><p><pre>
               [AppWindow]
               ...
               Origin1="50,200,25,25"      OR
               Origin2="Coords=100,75,125,125"
               ...
               </pre></p>
  		             <p>
		             Engines should attempt to support coordinates separated by alternate separators.  
		             The most common separators that should be supported would be:
		             <ul>
				     <li>"," (comma) Example: "50,200,25,25"</li>
				     <li>";" (semi-colon) Example: "50;200;25;25"</li>
				     <li>" " (space) Example: "50 200 25 25"</li>
		             </ul>
		             </p><p>
		             If the App Map does not contain the subkey item then the engines should assume 
		             the value is the literal text of the rectangle coordinate and size values.
		             </p>
                   </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ResizeSubKey</B><BR/><short_desc xmlns=""> 
                     Name of the AppMap subkey to lookup for the resize value or the literal text of 
                     the resize values.
                   </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                     Name of the AppMap subkey to lookup for the resize value or the literal text of 
                     the resize values.
                     <p>
                     We expect the resize value stored in the App Map or the literal text to be specified 
                     as integer values (in pixels): +/-Width, +/-Height.
                     </p><p><pre>
               [AppWindow]
               ...
               Resize1="0,-50"   (no width change, but shrink the height by 50 pixels)  
               Resize2="Coords=-40,0" (shrink width by 40 pixels, with no change in height.)
               ...
               </pre></p>
                     <p>
                     These resize offsets can be positive or negative integer values and will be added to 
                     the existing width and/or height of OrigRect.
  		             </p><p>
		             Engines should attempt to support values separated by alternate separators.  
		             The most common separators that should be supported would be:
		             <ul>
				     <li>"," (comma) Example: "0,50"</li>
				     <li>";" (semi-colon) Example: "0;50"</li>
				     <li>" " (space) Example: "0 50"</li>
		             </ul>
		             </p><p>
		             If the App Map does not contain the subkey item then the engines should assume 
		             the value is the literal text of the resize values.
		             </p>
                   </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Duration</B><BR/><short_desc xmlns="">The number of seconds to take for the operation.</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                     Where supported, the engine should attempt to make the operation take up to N seconds 
                     in duration.  The default is 1 second.
                   </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>PinchOpen</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Apple IOS'>IOS</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, AppWindow, AppWindow, PinchOpen, Origin1, Resize1</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, AppWindow, AppWindow, PinchOpen, Origin1, "40;40", 3</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>OriginSubKey</B><BR/><short_desc xmlns=""> 
                     The AppMapSubkey that contains the onscreen rectangle for the pinch operation.
                   </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                     Name of the AppMap subkey to lookup and use for OriginRect or the actual 
                     literal text for the values.
                     <p>
                     We expect the rectangle stored in the App Map or the literal text to be specified 
                     as integer rectangle coordinates and size in pixels: X,Y,Width,Height.
                     </p><p><pre>
                [AppWindow]
                ...
                Origin1="50,200,25,25"      OR
                Origin2="Coords=100,75,125,125"
                ...
                </pre></p>
  		             <p>
		             Engines should attempt to support coordinates separated by alternate separators.  
		             The most common separators that should be supported would be:
		             <ul>
				     <li>"," (comma) Example: "50,200,25,25"</li>
				     <li>";" (semi-colon) Example: "50;200;25;25"</li>
				     <li>" " (space) Example: "50 200 25 25"</li>
		             </ul>
		             </p><p>
		             If the App Map does not contain the subkey item then the engines should assume 
		             the value is the literal text of the rectangle coordinate and size values.
		             </p>
                   </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ResizeSubKey</B><BR/><short_desc xmlns=""> 
                     Name of the AppMap subkey to lookup for the resize value or the literal text of 
                     the resize values.
                   </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                     Name of the AppMap subkey to lookup for the resize value or the literal text of 
                     the resize values.
                     <p>
                     We expect the resize value stored in the App Map or the literal text to be specified 
                     as integer values (in pixels): +/-Width, +/-Height.
                     </p><p><pre>
                [AppWindow]
                ...
                Resize1="0,50"   (no width change, but grow in height by 50 pixels)  
                Resize2="Coords=50,0" (grow width by 50 pixels, with no change in height.)
                ...
                </pre></p>
                     <p>
                     These resize offsets can be positive or negative integer values and will be added to 
                     the existing width and/or height of OrigRect.
  		             </p><p>
		             Engines should attempt to support values separated by alternate separators.  
		             The most common separators that should be supported would be:
		             <ul>
				     <li>"," (comma) Example: "0,50"</li>
				     <li>";" (semi-colon) Example: "0;50"</li>
				     <li>" " (space) Example: "0 50"</li>
		             </ul>
		             </p><p>
		             If the App Map does not contain the subkey item then the engines should assume 
		             the value is the literal text of the resize values.
		             </p>
                   </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>Duration</B><BR/><short_desc xmlns="">The number of seconds to take for the operation.</short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                     Where supported, the engine should attempt to make the operation take up to N seconds 
                     in duration.  The default is 1 second.
                   </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>Restore</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, RESTORE</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>RightClick</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, RIGHTCLICK, AnObject</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, RIGHTCLICK, ASubObject</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>AppMapSubkey</B><BR/><short_desc xmlns=""> 
                Name of the AppMap subkey to lookup and use for the right-click.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                <p>Name of the AppMap subkey to lookup and use for the right-click.
                We expect the AppMap to contain the item in the format "x,y":</p>
                <p>
                [FileMenu]
                Exit=33,120   OR
                Exit=Coords=33,120 </p>
                <p>
                The results from the lookup are appended to the "Coords=" string 
                used by the Window Right_Click command in Robot (if necessary).  So any 
                valid content used with the Window Right_Click command can be part of 
                this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectMenuID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, WINDOW, SELECTMENUID, 37</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>MenuID</B><BR/><short_desc xmlns=""> 
                MenuID to identify which menuitem to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                MenuID to identify which menuitem to select.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectMenuItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, SELECTMENUITEM, "&amp;File-&gt;&amp;Save  Ctrl+S"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, PopupMenu, PopupMenu, SELECTMENUITEM, "Exit"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to select.
                NOTE:RC (Robot) can only handle submenus up to 5 levels deep.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SelectMenuItemContains</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, SELECTMENUITEMCONTAINS, "&amp;File-&gt;&amp;Save"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, PopupMenu, PopupMenu, SELECTMENUITEMCONTAINS, "x"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>TextValue</B><BR/><short_desc xmlns=""> 
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to select.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to select.
                NOTE:RC (Robot) can only handle submenus up to 5 levels deep.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetFocus</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, SETFOCUS</FONT></LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>SetPosition</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium1.0'>SE</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='SmartBear Test Complete'>TC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Selenium2.0'>SE2</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='AutoIT'>AUT</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, WINDOW, SETPOSITION, Preset1</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>PresetReference</B><BR/><short_desc xmlns=""> 
                String specifying a preset reference in the Application for the position, size, and state of the Window.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                String specifying a preset reference in the Application for the position, size, and state of the Window.
                command.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyImage</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, WINDOW, VERIFYIMAGE, "AStoredVP"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VPAsset</B><BR/><short_desc xmlns=""> 
                TextValue is the name of the pre-existing VP asset stored in the currently running script.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                TextValue is the name of the pre-existing VP asset stored in the currently running script.
                If the name also exists in the app map under the component then 
                a RegionImageVP will be attempted.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyMainMenu</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                , F
                )</FONT></SMALL></SMALL>
<UL>
<LI type="circle"><FONT color="#800080">T, WINDOW, WINDOW, VERIFYMAINMENU, "BenchFile.ext"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, VERIFYMAINMENU, "BenchFile.ext", "Descriptive Text"</FONT></LI>
<LI type="circle"><FONT color="#800080">T, WINDOW, AnObject, VERIFYMAINMENU, "BenchFile.ext", "Descriptive Text", "TestFile.ext"</FONT></LI>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, AnObject, VERIFYMAINMENU, "BenchFile.ext", , "TestFile.ext", "DiffFile.ext"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>BenchmarkFile</B><BR/><short_desc xmlns=""> 
                name.ext of benchmark file on repositiory's Datapool\Bench directory
              </short_desc></FONT><BR/>
</LI>
<LI><FONT color="#008000">Field 
	    [6]:<B>DescriptiveText</B><BR/><short_desc xmlns=""> 
                Optional expected descriptive text at start of file (first line of bench).
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Optional expected descriptive text at start of file (first line of bench).
                (If bench has this descriptive text this field is REQUIRED to pass.)
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [7]:<B>TestFile</B><BR/><short_desc xmlns=""> 
                optional name.ext to give current structure in repository's 
                Datapool\Test directory for compare with benchmark.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                optional name.ext to give current structure in repository's 
                Datapool\Test directory for compare with benchmark.
                If no name is given then the bench name is used.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    [8]:<B>DiffFile</B><BR/><short_desc xmlns=""> 
                Optional name.ext to store difference information
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Optional name.ext to store difference information in repository's Datapool\Dif.
                If no name is given then the bench name is used.
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyMenuID</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                , F
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, WINDOW, VERIFYMENUID, 37,"Enabled Checked"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>MenuID</B><BR/><short_desc xmlns=""> 
                MenuID to identify which menuitem to test.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                MenuID to identify which menuitem to test.  This is generally used 
                when the menuitem is a bitmap or other item that does not have text.
                This value can be retrieved from the the menu by index or by manual
                lookup from a menu structure output from MenuUtilities.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ExpectedStatus</B><BR/><short_desc xmlns=""> 
                Expected status string (or part thereof) to verify. 
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Expected status string (or part thereof) to verify.  
                Ex: "Enabled Checked" OR  "Disabled Grayed" etc.
                Each item separated by a space will be evaluated separately so 
                the order of the status items does not matter.  
                These status items ARE case-sensitive. 
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyMenuItem</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                , F
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, WINDOW, VERIFYMENUITEM, "File","Enabled Menu With 7 MenuItems"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>MenuItemText</B><BR/><short_desc xmlns=""> 
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to test.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to test.
                This menu hierarchy IS case-sensitive
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ExpectedStatus</B><BR/><short_desc xmlns=""> 
                Expected status string (or part thereof) to verify. 
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Expected status string (or part thereof) to verify.  
                Ex: "Enabled Checked"         OR  "Disabled Grayed"    etc.
                Each item separated by a space will be evaluated separately so 
                the order of the status items does not matter.  
                These status items ARE case-sensitive. 
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyMenuItemContains</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='FSupport' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational RobotJ'>RJ</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                , F
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, WINDOW, WINDOW, VERIFYMENUITEMCONTAINS, "File-&gt;Save","Enabled"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>MenuItemText</B><BR/><short_desc xmlns=""> 
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to test.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Menu-&gt;MenuItem hierarchy string to identify which menuitem to test.
                This menu hierarchy IS case-sensitive
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>ExpectedStatus</B><BR/><short_desc xmlns=""> 
                Expected status string (or part thereof) to verify. 
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                Expected status string (or part thereof) to verify.  
                Ex: "Enabled Checked"         OR  "Disabled Grayed"    etc.
                Each item separated by a space will be evaluated separately so 
                the order of the status items does not matter.  
                These status items ARE case-sensitive. 
              </detailed_desc></FONT>
</LI>
</UL>
</LI>
</UL>
</LI>
<LI><FONT color="#000000"><B>VerifyOCRValue</B>
</FONT>
<TABLE><TR>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Rational Robot Classic'>RC</SPAN></TD>
<TD class="borderStyle"><SPAN CLASS='Support' TITLE='Mercury Interactive WinRunner'>WR</SPAN></TD>
</TR></TABLE>
<SMALL><SMALL><FONT color="#0000FF">(
                
                )</FONT></SMALL></SMALL>
<UL>
<LI><FONT color="#800080"><usage xmlns="">T, LoginWindow, SomeWindowObject, VERIFYOCRVALUE, "AStoredVP", 1, "&lt;Expected Value&gt;"</usage></FONT>
<UL type="circle">
<LI><FONT color="#008000">Field 
	    5 :<B>VPAsset</B><BR/><short_desc xmlns=""> 
               VPTextValue is the name of the pre-existing VP asset stored in the currently running script.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                TextValue is the name of the pre-existing VP asset stored in the currently running script.
                If the name also exists in the app map under the component then 
                a RegionImageVP will be invoked instead of a CompareImageVP.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    6 :<B>OCRIntegerValue</B><BR/><short_desc xmlns=""> 
                IntegerValue is the numeric OCR region mask to get the text from.
              </short_desc></FONT><BR/>
<FONT color="#000080"><detailed_desc xmlns="">
                IntegerValue is the numeric OCR region mask to get the text from.  These values are defined
                in the VP itself and can be viewed in Robot's ImageComparator/Editor.
                A number can be used directly or a named reference can be used if
                it is found to exist in the Application Map in a section with the 
                same name as the VP.
              </detailed_desc></FONT>
</LI>
<LI><FONT color="#008000">Field 
	    7 :<B>ExpectedTextValue</B><BR/><short_desc xmlns=""> 
                Text baseline to compare against the retrieved OCR text.
              </short_desc></FONT><BR/>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
</LI>
</UL>
<TABLE><TR>
<TD><FONT FACE="Arial" SIZE="2" COLOR="red">
<BR/></FONT></TD></TR></TABLE>
<HR/>
<A HREF="DDEngineSetup.htm" target="_blank">DDE Setup</A>, 
	<A HREF="DDEngineReference.htm" target="_blank">DDEngineReference</A>, 
	<A HREF="UsingDDVariables.htm" target="_blank">Using DDVariables</A>, 
	<A HREF="UsingFlowControl.htm" target="_blank">Error Recovery and Flow Control</A>, 
	<A HREF="UsingCustomExtensions.htm" target="_blank">Custom Extensions</A>
</BODY></HTML>
